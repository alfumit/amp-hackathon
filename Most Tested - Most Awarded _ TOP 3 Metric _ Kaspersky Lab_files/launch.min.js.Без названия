'use strict';

/* Build Timestamp: (2018-8-6 18:21:39) */
angular.module('kappGlobal', [
// GENERAL
'ui.router', 'ngMessages', 'ngSanitize', 'ngLocale', 'angularUtils.directives.dirPagination', 'uiRouterStyles', 'angular.filter', 'angularLoad',
// 'tandibar/ng-rollbar',
'kappGlobal.errorHandler', 'seo', 'duScroll', 'ngDialog', 'kappGlobal.env', 'kappGlobal.version', 'kappGlobal.branch', 'kappGlobal.helpers', 'kappGlobal.partnersConfig', 'kappGlobal.ajaxSpinner', 'kappGlobal.dynamicModelBinding', 'kappGlobal.directiveData', 'kappGlobal.productData', 'kappGlobal.priceData', 'kappGlobal.filters', 'kappGlobal.localization', 'kappGlobal.downloadLinksFactory', 'kappGlobal.pageInfoModule', 'kappGlobal.searchService', 'kappGlobal.imageManager', 'kappGlobal.cookieService', 'kappGlobal.errorService', 'kappGlobal.httpInterceptor', 'kappGlobal.templateVersion', 'kappGlobal.seoConfig', 'kappGlobal.notificationBarGeo', 'kappGlobal.newsLetterPopup',

// LAYOUT
'kappGlobal.siteTop', 'kappGlobal.footerGlobal', 'kappGlobal.siteHeader', 'kappGlobal.currencySelector', 'kappGlobal.mobileNav', 'kappGlobal.pageHeader', 'kappGlobal.socialSharing', 'kappGlobal.homepageBanner', 'kappGlobal.b2c', 'kappGlobal.premiumServices', 'kappGlobal.b2b', 'kappGlobal.vsb', 'kappGlobal.smb', 'kappGlobal.eula', 'kappGlobal.enterprise', 'kappGlobal.partners', 'kappGlobal.about', 'kappGlobal.awardsSection', 'kappGlobal.bazaarVoice', 'kappGlobal.buyblocks', 'kappGlobal.compareTable', 'kappGlobal.promoComparisonChart', 'kappGlobal.customHtml', 'kappGlobal.downloadBlockFeatured', 'kappGlobal.downloadBlock', 'kappGlobal.featureSection', 'kappGlobal.featuredProducts', 'kappGlobal.hmc', 'kappGlobal.hmcUniversal', 'kappGlobal.articlesSection', 'kappGlobal.kssVerdictHeader', 'kappGlobal.lrcSteps', 'kappGlobal.lrcStepsSec', 'kappGlobal.malwareStats', 'kappGlobal.premiumServices', 'kappGlobal.productUpdates', 'kappGlobal.productUpdatesPack', 'kappGlobal.promoSection', 'kappGlobal.renewAndAbout', 'kappGlobal.resourceDocuments', 'kappGlobal.tabbedSectionBuyblock', 'kappGlobal.contentRepo', 'kappGlobal.search', 'kappGlobal.lrcService', 'kappGlobal.osDetect', 'kappGlobal.tracking', 'kappGlobal.maxymiser', 'kappGlobal.lrcVerdictPage', 'kappGlobal.lrcSerial', 'kappGlobal.arPopup', 'kappGlobal.popup', 'kappGlobal.ngSrcLocaleHack', 'kappGlobal.runOnLast', 'kappGlobal.rss', 'kappGlobal.cookiesRequirement', 'kappGlobal.siteBar', 'kappGlobal.vpnProhibitedMessage', 'kappGlobal.errorAnimation', 'kappGlobal.statsWidget', 'kappGlobal.bottomBanner', 'kappGlobal.productPromo', 'kappGlobal.featuresGrid', 'kappGlobal.productScriptsInjector', 'kappGlobal.newsLetterOptIn', 'kappGlobal.doubleBanner', 'kappGlobal.lrcDisclaimers', 'kappGlobal.trustpilotReviews', 'kappGlobal.callbackForm', 'kappGlobal.gdprReady', 'kappGlobal.customCarousel', 'kappGlobal.accordion']);
'use strict';

(function () {
    'use strict';

    rootScopeSetup.$inject = ["$rootScope", "$window", "sessionStorageService", "currencyManager", "appHelperService", "PARTNERS", "ENV", "windowHelperService", "VER", "BRANCH", "localizationService"];
    angular.module('kappGlobal').run(rootScopeSetup);

    function rootScopeSetup($rootScope, $window, sessionStorageService, currencyManager, appHelperService, PARTNERS, ENV, windowHelperService, VER, BRANCH, localizationService) {
        $rootScope.stateChangeInProgress = false;
        $rootScope.getCacheNames = getCacheNames();
        $rootScope.currencyLocale = getCurrencyLocale();
        $rootScope.currency = getCurrency();
        $rootScope.products = {}; // variable that holds products information
        $rootScope.search = { 'query': '', 'count': '' };
        $rootScope.currentBreadcrumbs = $rootScope.currentBreadcrumbs || '[NULL]';
        $rootScope.kaspersky = $window.kaspersky = {
            'trackPageViewOnLoad': 0,
            'customerId': '',
            'platformName': 'NextGen',
            'siteType': 'Default',
            'siteLocale': appHelperService.getLocale(),
            'pageCharset': 'UTF-8',
            'pageName': $rootScope.currentBreadcrumbs,
            'eCommProvider': PARTNERS[ENV.locale] || 'Digital River',
            'verdictSite': $rootScope.verdictSite,
            'verdictRegion': $rootScope.verdictRegion,
            'verdictChannel': $rootScope.verdictChannel,
            'verdictPartner': $rootScope.verdictPartner,
            'verdictProduct': $rootScope.verdictProduct,
            'verdictDevices': $rootScope.verdictDevices,
            'verdictTerm': $rootScope.verdictTerm,
            'verdictLicenseStatus': $rootScope.verdictLicenseStatus,
            'serialNumber': '',
            'verdictPartNumber': '',
            // verdictChannelInfo: '',
            'verdictLicenseType': '',
            'productName': '', // page level product information
            'searchQuery': $rootScope.search.query,
            'searchTotalResults': $rootScope.search.count,
            'cookiesOptout': 0,
            'currency': '',
            'isStaging': windowHelperService.isStaging(),
            'version': {
                'rev': VER.version,
                'branch': BRANCH.name,
                'date': BRANCH.date,
                'sha': BRANCH.sha,
                'api': ENV.apiServer
            },
            'hmcTool': ''
        };
        $rootScope.prevPageName = '';
        $rootScope.buyBlockReady = buyBlockReady;
        $rootScope.trackPageView = rootScopeTrackPageView;
        $rootScope.populateCurrency = populateCurrency;
        $rootScope.canonical = windowHelperService.getCanonicalUrl();

        initialise();

        function initialise() {
            populateCurrency();
        }

        function buyBlockReady() {
            $rootScope.$broadcast('buyBlockReady');
            if (performance && 'mark' in performance) performance.mark('buyblockReady');
        }

        function getCurrencyLocale() {
            return sessionStorageService.get($rootScope.getCacheNames.currencyLocaleCache) && sessionStorageService.get($rootScope.getCacheNames.currencyLocaleCache).locale || appHelperService.getLocale();
        }

        function getCurrency() {
            return sessionStorageService.get($rootScope.getCacheNames.currencyLocaleCache) && sessionStorageService.get($rootScope.getCacheNames.currencyLocaleCache).currency;
        }

        function getCacheNames() {
            var hostUrl = appHelperService.getHostName(),
                currenciesCacheName = hostUrl + '-globalCurrencies',
                currencyLocaleCacheName = hostUrl + '-currencyLocale';
            return {
                'currenciesCache': currenciesCacheName,
                'currencyLocaleCache': currencyLocaleCacheName
            };
        }

        function rootScopeTrackPageView() {
            if (angular.isFunction($window.trackPageView) && $rootScope.kaspersky.prevPageName !== $rootScope.kaspersky.pageName && !appHelperService.assertStateByName(['lrc-verdict', 'lrc-serial'])) {
                $rootScope.kaspersky.prevPageName = angular.copy($rootScope.kaspersky.pageName);
                $window.trackPageView($rootScope.kaspersky.pageName);
            }
        }

        function populateCurrency(currencyItem) {
            var cachedCurrency = sessionStorageService.get($rootScope.getCacheNames.currencyLocaleCache);
            currencyItem = currencyItem || cachedCurrency || currencyManager.getDefaultCurrencyFromConfig(appHelperService.getLocale());
            localizationService.setCurrencyLocale(currencyItem);
            currencyManager.setCurrentCurrency(currencyItem);
            if (angular.isUndefined(currencyItem) || currencyItem === null) return;
            $rootScope.currencyLocale = currencyItem.locale;
            $rootScope.currency = currencyItem.currency;
        }
    }
})();
'use strict';

/* eslint-disable */
(function () {
    'use strict';

    siteSetup.$inject = ["$rootScope", "$state", "$stateParams", "$window", "cookieService", "ENV", "windowHelperService", "seoHelperService", "appHelperService", "$log", "tracking", "directiveData", "pageInfoService", "errorService", "$templateCache", "$timeout", "maxymiser"];
    angular.module('kappGlobal').run(siteSetup);
    function siteSetup($rootScope, $state, $stateParams, $window, cookieService, ENV, windowHelperService, seoHelperService, appHelperService, $log, tracking, directiveData, pageInfoService, errorService, $templateCache, $timeout, maxymiser) {

        var contentLocation = void 0;

        initialise();

        function initialise() {
            skipRedirect();
            addLocaleClass();
            if ($window.templates) {
                for (var item in $window.templates) {
                    $templateCache.put(decodeURIComponent(item), $window.templates[item]);
                }
            }
            tracking.setTrackingCookie();
            tracking.setAdobeCampaignValues();
            tracking.setAdmitadRefererParams();
        }

        $rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl) {
            $rootScope.oldUrl = oldUrl;
            if (performance && 'mark' in performance) {
                performance.mark('stateChangeStart');
            }
        });

        $rootScope.$on('$stateChangeStart', function (ev, to) {
            checkPageSetting(ev);
            var allowedUrls = ['product-kfa', 'kfa-thank-you', 'product-kss'];
            if (ENV.locale === 'ja-jp' && to.parent === 'home-security-section' && allowedUrls.indexOf(to.name) === -1) {
                var jpB2C = 'https://home.kaspersky.co.jp/store/kasperjp/DisplayHomePage/?icid=jp_ng-mhp_pro_ona_oth__onl_b2c__ban_______';
                ev.preventDefault();
                windowHelperService.navigateUserTo(jpB2C);
            }

            // A requirement to clean up window.kaspersky on every state change
            $rootScope.stateData = false;
        });

        $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from) {

            $window.scrollTo(0, 0);
            setContentLocation();

            pageInfoService.hasRoute(windowHelperService.getLocationHref()).then(function (res) {
                if (res.data === true) {
                    // $window.location.href = $window.location;$
                }
            }).catch(function (err) {
                errorService.warn(err);
            });

            $rootScope.stateData = undefined;
            $rootScope.kaspersky.regKey = undefined;
            $rootScope.kaspersky.pageName = undefined;
            $rootScope.kaspersky.verdictSite = undefined;
            $rootScope.kaspersky.verdictRegion = undefined;
            $rootScope.kaspersky.verdictChannel = undefined;
            $rootScope.kaspersky.verdictPartner = undefined;
            $rootScope.kaspersky.verdictProduct = undefined;
            $rootScope.kaspersky.verdictDevices = undefined;
            $rootScope.kaspersky.verdictTerm = undefined;
            $rootScope.kaspersky.verdictLicenseProduct = undefined;
            $rootScope.kaspersky.verdictLicenseStatus = undefined;
            $rootScope.kaspersky.serialNumber = undefined;
            $rootScope.kaspersky.verdictPartNumber = undefined;
            $rootScope.kaspersky.verdictLicenseType = undefined;
            $rootScope.kaspersky.productName = undefined;

            var referrerValue = '',
                referrerTag = $window.document.querySelector('meta[name="referrer"]');
            if (referrerTag) {
                if (from.url !== '^') {
                    referrerValue = $rootScope.oldUrl;
                } else {
                    referrerValue = $rootScope.kaspersky.referrer;
                }
            } else {
                referrerValue = $window.document.referrer;
                var referrerMeta = $window.document.createElement('meta');
                referrerMeta.name = 'referrer';
                referrerMeta.content = 'no-referrer';
                $window.document.head.appendChild(referrerMeta);
            }

            $rootScope.kaspersky.referrer = from.params && from.params.canonical ? '' + windowHelperService.getDomainName() + from.params.canonical : referrerValue;

            directiveData.get('/content/' + ENV.locale + contentLocation + '/meta.json').then(handleMetaSuccess).catch(handleMetaError);

            var viewContentListener = $rootScope.$on('$viewContentLoaded', function () {
                viewContentListener();
                $timeout(function () {
                    (function (w, d, s, l, i) {
                        w[l] = w[l] || [];
                        w[l].push({
                            'gtm.start': new Date().getTime(), 'event': 'gtm.js'
                        });
                        var f = d.getElementsByTagName(s)[0],
                            j = d.createElement(s),
                            dl = l != 'dataLayer' ? '&l=' + l : '';
                        j.async = true;
                        j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;
                        f.parentNode.insertBefore(j, f);
                    })(window, document, 'script', 'dataLayer', 'GTM-WZ7LJ3');
                });

                angular.getTestability(document).whenStable(function () {
                    var RProfiler = $window.RProfiler,
                        timingObj = $window.timingObj;
                    if (performance && 'mark' in performance) {
                        performance.mark('ngRender');

                        var frontendNGReadyTimeVal = performance.getEntriesByName('ngRender')[0].startTime,
                            firstPaintTimeVal = timingObj && timingObj.firstPaintTime,
                            totalLoadTimeVal = performance.timing.loadEventEnd - performance.timing.fetchStart;
                        if (RProfiler) {
                            RProfiler.addInfo('indicator', 'i15631', frontendNGReadyTimeVal);
                            RProfiler.addInfo('indicator', 'i55228', firstPaintTimeVal);
                            RProfiler.addInfo('indicator', 'i65010', totalLoadTimeVal);
                        }
                    }
                    $rootScope.$emit('ngRender');
                    maxymiser.fireMMEvent();

                    if (angular.isFunction($rootScope.trackPageView) && $rootScope.pageDataReady) {
                        $rootScope.trackPageView();
                    }

                    $log.log('data_complete');
                    $window.dataLayer.push({ 'event': 'dataReady' });
                });
            });
        });

        function setupMeta(description, title, keywords) {
            if ($state.current.name !== '404') windowHelperService.setWindowTitle(title || $state.current.data && $state.current.data.title);

            // Reduce an array of breadcrumbs into a string
            $rootScope.currentBreadcrumbs = seoHelperService.parseBreadcrumbs($rootScope.breadcrumbs);

            if ($rootScope.currentBreadcrumbs.indexOf('Resource Center') > -1) setResourceTitle();

            kaspersky.pageName = $rootScope.currentBreadcrumbs || $window.kaspersky.pageName;
            kaspersky.productName = $stateParams.productName;
            /*Metadata settings*/
            if (!isLRCPage()) {
                seoHelperService.setMeta({ 'description': description || 'Kaspersky Labs' });
                if (!description) kaspersky.pageName = $rootScope.currentBreadcrumbs;
                if (keywords) seoHelperService.setMeta({ 'keywords': keywords });
            } else {
                seoHelperService.removeMeta('description');
                seoHelperService.removeMeta('keywords');
            }
            $rootScope.kaspersky.prevPageName = '';
            $rootScope.$emit('pageDataReady'); // either way fire an event that page data is in place
            $rootScope.pageDataReady = true;
            setMetaTags();
        }

        function setResourceTitle() {
            var resourceTitle = _.startCase(windowHelperService.getPathName().split('/').pop().replace(/-/g, ' '));
            $rootScope.currentBreadcrumbs = $rootScope.currentBreadcrumbs + ' > ' + resourceTitle;
        }

        function handleMetaSuccess(response) {
            var res = response && response.data ? response.data.fields : {};
            if (res.linkedComponents && res.linkedComponents.length) $rootScope.stateData = res.linkedComponents; //empty linkedComponents array check, after - value assignment
            //angular.extend($state.params, {linkedComponents: res.linkedComponents})

            if (!res) {
                $rootScope.breadcrumbs = seoHelperService.getDefaultBreadcrumbs(null, contentLocation);
            } else {
                $rootScope.breadcrumbs = res.breadcrumbs;
            }
            setupMeta(res.description, res.title, res.keywords);
        }

        function handleMetaError() {
            $rootScope.breadcrumbs = seoHelperService.getDefaultBreadcrumbs(true, contentLocation);
            setupMeta();
        }

        /* Section meta for search  */
        function setMetaTags() {
            var searchAreaContent = 'other';
            if ($state.includes('home-security-section')) {
                searchAreaContent = 'home-security';
            } else if ($state.includes('about-section')) {
                searchAreaContent = 'about-section';
            } else if ($state.includes('enterprise')) {
                searchAreaContent = 'enterprise';
            } else if ($state.includes('vsb')) {
                searchAreaContent = 'vsb';
            } else if ($state.includes('smb')) {
                searchAreaContent = 'smb';
            }

            var metaObj = {
                'DocId': appHelperService.getLocationPath(),
                'DocType': 'Marketing-B2B',
                'PublishDate': new Date().toISOString().slice(0, 10),
                'PubLang': ENV.locale.match(/\w+/g)[0],
                'PubCountry': ENV.locale.match(/\w+/g)[1],
                'Breadcrumb': $rootScope.breadcrumbs.reduce(function (prev, curr, index) {
                    return !index ? prev + curr.title : prev + '/' + curr.title;
                }, ''),
                'SearchAreaNavigator': searchAreaContent
            };

            seoHelperService.setMeta(metaObj);
        }

        function setContentLocation() {
            return contentLocation = seoHelperService.getContentLocation();
        }

        function addLocaleClass() {
            angular.element(document).find('body').addClass('locale--' + ENV.locale);
        }

        function isLRCPage() {
            var url = windowHelperService.getPathName().toLowerCase();
            return url.indexOf('/lrc') !== -1;
        }

        // Removed as part of performance optimization
        // function activateRandomImagesCaching() {
        //     return imageManagerService.activateRandomImagesCache();
        // }

        function skipRedirect() {
            if (appHelperService.searchParam('ignoreredirects')) cookieService.set('ignoreredirects', true, 7);
        }

        function checkPageSetting(ev) {
            var loc = ['it-it'];

            if (loc.indexOf(ENV.locale) > -1 && $window.pageSettings && $window.pageSettings.match(/error404/g)) {
                $window.pageSettings = '/content/';
                $state.go('404', {}, { 'location': false });
                ev.preventDefault();
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$urlMatcherFactoryProvider", "$locationProvider", "$urlRouterProvider", "$stateProvider", function ($urlMatcherFactoryProvider, $locationProvider, $urlRouterProvider, $stateProvider) {
        $urlMatcherFactoryProvider.caseInsensitive(true);
        $urlMatcherFactoryProvider.strictMode(false);
        $locationProvider.html5Mode({ 'enabled': true, 'requireBase': true }).hashPrefix('!');
        $urlRouterProvider.otherwise(function ($injector) {
            var $window = $injector.get('$window'),
                $rootElement = $injector.get('$rootElement'),
                $state = $injector.get('$state');
            if ($window.error404) {
                $state.go('404', {}, { 'location': false });
                return;
            }
            if (!$window.customFlag) {
                // $window.location.href = $window.location;
            } else {
                // In case if page is custom turn off SPA mode
                $rootElement.off();
            }
        });
        $stateProvider.decorator('views', function (state) {
            var views = {};
            angular.forEach(angular.isDefined(state.views) ? state.views : { '': state }, function (view, name) {
                if (name.indexOf('@') < 0) name += '@' + state.parent.name;
                view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
                views[name] = view;
            });
            return views;
        });
        $stateProvider.decorator('data', function (state) {
            return state.data;
        });
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", function ($stateProvider) {

        /** Callback to be called on scroll for handling the sticky header */
        function handleStickyHeaderOnScroll($window) {
            var scroll = $($window).scrollTop(),
                siteHeaderAvail = $('.site-header').length,
                totalHeight = $('site-header').attr('site-top-height');

            if (scroll >= totalHeight && siteHeaderAvail) {
                $('body').addClass('sticky-header-on');
            } else {
                $('body').removeClass('sticky-header-on');
            }
        }

        $stateProvider.state('master', {
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/master/index.html'
        }).state('master-header', {
            'abstract': true,
            'template': '<site-top></site-top><site-header></site-header><ui-view></ui-view><footer-global></footer-global>'
        }).state('home-security-section', {
            'parent': 'master',
            'abstract': true,
            'data': {
                'navIndex': 0,
                'css': ['/resources/template/css/b2c.min.css']
            },
            'controller': ["$rootScope", "$state", "$window", "$scope", "appHelperService", "productData", "priceData", "productScriptsInjectorService", "bazaarVoiceDataService", function controller($rootScope, $state, $window, $scope, appHelperService, productData, priceData, productScriptsInjectorService, bazaarVoiceDataService) {
                $($window).on('scroll.home', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.home');
                });

                function isProductPage() {
                    var states = ['home-security', 'home-product-kpm', 'home-product'];
                    return appHelperService.assertStateByName(states);
                }

                if (!isProductPage()) return;

                var productName = $state.params.productName ? $state.params.productName : 'ktsmd';

                return productData.getb2c(productName).then(function (response) {
                    var result = {
                        'productData': response.data.fields,
                        'priceValue': {},
                        'cutPrice': []
                    };

                    return priceData.getPrice(result.productData.title, result.productData.bbSettings.purchaseType, $rootScope.currency, result.productData.bbSettings.eStore).then(function (price) {
                        result.cutPrice = price.data;
                        result.priceValue = getPriceValue(result.cutPrice);
                        return bazaarVoiceDataService.getProductReviews(result.productData.bvId);
                    }).then(function (bv) {
                        if (!bv) return false;
                        result.bv = bv.data;

                        productScriptsInjectorService.performInjection(result);
                    });
                });

                function getPriceValue(values) {
                    if (values && values.length) {
                        return {
                            'price': values[0].price,
                            'currency': values[0].currency
                        };
                    }
                    return {};
                }
            }],
            'template': '<site-header></site-header><ui-view></ui-view>'
        }).state('search', {
            'parent': 'master',
            'url': '/search?query&sec',
            'templateUrl': '/resources/template/html/pages/search/index.html',
            'data': {
                'css': ['/resources/template/css/b2c.min.css']
            },
            'controller': ['$window', '$scope', function ($window, $scope) {
                $($window).on('scroll.search', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.search');
                });
            }]
        }).state('error', {
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/site-error/index.html'
        }).state('lrc-verdict-parent', {
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/lrc/index.html',
            'data': {
                'css': ['/resources/template/css/b2c.min.css']
            },
            'controller': ["$window", "$scope", function controller($window, $scope) {
                $($window).on('scroll.lrc', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.lrc');
                });
            }]
        }).state('enterprise', {
            'parent': 'master',
            'data': {
                'css': ['/resources/template/css/enterprise.min.css']
            },
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/enterprise/index.html',
            'controller': ["$window", "$scope", function controller($window, $scope) {

                $($window).on('scroll.enterprise', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.enterprise');
                });
            }]
        }).state('vsb', {
            'parent': 'master',
            'data': {
                'navIndex': 0,
                'css': ['/resources/template/css/b2b.min.css']
            },
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/vsb/index.html',
            'controller': ['$window', '$scope', function ($window, $scope) {
                $($window).on('scroll.vsb', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.vsb');
                });
            }]
        }).state('smb', {
            'parent': 'master',
            'data': {
                'navIndex': 0,
                'css': ['/resources/template/css/b2b.min.css']
            },
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/smb/index.html',
            'controller': ['$window', '$scope', function ($window, $scope) {
                $($window).on('scroll.smb', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.smb');
                });
            }]
        }).state('partners', {
            'parent': 'master',
            'data': {
                'navIndex': 0,
                'css': ['/resources/template/css/partners.min.css']
            },
            'abstract': true,
            'templateUrl': '/resources/template/html/pages/partners/index.html',
            'controller': ['$window', '$scope', function ($window, $scope) {
                $($window).on('scroll.partners', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.partners');
                });
            }]
        }).state('about-section', {
            'parent': 'master',
            'abstract': true,
            'data': {
                'navIndex': 0,
                'css': ['/resources/template/css/about.min.css']
            },
            'controller': ['$window', '$scope', function ($window, $scope) {
                $($window).on('scroll.about', _.wrap($window, handleStickyHeaderOnScroll));
                $scope.$on('$destroy', function () {
                    $($window).off('scroll.about');
                });
            }],
            'template': '\n                    <site-header></site-header>\n                    <ui-view></ui-view>'
        });
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider.state('about', {
            'parent': 'about-section',
            'url': '/about',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/about/index.html'
        }).state('about-awards', {
            'parent': 'about-section',
            'url': '/about/awards',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/about/awards.html'
        }).state('about-careers', {
            'parent': 'about-section',
            'url': '/about/careers',
            'data': {
                'navIndex': 6
            },
            'templateUrl': '/resources/template/html/pages/about/careers.html'
        }).state('about-faq', {
            'parent': 'about-section',
            'url': '/about/careers/faq',
            'templateUrl': '/resources/template/html/pages/smb/faq.html',
            'data': {
                'navIndex': 2,
                'title': 'Frequently Asked Questions'
            }
        }).state('about-careers-career', {
            'parent': 'about-section',
            'url': '/about/careers/:careerName',
            'data': {
                'navIndex': 6
            },
            'templateUrl': '/resources/template/html/pages/about/content.html',
            'controller': ["$stateParams", "directiveData", function controller($stateParams, directiveData) {
                var _this = this;

                directiveData.getByUrl($stateParams.careerName).then(function (response) {
                    _this.career = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('about-company', {
            'parent': 'about-section',
            'url': '/about/company',
            'data': {
                'navIndex': 1
            },
            'templateUrl': '/resources/template/html/pages/about/company.html'
        }).state('about-contact', {
            'parent': 'about-section',
            'url': '/about/contact',
            'templateUrl': '/resources/template/html/pages/about/contact.html'
        }).state('about-team', {
            'parent': 'about-section',
            'url': '/about/team',
            'data': {
                'navIndex': 2
            },
            'templateUrl': '/resources/template/html/pages/about/team.html'
        }).state('about-team-person', {
            'parent': 'about-section',
            'url': '/about/team/:personName',
            'data': {
                'navIndex': 2
            },
            'templateUrl': '/resources/template/html/pages/about/team-person.html',
            'controller': ["$stateParams", "directiveData", function controller($stateParams, directiveData) {
                var _this2 = this;

                directiveData.getByUrl($stateParams.personName).then(function (response) {
                    _this2.person = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('about-story', {
            'parent': 'about-section',
            'url': '/about/stories/:jsonName',
            'data': {
                'navIndex': 3
            },
            'templateProvider': ["templateVersion", "$templateFactory", "$stateParams", "errorService", function templateProvider(templateVersion, $templateFactory, $stateParams, errorService) {
                return templateVersion.getVer('about/stories/' + $stateParams['jsonName'], 'meta').then(function (response) {
                    if (response.data && response.data.fields.template === '2.0') return $templateFactory.fromUrl('/resources/template/html/pages/about/transparency.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/about/content.html');
                }).catch(handleRejection);

                function handleRejection(rejection) {
                    errorService.warn(rejection);
                }
            }]
        }).state('policy-blog', {
            'parent': 'about-section',
            'url': '/about/policy-blog',
            'data': {
                'navIndex': 3,
                'title': 'Policy Blog'
            },
            'templateUrl': '/resources/template/html/pages/content-repo/about/resources-center.html'
        }).state('policy-blog-category', {
            'parent': 'about-section',
            'url': '/about/policy-blog/:category?rel&sel',
            'templateUrl': '/resources/template/html/pages/content-repo/about/resources-category.html',
            'data': {
                'navIndex': 3,
                'title': 'Resources category'
            }
        }).state('policy-blog-category.details', {
            'parent': 'about-section',
            'url': '/about/policy-blog/:category/:path',
            'templateUrl': '/resources/template/html/pages/content-repo/about/resources-post.html',
            'data': {
                'navIndex': 3,
                'title': 'Resources category'
            }
        }).state('press-releases', {
            'parent': 'about-section',
            'url': '/about/press-releases?rel&sel',
            'data': {
                'navIndex': 4
            },
            'templateUrl': '/resources/template/html/pages/content-repo/press-releases.html',
            'reloadOnSearch': false,
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }]
        }).state('press-releases.details', {
            'parent': 'about-section',
            'url': '/about/press-releases/:path',
            'templateUrl': '/resources/template/html/pages/content-repo/press-releases-details.html',
            'data': {
                'navIndex': 4
            }
        }).state('press-center', {
            'parent': 'about-section',
            'url': '/about/press-center',
            'data': {
                'navIndex': 5
            },
            'templateProvider': ["ENV", "$templateFactory", function templateProvider(ENV, $templateFactory) {
                if (ENV.locale === 'en-us') {
                    return $templateFactory.fromUrl('/resources/template/html/pages/about/content.html');
                } else if (ENV.locale === 'ru-ru') {
                    return $templateFactory.fromUrl('/resources/template/html/pages/content-repo/press-center-advanced.html');
                } else {
                    return $templateFactory.fromUrl('/resources/template/html/pages/content-repo/press-center.html');
                }
            }]
        }).state('press-center-gallery', {
            'parent': 'about-section',
            'url': '/about/press-center/gallery',
            'data': {
                'navIndex': 5
            },
            'templateUrl': '/resources/template/html/pages/about/gallery.html'
        }).state('press-center-gallery.details', {
            'parent': 'about-section',
            'url': '/about/press-center/gallery/:path',
            'data': {
                'navIndex': 5
            },
            'templateUrl': '/resources/template/html/pages/about/gallery-details.html'
        }).state('press-center-contacts', {
            'parent': 'about-section',
            'url': '/about/press-center/contacts',
            'data': {
                'navIndex': 5
            },
            'templateUrl': '/resources/template/html/pages/about/press-center-contacts.html'
        }).state('press-center.details', {
            'parent': 'about-section',
            'url': '/about/press-center/:path',
            'data': {
                'navIndex': 5
            },
            'templateUrl': '/resources/template/html/pages/content-repo/press-center-details.html'
        }).state('in-the-news', {
            'parent': 'about-section',
            'url': '/about/in-the-news?rel&sel',
            'data': {
                'navIndex': 4
            },
            'templateUrl': '/resources/template/html/pages/content-repo/news.html'
        }).state('in-the-news.details', {
            'parent': 'about-section',
            'url': '/about/in-the-news/:path',
            'data': {
                'navIndex': 4
            },
            'templateUrl': '/resources/template/html/pages/content-repo/news-details.html'
        }).state('motorsport', {
            'parent': 'about-section',
            'url': '/about/kaspersky-motorsport',
            'data': {
                'navIndex': 7
            },
            'templateUrl': '/resources/template/html/pages/about/motorsport.html'
        });
        $urlRouterProvider.when('/about/contactinfo', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'contactinfo' }, { 'location': false, 'inherit': true });
        }]).when('/about/data-protection', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'data-protection' }, { 'location': false, 'inherit': true });
        }]).when('/about/fighting-crime', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'fighting-crime' }, { 'location': false, 'inherit': true });
        }]).when('/about/law-enforcement-cooperation', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'law-enforcement-cooperation' }, { 'location': false, 'inherit': true });
        }]).when('/about/our-unique-experience-and-knowledge', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'our-unique-experience-and-knowledge' }, { 'location': false, 'inherit': true });
        }]).when('/about/security-without-borders', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'security-without-borders' }, { 'location': false, 'inherit': true });
        }]).when('/about/solutions-and-services', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'solutions-and-services' }, { 'location': false, 'inherit': true });
        }]).when('/about/transparency', ["$state", function ($state) {
            $state.go('about-story', { 'jsonName': 'transparency' }, { 'location': false, 'inherit': true });
        }]);
    }]);
})();
'use strict';

(function () {
    'use strict';

    osRecognitionController.$inject = ["$location", "$rootScope", "$scope", "$anchorScroll", "osDetectService"];
    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        var opts = { 'location': false, 'inherit': true };

        $stateProvider.state('home-security', {
            'data': {
                'navIndex': 0,
                'title': 'Home Security'
            },
            'parent': 'home-security-section',
            'url': '/home-security',
            'templateUrl': '/resources/template/html/pages/home-security/security.html'
        }).state('home-product-kscloud', {
            'data': {
                'navIndex': 0,
                'title': 'Home Product'
            },
            'parent': 'home-security-section',
            'url': '/home-security/products/kscloud',
            'templateUrl': '/resources/template/html/pages/home-security/product-kscloud.html',
            'controller': ["productData", "templateVersion", function controller(productData, templateVersion) {
                var _this = this;

                var ctrl = this;
                productData.getb2c('kscloud').then(function (response) {
                    _this.product = response.data.fields;
                });

                templateVersion.getVer('home-security', 'meta', 'products/kscloud/meta').then(function (response) {
                    ctrl.template = response.data.fields.template || '1.0';
                });
            }],
            'controllerAs': '$ctrl'
        }).state('home-product-kpm', {
            'data': {
                'navIndex': 0,
                'title': 'Home Product'
            },
            'params': {
                'copy': null
            },
            'parent': 'home-security-section',
            'url': '/home-security/products/kpm',
            'templateUrl': '/resources/template/html/pages/home-security/product-kpm.html',
            'controller': ["productData", "$stateParams", "windowHelperService", "$anchorScroll", "$location", "$rootScope", function controller(productData, $stateParams, windowHelperService, $anchorScroll, $location, $rootScope) {
                var _this2 = this;

                productData.getb2c('kpm').then(function (response) {
                    _this2.product = response.data.fields;
                    _this2.template = _this2.product.template;
                });
                this.copy = $stateParams.copy;
                this.navigateUserTo = windowHelperService.navigateUserTo;

                var ngRender = $rootScope.$on('ngRender', function () {
                    if ($location.hash()) $anchorScroll();
                    ngRender();
                });
            }],
            'controllerAs': '$ctrl'
        }).state('home-product', {
            'data': {
                'navIndex': 0,
                'title': 'Home Product'
            },
            'params': {
                'bundle': null
            },
            'parent': 'home-security-section',
            'url': '/home-security/products/:jsonName',
            'templateUrl': '/resources/template/html/pages/home-security/product.html',
            'controller': ["productData", "$stateParams", function controller(productData, $stateParams) {
                var _this3 = this;

                productData.getb2c($stateParams.jsonName).then(function (response) {
                    _this3.product = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('home-downloads', {
            'data': {
                'navIndex': 2,
                'title': 'Download product'
            },
            'parent': 'home-security-section',
            'url': '/home-security/downloads',
            'templateUrl': '/resources/template/html/pages/home-security/downloads.html',
            'controller': osRecognitionController,
            'controllerAs': '$ctrl'
        }).state('home-downloads-product', {
            'data': {
                'navIndex': 2,
                'title': 'Downloads'
            },
            'parent': 'home-security-section',
            'url': '/home-security/downloads/products/:jsonName',
            'templateUrl': '/resources/template/html/pages/home-security/downloads-product.html',
            'params': {
                'canonical': null
            },
            'controller': ["productData", "$stateParams", "geoLocationManager", "$state", "$rootScope", "$scope", "windowHelperService", "ENV", "$location", "$anchorScroll", "osDetectService", function controller(productData, $stateParams, geoLocationManager, $state, $rootScope, $scope, windowHelperService, ENV, $location, $anchorScroll, osDetectService) {
                var _this4 = this;

                var curUrl = $state.href($state.current.name, $state.params, { 'absolute': true }),
                    geoIP = geoLocationManager.getUserGeoIp(curUrl);

                setCanonicalLink($rootScope, windowHelperService, ENV.locale !== 'es-mx' ? $stateParams.canonical : undefined);

                if (geoLocationManager.isVpnProhibitedCountry(geoIP) && $stateParams.jsonName === 'ksec') $state.go('home-downloads', {}, {
                    'location': false,
                    'inherit': false
                });

                productData.getb2c($stateParams.jsonName).then(function (response) {
                    _this4.product = response.data.fields;
                });

                if ($stateParams.jsonName === 'ksec') {
                    osRecognitionController($location, $rootScope, $scope, $anchorScroll, osDetectService);
                }
            }],
            'controllerAs': '$ctrl'
        }).state('home-free-trials-product', {
            'data': {
                'navIndex': 2,
                'title': 'Free Trials'
            },
            'parent': 'home-security-section',
            'url': '/home-security/free-trials/products/:jsonName',
            'templateUrl': '/resources/template/html/pages/home-security/free-trials-product.html',
            'controller': ["productData", "$stateParams", "$rootScope", function controller(productData, $stateParams, $rootScope) {
                var _this5 = this;

                productData.getb2c($stateParams.jsonName).then(function (response) {
                    _this5.product = response.data.fields;
                    $rootScope.kaspersky.productName = _this5.product.title;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('auto-renewal-service', {
            'parent': 'home-security-section',
            'url': '/home-security/auto-renewal-service',
            'data': {
                'navIndex': 0,
                'title': 'B2C Auto Renewal Service'
            },
            'templateUrl': '/resources/template/html/pages/home-security/auto-renewal-service.html'
        }).state('product-kss', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kss',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSS'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-product.html',
            'controller': osRecognitionController,
            'controllerAs': '$ctrl'
        }).state('kss-verdict', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kss/verdict',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSS Verdict'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-verdict.html'
        }).state('kss-verdict1', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kss/verdict1',
            'data': {
                'title': 'B2C Tools - KSS Verdict'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-verdict.html'
        }).state('product-ksu', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/ksu',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSU'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksu-product.html'
        }).state('product-kwc', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kwc',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KWC Who Calls'
            },
            'controller': ["seoHelperService", "ENV", function controller(seoHelperService, ENV) {
                var twitterMetaObj = {
                    'twitter:card': 'summary',
                    'twitter:creator': '@Kaspersky_ru',
                    'twitter:title': 'Kaspersky Who Calls – Больше никакого спама и назойливых звонков с мошеннических номеров!',
                    'twitter:description': 'Теперь вы можете легко и быстро узнать, кто звонит вам с незнакомого номера с помощью бесплатного приложения. Решайте, отвечать ли на звонок или добавить номер в блок, после того, как увидите название компании звонящего, адрес, категорию и сведения о ее репутации.',
                    'twitter:image': 'https://www.kaspersky.ru/content/ru-ru/images/screenshot_wc_1.png'
                };

                if (ENV.locale === 'ru-ru') seoHelperService.setMeta(twitterMetaObj);
            }],
            'controllerAs': '$ctrl',
            'templateUrl': '/resources/template/html/pages/b2c-tools/kwc-product.html'
        }).state('product-kfa', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kfa',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KFA'
            },
            'params': {
                'canonical': null
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kfa-product.html',
            'controller': ["$location", "$rootScope", "$scope", "$anchorScroll", "osDetectService", "ENV", "$stateParams", "windowHelperService", function controller($location, $rootScope, $scope, $anchorScroll, osDetectService, ENV, $stateParams, windowHelperService) {
                setCanonicalLink($rootScope, windowHelperService, ENV.locale === 'fr-fr' ? $stateParams.canonical : undefined);
                osRecognitionController($location, $rootScope, $scope, $anchorScroll, osDetectService);
            }],
            'controllerAs': '$ctrl'
        }).state('product-ksk', {
            'parent': 'home-security-section',
            'params': {
                'copy': null
            },
            'url': '/b2c-tools/ksk',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSK'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksk-product.html',
            'controller': ["$stateParams", function controller($stateParams) {
                this.copy = $stateParams.copy;
            }],
            'controllerAs': '$ctrl'
        }).state('product-kscloud-free', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kscloud-free',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KS Cloud Free'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kscloud-free-product.html',
            'controllerAs': '$ctrl'
        }).state('product-ksec', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/ksec',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSeC'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksec-product.html',
            'controller': ["productData", "$stateParams", "geoLocationManager", "$state", "$rootScope", "$anchorScroll", function controller(productData, $stateParams, geoLocationManager, $state, $rootScope, $anchorScroll) {
                var _this6 = this;

                var curUrl = $state.href($state.current.name, $state.params, { 'absolute': true }),
                    geoIP = geoLocationManager.getUserGeoIp(curUrl);

                if (geoLocationManager.isVpnProhibitedCountry(geoIP)) $state.go('home-security', {}, {
                    'location': false,
                    'inherit': false
                });

                productData.getb2c('ksec').then(function (response) {
                    _this6.product = response.data.fields;
                });

                var ngRender = $rootScope.$on('ngRender', function () {
                    $anchorScroll();
                    ngRender();
                });
            }],
            'controllerAs': '$ctrl'
        }).state('product-ksk-affiliate', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/affiliate-safe-kids',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSK'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksk-product.html'
        }).state('product-rfid', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/rfid',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - RFID protection'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/rfid-product.html'
        }).state('product-usb', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/usb',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - USB key'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/usb-product.html'
        }).state('product-webcam', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/webcam',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - Webcam cover'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/webcam-product.html'
        }).state('product-kvs', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kvs',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KVS'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kvs-product.html'
        }).state('product-kvs-pro', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kvs/pro',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KVS PRO'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kvs-pro-product.html'
        }).state('product-adcleaner', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/KAC',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KAC'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kac-product.html'
        }).state('product-cleaner', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/KPC',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KPC'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kcp-product.html'
        }).state('product-qr-scanner', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/KQS',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KQS'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kqs-product.html'
        }).state('product-system-checker', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/KSC',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KSC'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksc-product.html'
        }).state('product-kisafree', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kisafree',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - KISAFree'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksc-product.html'
        }).state('product-battery-life-saver', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kbls',
            'data': {
                'navIndex': 0,
                'title': 'B2C Tools - Battery Life Saver'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/ksc-product.html'
        }).state('kss-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kss/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KSS Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': osRecognitionController,
            'controllerAs': '$ctrl'
        }).state('ksu-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/ksu/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KSU Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html'
        }).state('kfa-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kfa/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KFA Thank You'
            },
            'params': {
                'canonical': null
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': ["$location", "$rootScope", "$scope", "$anchorScroll", "osDetectService", "$stateParams", "windowHelperService", function controller($location, $rootScope, $scope, $anchorScroll, osDetectService, $stateParams, windowHelperService) {
                setCanonicalLink($rootScope, windowHelperService, $stateParams.canonical);
                osRecognitionController($location, $rootScope, $scope, $anchorScroll, osDetectService);
            }],
            'controllerAs': '$ctrl'
        }).state('kts-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kts/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KTS Thank You'
            },
            'params': {
                'canonical': null
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': ["$rootScope", "$stateParams", "windowHelperService", function controller($rootScope, $stateParams, windowHelperService) {
                setCanonicalLink($rootScope, windowHelperService);
            }]
        }).state('kis-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kis/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KIS Thank You'
            },
            'params': {
                'canonical': null
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': ["$rootScope", "windowHelperService", function controller($rootScope, windowHelperService) {
                setCanonicalLink($rootScope, windowHelperService);
            }]
        }).state('kav-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kav/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KAV Thank You'
            },
            'params': {
                'canonical': null
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': ["$rootScope", "windowHelperService", function controller($rootScope, windowHelperService) {
                setCanonicalLink($rootScope, windowHelperService);
            }]
        }).state('kismac-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kismac/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KISMAC Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html'
        }).state('ksc-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/ksc/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KSU Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html'
        }).state('kvrt-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/kvrt/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KVRT Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html',
            'controller': osRecognitionController,
            'controllerAs': '$ctrl'
        }).state('krd-thank-you', {
            'parent': 'home-security-section',
            'url': '/b2c-tools/krd/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'B2C Tools - KRT Thank You'
            },
            'templateUrl': '/resources/template/html/pages/b2c-tools/kss-thank-you.html'
        }).state('b2c-resource-center', {
            'parent': 'home-security-section',
            'url': '/resource-center',
            'templateUrl': '/resources/template/html/pages/content-repo/b2c/resources-center.html',
            'data': {
                'navIndex': 4,
                'title': 'Resource Center'
            },
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }]
        }).state('b2c-resource-center.category', {
            'parent': 'home-security-section',
            'url': '/resource-center/:category',
            'templateUrl': '/resources/template/html/pages/content-repo/b2c/resources-category.html',
            'data': {
                'navIndex': 4,
                'title': 'Resource Center Category'
            },
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }]
        }).state('b2c-resource-center.category-details', {
            'parent': 'home-security-section',
            'url': '/resource-center/:category/:path',
            'templateUrl': '/resources/template/html/pages/content-repo/b2c/resources-post.html',
            'data': {
                'navIndex': 4,
                'title': 'Resources Center Category'
            },
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }]
        }).state('premium-services', {
            'parent': 'home-security-section',
            'url': '/home-security/premium-services',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/home-security/premium-services.html',
            'controllerAs': '$ctrl'
        }).state('premium-services-faq', {
            'parent': 'home-security-section',
            'url': '/home-security/premium-service-faq',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/home-security/premium-service-faq.html',
            'controllerAs': '$ctrl'
        }).state('premium-installation-faq', {
            'parent': 'home-security-section',
            'url': '/home-security/premium-installation-faq',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/home-security/premium-service-faq.html',
            'controllerAs': '$ctrl'
        }).state('premium-service', {
            'parent': 'home-security-section',
            'url': '/home-security/products/:jsonName',
            'data': {
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/home-security/premium-service.html',
            'controller': ["productData", "$stateParams", function controller(productData, $stateParams) {
                var _this7 = this;

                productData.getb2c($stateParams.jsonName).then(function (response) {
                    _this7.product = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('b2c-special-offers', {
            'parent': 'home-security-section',
            'url': '/home-security/special-offers',
            'templateUrl': '/resources/template/html/pages/home-security/special-offers.html',
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 5
            }
        }).state('b2c-special-offer', {
            'parent': 'home-security-section',
            'url': '/home-security/special-offers/:offerName',
            'templateUrl': '/resources/template/html/pages/home-security/special-offer-page.html',
            'controller': ["$stateParams", "directiveData", function controller($stateParams, directiveData) {
                var _this8 = this;

                this.offerName = $stateParams.offerName;
                directiveData.getByUrl(this.offerName).then(function (response) {
                    _this8.offerData = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 5
            }
        }).state('b2c-payment-and-shipping', {
            'parent': 'home-security-section',
            'url': '/home-security/payment-and-shipping',
            'templateUrl': '/resources/template/html/pages/smb/payment-options.html',
            'data': {
                'navIndex': 2,
                'title': 'Payment and Shipping'
            }
        }).state('b2c-order-online', {
            'parent': 'home-security-section',
            'url': '/home-security/order-online',
            'templateUrl': '/resources/template/html/pages/smb/payment-options.html',
            'data': {
                'navIndex': 2,
                'title': 'Order Online'
            }
        }).state('b2c-how-to-buy', {
            'parent': 'home-security-section',
            'url': '/home-security/how-to-buy',
            'data': {
                'title': 'How to Buy',
                'navIndex': 1

            },
            'templateUrl': '/resources/template/html/pages/site-general/privacy.html'
        });

        $urlRouterProvider
        // B2C Products
        .when('/total-security', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'ktsmd' }, opts);
        }]).when('/total-security1', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'ktsmd', 'bundle': true }, opts);
        }]).when('/multi-device-security', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'kismd' }, opts);
        }]).when('/internet-security', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'kis' }, opts);
        }]).when('/antivirus', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'kav' }, opts);
        }]).when('/mac-security', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'kismac' }, opts);
        }]).when('/android-security', ["$state", function ($state) {
            $state.go('home-product', { 'jsonName': 'kisa' }, opts);
        }]).when('/password-manager', ["$state", function ($state) {
            $state.go('home-product-kpm', { 'jsonName': 'kpm' }, opts);
        }]).when('/acq/password-manager-all-devices', ["$state", function ($state) {
            $state.go('home-product-kpm', { 'jsonName': 'kpm', 'copy': true }, opts);
        }]).when('/security-cloud', ["$state", function ($state) {
            $state.go('home-product-kscloud', { 'jsonName': 'kscloud' }, opts);
        }])
        //Premium Service Products
        .when('/premium-services/installation', ["$state", function ($state) {
            $state.go('premium-service', { 'jsonName': 'kpis' }, opts);
        }]).when('/premium-services/browser-security', ["$state", function ($state) {
            $state.go('premium-service', { 'jsonName': 'kbs' }, opts);
        }]).when('/premium-services/home', ["$state", function ($state) {
            $state.go('premium-service', { 'jsonName': 'kcpc' }, opts);
        }]).when('/premium-services/advanced', ["$state", function ($state) {
            $state.go('premium-service', { 'jsonName': 'kcpcs' }, opts);
        }]).when('/premium-services/pc', ["$state", function ($state) {
            $state.go('premium-service', { 'jsonName': 'kpctu' }, opts);
        }]).when('/premium-services', ["$state", function ($state) {
            $state.go('premium-services', {}, opts);
        }]).when('/premium-services-faq', ["$state", function ($state) {
            $state.go('premium-services-faq', {}, opts);
        }]).when('/premium-installation-faq', ["$state", function ($state) {
            $state.go('premium-installation-faq', {}, opts);
        }])
        // B2C Downloads
        .when('/downloads', ["$state", function ($state) {
            $state.go('home-downloads', {}, opts);
        }]).when('/downloads/thank-you/total-security', ["$state", function ($state) {
            $state.go('home-downloads-product', {
                'jsonName': 'ktsmd',
                'canonical': '/downloads/thank-you/total-security-free-trial'
            }, opts);
        }]).when('/downloads/thank-you/multi-device-security', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kismd' }, opts);
        }]).when('/downloads/thank-you/internet-security', ["$state", function ($state) {
            $state.go('home-downloads-product', {
                'jsonName': 'kis',
                'canonical': '/downloads/thank-you/internet-security-free-trial'
            }, opts);
        }]).when('/downloads/thank-you/antivirus', ["$state", function ($state) {
            $state.go('home-downloads-product', {
                'jsonName': 'kav',
                'canonical': '/downloads/thank-you/antivirus-free-trial'
            }, opts);
        }]).when('/downloads/thank-you/mac-security', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kismac' }, opts);
        }]).when('/downloads/thank-you/android-security', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kisa' }, opts);
        }]).when('/downloads/thank-you/password-manager-pc', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kpm' }, opts);
        }]).when('/downloads/thank-you/password-manager-mac', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kpmmac' }, opts);
        }]).when('/downloads/thank-you/secure-connection-pc', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'ksec' }, opts);
        }])
        // B2C Trials
        .when('/downloads/thank-you/total-security-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'ktsmd' }, opts);
        }]).when('/downloads/thank-you/multi-device-security-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kismd' }, opts);
        }]).when('/downloads/thank-you/internet-security-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kis' }, opts);
        }]).when('/downloads/thank-you/antivirus-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kav' }, opts);
        }]).when('/downloads/thank-you/mac-security-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kismac' }, opts);
        }]).when('/downloads/thank-you/android-security-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kisa' }, opts);
        }]).when('/downloads/thank-you/password-manager-free-trial', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'kpm' }, opts);
        }]).when('/downloads/thank-you/try-security-cloud-personal', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'ksc-personal' }, opts);
        }]).when('/downloads/thank-you/try-security-cloud-family', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'ksc-family' }, opts);
        }]).when('/downloads/thank-you/try-free-cloud-antivirus', ["$state", function ($state) {
            $state.go('home-free-trials-product', { 'jsonName': 'ksc-free' }, opts);
        }])
        // B2C UAM Products
        .when('/free-virus-scan', ["$state", function ($state) {
            $state.go('product-kss', {}, opts);
        }]).when('/free-virus-scan/verdict', ["$state", function ($state) {
            $state.go('kss-verdict', {}, opts);
        }]).when('/free-virus-scan/verdict1', ["$state", function ($state) {
            $state.go('kss-verdict1', {}, opts);
        }]).when('/free-software-updater', ["$state", function ($state) {
            $state.go('product-ksu', {}, opts);
        }]).when('/free-caller-id', ["$state", function ($state) {
            $state.go('product-kwc', {}, opts);
        }]).when('/free-antivirus', ["$state", function ($state) {
            $state.go('product-kfa', {
                'canonical': '/antivirus'
            }, opts);
        }]).when('/safe-kids', ["$state", function ($state) {
            $state.go('product-ksk', {}, opts);
        }]).when('/free-cloud-antivirus', ["$state", function ($state) {
            $state.go('product-kscloud-free', {}, opts);
        }]).when('/rfid-protection', ["$state", function ($state) {
            $state.go('product-rfid', {}, opts);
        }]).when('/usb-key', ["$state", function ($state) {
            $state.go('product-usb', {}, opts);
        }]).when('/webcam-cover', ["$state", function ($state) {
            $state.go('product-webcam', {}, opts);
        }]).when('/safe-kids-install', ["$state", function ($state) {
            $state.go('product-ksk', { 'copy': true }, opts);
        }]).when('/secure-connection', ["$state", function ($state) {
            $state.go('product-ksec', {}, opts);
        }]).when('/affiliate-safe-kids', ["$state", function ($state) {
            $state.go('product-ksk-affiliate', {}, opts);
        }]).when('/free-mac-virus-scan', ["$state", function ($state) {
            $state.go('product-kvs', {}, opts);
        }]).when('/mac-virus-scan', ["$state", function ($state) {
            $state.go('product-kvs-pro', {}, opts);
        }]).when('/adcleaner', ["$state", function ($state) {
            $state.go('product-adcleaner', {}, opts);
        }]).when('/free-pc-cleaner', ["$state", function ($state) {
            $state.go('product-cleaner', {}, opts);
        }]).when('/qr-scanner', ["$state", function ($state) {
            $state.go('product-qr-scanner', {}, opts);
        }]).when('/system-checker', ["$state", function ($state) {
            $state.go('product-system-checker', {}, opts);
        }]).when('/android-security-free', ["$state", function ($state) {
            $state.go('product-kisafree', {}, opts);
        }]).when('/battery-life-saver', ["$state", function ($state) {
            $state.go('product-battery-life-saver', {}, opts);
        }])
        // B2C UAM Downloads
        .when('/downloads/thank-you/safe-kids-pc', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'ksk' }, opts);
        }]).when('/downloads/thank-you/safe-kids-mac', ["$state", function ($state) {
            $state.go('home-downloads-product', { 'jsonName': 'kskmac' }, opts);
        }]).when('/downloads/thank-you/security-scan', ["$state", function ($state) {
            $state.go('kss-thank-you', {}, opts);
        }]).when('/downloads/thank-you/free-software-updater', ["$state", function ($state) {
            $state.go('ksu-thank-you', {}, opts);
        }]).when('/downloads/thank-you/free-antivirus-download', ["$state", function ($state) {
            $state.go('kfa-thank-you', {
                'canonical': '/free-antivirus'
            }, opts);
        }]).when('/downloads/thank-you/free-total-security', ["$state", function ($state) {
            $state.go('kts-thank-you', { 'canonical': '/downloads/thank-you/total-security-free-trial' }, opts);
        }]).when('/downloads/thank-you/free-internet-security', ["$state", function ($state) {
            $state.go('kis-thank-you', { 'canonical': '/downloads/thank-you/internet-security-free-trial' }, opts);
        }]).when('/downloads/thank-you/free-antivirus', ["$state", function ($state) {
            $state.go('kav-thank-you', { 'canonical': '/downloads/thank-you/antivirus-free-trial' }, opts);
        }]).when('/downloads/thank-you/free-mac-security', ["$state", function ($state) {
            $state.go('kismac-thank-you', {}, opts);
        }]).when('/downloads/thank-you/system-checker', ["$state", function ($state) {
            $state.go('ksc-thank-you', {}, opts);
        }]).when('/downloads/thank-you/free-virus-removal-tool', ["$state", function ($state) {
            $state.go('kvrt-thank-you', {}, opts);
        }]).when('/downloads/thank-you/free-rescue-disk', ["$state", function ($state) {
            $state.go('krd-thank-you', {}, opts);
        }]).when('/auto-renewal-service', ["$state", function ($state) {
            $state.go('auto-renewal-service', {}, opts);
        }]);
    }]);

    function setCanonicalLink($rootScope, windowHelperService, value) {
        $rootScope.canonical = value ? windowHelperService.getDomainName() + value : windowHelperService.getCanonicalUrl();
    }

    function osRecognitionController($location, $rootScope, $scope, $anchorScroll, osDetectService) {
        var hash = $location.hash(),
            osDetected = osDetectService.getCurrentOs(hash).device.type;

        $scope.showMobile = osDetected === 'mobile';

        var ngRender = $rootScope.$on('ngRender', function () {
            if ($location.hash() === 'compare') {
                $location.hash('compare');
                $anchorScroll();
            }
            ngRender();
        });
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('custom', {
            'url': '/custom/:template',
            'templateProvider': ["$stateParams", function templateProvider($stateParams) {
                return $stateParams.template;
            }]
        });
    }]);
})();
'use strict';

(function () {
    'use strict';

    routeComponentsController.$inject = ["ENV", "$state"];
    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        var opts = { 'location': false, 'inherit': true };
        $stateProvider.state('enterprise-home', {
            'parent': 'enterprise',
            'url': '/enterprise-security',
            'data': {
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/home' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        })
        // RESOURCES STATES
        .state('enterprise-resources', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 4
            },
            'url': '/enterprise-security/resources',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'resources/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/resources' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-resource', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 4
            },
            'url': '/enterprise-security/resources/:productName',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'resources/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/resource' + res + '.html');
                });
            }],
            'controller': ["$stateParams", function controller($stateParams) {
                this.resourceName = $stateParams.productName;
                this.currentData = [];
            }],
            'controllerAs': '$ctrl'
        }).state('enterprise-case-studies-ferrari', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 4
            },
            'url': '/enterprise-security/resources/case-studies/ferrari',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'resources/case-studies/ferrari/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/case-studies-ferrari' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        })
        // CONTACT STATES
        .state('enterprise-contact-form', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 5
            },
            'url': '/enterprise-security/contact',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'contact/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-contact-thank-you', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 5
            },
            'url': '/enterprise-security/contact/thank-you',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'contact/thank-you/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact-thank-you' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-edr-piloting', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/endpoint-detection-response-edr/contact-edr-piloting',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/endpoint-detection-response-edr/contact-edr-piloting/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-threat-mgmt-defence-solution-demo', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/anti-targeted-attacks/demo',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'solutions/anti-targeted-attacks/demo/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-threat-mgmt-defence-solution-demo-thank-you', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/anti-targeted-attacks/demo/thank-you',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'solutions/anti-targeted-attacks/demo/thank-you/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-edr-download', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/endpoint-detection-response-edr/edr-download',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/endpoint-detection-response-edr/edr-download/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-edr-piloting-thank-you', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/endpoint-detection-response-edr/contact-edr-piloting/thank-you',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/endpoint-detection-response-edr/contact-edr-piloting/thank-you/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact-thank-you' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-cybersecurity-awareness-contact', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cybersecurity-awareness/contact',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/cybersecurity-awareness/contact/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-cybersecurity-awareness-demo', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cybersecurity-awareness/demo',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/cybersecurity-awareness/demo/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-apt-intelligence-reporting-sample', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/apt-intelligence-reporting/sample',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'products/apt-intelligence-reporting/sample/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-maltego-license-transforms', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/maltego-license-transforms',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'maltego-license-transforms/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-apt-intelligence-reporting-sample', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/apt-intelligence-reporting/sample',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'services/apt-intelligence-reporting/sample/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-apt-intelligence-reporting-subscribe', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/apt-intelligence-reporting/subscribe',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'services/apt-intelligence-reporting/subscribe/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') res = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-vas-contact', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 5
            },
            'url': '/partners/vas/contact',
            'templateUrl': '/resources/template/html/pages/enterprise/product-vas-contact.html'
        }).state('cyber-reputation-management-contact', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cyber-reputation-management/contact',
            'templateUrl': '/resources/template/html/pages/enterprise/contact.html'
        }).state('cyber-reputation-management-contact-thank-you', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cyber-reputation-management/contact/thank-you',
            'templateUrl': '/resources/template/html/pages/enterprise/contact-thank-you.html'
        }).state('enterprise-product-apt-intelligence-reporting-subscribe', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/apt-intelligence-reporting/subscribe',
            'templateUrl': '/resources/template/html/pages/enterprise/contact.html'
        }).state('enterprise-gdpr-contact-us', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/gdpr/contact',
            'templateUrl': '/resources/template/html/pages/enterprise/contact.html'
        }).state('enterprise-gdpr-white-paper', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/gdpr/white-paper',
            'templateUrl': '/resources/template/html/pages/enterprise/contact.html'
        })
        // SOLUTIONS STATES
        .state('enterprise-solution-endpoint', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/endpoint',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-endpoint' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-virtualization', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/virtualization',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-virtualization' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-mobile', {
            'parent': 'enterprise',
            'url': '/enterprise-security/solutions/mobile',
            'data': {
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-mobile' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-anti-targeted-attacks', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/anti-targeted-attacks',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-anti-targeted-attacks' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-threat-management', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/threat-management',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-anti-targeted-attacks' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-intelligence-services', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/intelligence-services',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-intelligence-services' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-data-center', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/data-center',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-data-center' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-fraud-prevention', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/fraud-prevention',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-fraud-prevention' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-cloud-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/cloud-security',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-cloud-security' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-aws', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/aws',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-anti-targeted-attacks' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-security-operations-center', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/security-operations-center',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-security-operations-center' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-cybersecurity-services', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/cybersecurity-services',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-cybersecurity-services' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-ddos-protection', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/ddos-protection',
            'templateUrl': '/resources/template/html/pages/enterprise/solution-ddos-protection.html'
        }).state('enterprise-solution-iot', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/iot-and-embedded-systems-security',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-iot-embedded-systems-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/iot-and-embedded-systems-security/embedded-systems-security',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-iot-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/iot-and-embedded-systems-security/iot-security',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-iot-transportation-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/iot-and-embedded-systems-security/transportation-security',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-industrial-cybersecurity', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/industrial-cybersecurity',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-industrial', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/industrial-solution',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-solution-transportation-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 0
            },
            'url': '/enterprise-security/solutions/transportation-security',
            'templateUrl': '/resources/template/html/pages/enterprise/solution.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        })
        // INDUSTRIES STATES
        .state('enterprise-industries-category', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries',
            'templateUrl': '/resources/template/html/pages/enterprise/category.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-government', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/government',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/industry.html');
                    }
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-government2.0.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-finance', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/finance',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/industry.html');
                    }
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-finance2.0.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-industrial', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/industrial',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-industrial' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/industry.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-healthcare', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/healthcare',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/industry.html');
                    }
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-healthcare2.0.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-telecom', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/telecom',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/industry.html');
                    }
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/solution-telecom2.0.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-transportation', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/transportation',
            'templateUrl': '/resources/template/html/pages/enterprise/industry.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-/retail', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/retail',
            'templateUrl': '/resources/template/html/pages/enterprise/industry.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-national-cybersecurity', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/national',
            'templateUrl': '/resources/template/html/pages/enterprise/industry.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-transportation-cybersecurity', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/transportation-cybersecurity',
            'templateUrl': '/resources/template/html/pages/enterprise/industry.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-industry-retail-cybersecurity', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/industries/retail-cybersecurity',
            'templateUrl': '/resources/template/html/pages/enterprise/industry.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        })
        // PRODUCTS STATES
        .state('enterprise-products-category', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products',
            'templateUrl': '/resources/template/html/pages/enterprise/category.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-private-security-network', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/private-security-network',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-private-security-network' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-anti-targeted-attack-platform', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/anti-targeted-attack-platform',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-anti-targeted-attack-platform' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-cybersecurity-awareness', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cybersecurity-awareness',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-cybersecurity-awareness' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-cybersecurity-how', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cybersecurity-awareness/how-it-works',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-cybersecurity-how' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('endpoint-detection-response-edr', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/endpoint-detection-response-edr',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-endpoint-detection-response-edr' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-embedded-systems', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/embedded-systems',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-embedded-systems' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-mobile', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/mobile-product',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-private-security-network' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-virtualization', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/virtualization-product',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-private-security-network' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-endpoint', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/endpoint-product',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-private-security-network' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-storage-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/storage-security',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product-private-security-network' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/product.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-vas', {
            'parent': 'enterprise',
            'url': '/partners/vas',
            'templateUrl': '/resources/template/html/pages/enterprise/product-vas.html'
        }).state('enterprise-product-maintenance-service-agreement', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/maintenance-service-agreement',
            'templateUrl': '/resources/template/html/pages/enterprise/product-maintenance-service-agreement.html'
        }).state('enterprise-product-cyber-reputation-management', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/products/cyber-reputation-management',
            'templateUrl': '/resources/template/html/pages/enterprise/product-cyber-reputation-management.html',
            'controller': ["$state", "templateVersion", "errorService", function controller($state, templateVersion, errorService) {
                return templateVersion.getVer('/enterprise-security/products/cyber-reputation-management', 'meta').then(function (response) {
                    if (response.data && response.data.fields.template === '3.0') $state.go('enterprise-service-cyber-reputation-management', {}, opts);
                }).catch(function (rejection) {
                    errorService.warn(rejection);
                });
            }],
            'controllerAs': '$ctrl'
        }).state('enterprise-product-apt-intelligence-reporting', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/apt-intelligence-reporting',
            'templateUrl': '/resources/template/html/pages/enterprise/product-apt-intelligence-reporting.html'
        }).state('enterprise-product-azure', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/azure',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-cloud-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/cloud-security',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-aws', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/aws',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-hybrid-cloud-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/hybrid-cloud-security',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-nextforce-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/nextforce-security',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-mail-server', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/mail-server',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-azure-hybrid-cloud', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/azure',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-file-server', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/file-server',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-endpoint-detection-and-response', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 1
            },
            'url': '/enterprise-security/products/endpoint-detection-and-response',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-product-office-365', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/products/office-365',
            'templateUrl': '/resources/template/html/pages/enterprise/product.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        })
        // SERVICES STATES
        .state('enterprise-services-category', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services',
            'templateUrl': '/resources/template/html/pages/enterprise/category.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-security-training', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/security-training',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-threat-hunting', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/threat-hunting',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-incident-response', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/incident-response',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-threat-intelligence', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/threat-intelligence',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-threat-intelligence' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-security-awareness', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/security-awareness',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-security-assessment', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/security-assessment',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-premium-support', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/premium-support',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-premium-support' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-professional-services', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/professional-services',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-ddos-protection', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 2
            },
            'url': '/enterprise-security/services/ddos-protection',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-ddos-protection' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-maintenance-service-agreement', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/maintenance-service-agreement',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-maintenance-service-agreement' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-apt-intelligence-reporting', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/apt-intelligence-reporting',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'services/apt-intelligence-reporting/meta').then(function (response) {
                    var res = response.data.fields.template;
                    if (res === '1.0') res = '';
                    if (res !== '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-apt-intelligence-reporting' + res + '.html');
                    }
                    if (res === '3.0') {
                        return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service.html');
                    }
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-cybersecurity-services', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/solutions/cybersecurity-services',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    var res = response.data.fields.template;
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/service-cybersecurity-services' + res + '.html');
                });
            }],
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-gdpr', {
            'parent': 'enterprise',
            'url': '/enterprise-security/products/gdpr',
            'templateUrl': '/resources/template/html/pages/enterprise/product-gdpr.html'
        }).state('enterprise-wiki-section', {
            'parent': 'enterprise',
            'url': '/enterprise-security/wiki-section/products/:productName',
            'templateUrl': '/resources/template/html/pages/enterprise/wiki-section.html'
        }).state('enterprise-wiki-section-home', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/wiki-section/home',
            'templateUrl': '/resources/template/html/pages/enterprise/wiki-section-home.html'
        }).state('enterprise-service-cyber-reputation-management', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/cyber-reputation-management',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-targeted-attack-discovery', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/targeted-attack-discovery',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-managed-detection-and-response', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/managed-detection-and-response',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-industrial-cybersecurity-assesment', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/industrial-cybersecurity-assesment',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-penetration-testing', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/penetration-testing',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-application-security-assessment', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/application-security-assessment',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-payment-systems-security', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/payment-systems-security',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-transportation-systems-security-assessment', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/transportation-systems-security-assessment',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-iot', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/iot',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-malware-analysis', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/malware-analysis',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-digital-forensics', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/digital-forensics',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-service-fraud-detection', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 3
            },
            'url': '/enterprise-security/services/fraud-detection',
            'templateUrl': '/resources/template/html/pages/enterprise/service.html',
            'controller': routeComponentsController,
            'controllerAs': '$ctrl'
        }).state('enterprise-wiki-section-feedback', {
            'parent': 'enterprise',
            'data': {
                'navIndex': 4
            },
            'url': '/enterprise-security/wiki-section/feedback',
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('enterprise-security', 'ent-hp-menu').then(function (response) {
                    if (response.data.fields.template !== '2.1') response.data.fields.template = '';
                    return $templateFactory.fromUrl('/resources/template/html/pages/enterprise/contact' + response.data.fields.template + '.html');
                });
            }]
        });

        $urlRouterProvider
        // ENT Contact
        .when('/enterprise-security/cyber-reputation-management-contact', ["$state", function ($state) {
            $state.go('cyber-reputation-management-contact', {}, opts);
        }]).when('/enterprise-security/cyber-reputation-management-contact-thank-you', ["$state", function ($state) {
            $state.go('cyber-reputation-management-contact-thank-you', {}, opts);
        }]).when('/enterprise-security/cybersecurity-awareness/contact', ["$state", function ($state) {
            $state.go('enterprise-product-cybersecurity-awareness-contact', {}, opts);
        }]).when('/gdpr/contact', ["$state", function ($state) {
            $state.go('enterprise-gdpr-contact-us', {}, opts);
        }])
        // ENT Products
        .when('/enterprise-security/anti-targeted-attack-platform', ["$state", function ($state) {
            $state.go('enterprise-product-anti-targeted-attack-platform', {}, opts);
        }]).when('/enterprise-security/private-security-network', ["$state", function ($state) {
            $state.go('enterprise-product-private-security-network', {}, opts);
        }]).when('/enterprise-security/embedded-systems', ["$state", function ($state) {
            $state.go('enterprise-product-embedded-systems', {}, opts);
        }]).when('/enterprise-security/cybersecurity-awareness', ["$state", function ($state) {
            $state.go('enterprise-product-cybersecurity-awareness', {}, opts);
        }]).when('/enterprise-security/cybersecurity-awareness/how-it-works', ["$state", function ($state) {
            $state.go('enterprise-product-cybersecurity-how', {}, opts);
        }]).when('/enterprise-security/endpoint-detection-response-edr', ["$state", function ($state) {
            $state.go('endpoint-detection-response-edr', {}, opts);
        }]).when('/enterprise-security/endpoint-product', ["$state", function ($state) {
            $state.go('enterprise-product-endpoint', {}, opts);
        }]).when('/enterprise-security/mobile', ["$state", function ($state) {
            $state.go('enterprise-product-mobile', {}, opts);
        }]).when('/enterprise-security/virtualization', ["$state", function ($state) {
            $state.go('enterprise-product-virtualization', {}, opts);
        }]).when('/enterprise-security/storage-security', ["$state", function ($state) {
            $state.go('enterprise-product-storage-security', {}, opts);
        }]).when('/enterprise-security/cyber-reputation-management', ["$state", function ($state) {
            $state.go('enterprise-product-cyber-reputation-management', {}, opts);
        }]).when('/enterprise-security/apt-intelligence-reporting/sample', ["$state", function ($state) {
            $state.go('enterprise-service-apt-intelligence-reporting-sample', {}, opts);
        }]).when('/enterprise-security/apt-intelligence-reporting/subscribe', ["$state", function ($state) {
            $state.go('enterprise-service-apt-intelligence-reporting-subscribe', {}, opts);
        }]).when('/enterprise-security/cybersecurity-awareness/demo', ["$state", function ($state) {
            $state.go('enterprise-product-cybersecurity-awareness-demo', {}, opts);
        }]).when('/enterprise-security/mail-server-security', ["$state", function ($state) {
            $state.go('enterprise-product-mail-server', {}, opts);
        }]).when('/enterprise-security/azure-hybrid-cloud-security', ["$state", function ($state) {
            $state.go('enterprise-product-azure-hybrid-cloud', {}, opts);
        }]).when('/enterprise-security/cloud-security-product', ["$state", function ($state) {
            $state.go('enterprise-product-cloud-security', {}, opts);
        }]).when('/enterprise-security/aws-hybrid-cloud-security', ["$state", function ($state) {
            $state.go('enterprise-product-aws', {}, opts);
        }])
        // ENT Solutions
        .when('/enterprise-security/endpoint', ["$state", function ($state) {
            $state.go('enterprise-solution-endpoint', {}, opts);
        }]).when('/enterprise-security/anti-targeted-attacks', ["$state", function ($state) {
            $state.go('enterprise-solution-anti-targeted-attacks', {}, opts);
        }]).when('/enterprise-security/threat-management-defense-solution', ["$state", function ($state) {
            $state.go('enterprise-solution-threat-management', {}, opts);
        }]).when('/enterprise-security/data-center', ["$state", function ($state) {
            $state.go('enterprise-solution-data-center', {}, opts);
        }]).when('/enterprise-security/fraud-prevention', ["$state", function ($state) {
            $state.go('enterprise-solution-fraud-prevention', {}, opts);
        }]).when('/enterprise-security/intelligence-services', ["$state", function ($state) {
            $state.go('enterprise-solution-intelligence-services', {}, opts);
        }]).when('/enterprise-security/mobile-solution', ["$state", function ($state) {
            $state.go('enterprise-solution-mobile', {}, opts);
        }]).when('/enterprise-security/virtualization-solution', ["$state", function ($state) {
            $state.go('enterprise-solution-virtualization', {}, opts);
        }]).when('/enterprise-security/cloud-security', ["$state", function ($state) {
            $state.go('enterprise-solution-cloud-security', {}, opts);
        }]).when('/enterprise-security/cloud-security/aws', ["$state", function ($state) {
            $state.go('enterprise-solution-aws', {}, opts);
        }]).when('/enterprise-security/security-operations-center', ["$state", function ($state) {
            $state.go('enterprise-solution-security-operations-center', {}, opts);
        }]).when('/enterprise-security/industrial-cybersecurity', ["$state", function ($state) {
            $state.go('enterprise-solution-industrial-cybersecurity', {}, opts);
        }]).when('/enterprise-security/solution-cybersecurity-services', ["$state", function ($state) {
            $state.go('enterprise-solution-cybersecurity-services', {}, opts);
        }]).when('/enterprise-security/embedded-security-internet-of-things', ["$state", function ($state) {
            $state.go('enterprise-solution-iot', {}, opts);
        }]).when('/enterprise-security/transportation-cybersecurity-internet-of-things', ["$state", function ($state) {
            $state.go('enterprise-solution-iot-transportation-security', {}, opts);
        }]).when('/enterprise-security/industrial-solution', ["$state", function ($state) {
            $state.go('enterprise-solution-industrial', {}, opts);
        }]).when('/enterprise-security/transportation-security', ["$state", function ($state) {
            $state.go('enterprise-solution-transportation-security', {}, opts);
        }])
        // ENT Industries
        .when('/enterprise-security/government', ["$state", function ($state) {
            $state.go('enterprise-industry-government', {}, opts);
        }]).when('/enterprise-security/finance', ["$state", function ($state) {
            $state.go('enterprise-industry-finance', {}, opts);
        }]).when('/enterprise-security/healthcare', ["$state", function ($state) {
            $state.go('enterprise-industry-healthcare', {}, opts);
        }]).when('/enterprise-security/telecom', ["$state", function ($state) {
            $state.go('enterprise-industry-telecom', {}, opts);
        }]).when('/enterprise-security/industrial', ["$state", function ($state) {
            $state.go('enterprise-industry-industrial', {}, opts);
        }]).when('/enterprise-security/transportation', ["$state", function ($state) {
            $state.go('enterprise-industry-transportation', {}, opts);
        }]).when('/enterprise-security/retail', ["$state", function ($state) {
            $state.go('enterprise-industry-retail', {}, opts);
        }]).when('/enterprise-security/national-cybersecurity', ["$state", function ($state) {
            $state.go('enterprise-industry-national-cybersecurity', {}, opts);
        }]).when('/enterprise-security/transportation-cybersecurity-it-infrastructure', ["$state", function ($state) {
            $state.go('enterprise-industry-transportation-cybersecurity', {}, opts);
        }]).when('/enterprise-security/retail-cybersecurity', ["$state", function ($state) {
            $state.go('enterprise-industry-retail-cybersecurity', {}, opts);
        }])
        // ENT Services
        .when('/enterprise-security/ddos-protection', ["$state", function ($state) {
            $state.go('enterprise-service-ddos-protection', {}, opts);
        }]).when('/enterprise-security/maintenance-service-agreement', ["$state", function ($state) {
            $state.go('enterprise-service-maintenance-service-agreement', {}, opts);
        }]).when('/enterprise-security/apt-intelligence-reporting', ["$state", function ($state) {
            $state.go('enterprise-service-apt-intelligence-reporting', {}, opts);
        }]).when('/enterprise-security/security-awareness', ["$state", function ($state) {
            $state.go('enterprise-service-security-awareness', {}, opts);
        }]).when('/enterprise-security/security-training', ["$state", function ($state) {
            $state.go('enterprise-service-security-training', {}, opts);
        }]).when('/enterprise-security/threat-hunting', ["$state", function ($state) {
            $state.go('enterprise-service-threat-hunting', {}, opts);
        }]).when('/enterprise-security/premium-support', ["$state", function ($state) {
            $state.go('enterprise-service-premium-support', {}, opts);
        }]).when('/enterprise-security/professional-services', ["$state", function ($state) {
            $state.go('enterprise-service-professional-services', {}, opts);
        }]).when('/enterprise-security/incident-response', ["$state", function ($state) {
            $state.go('enterprise-service-incident-response', {}, opts);
        }]).when('/enterprise-security/threat-intelligence', ["$state", function ($state) {
            $state.go('enterprise-service-threat-intelligence', {}, opts);
        }]).when('/enterprise-security/security-assessment', ["$state", function ($state) {
            $state.go('enterprise-service-security-assessment', {}, opts);
        }]).when('/enterprise-security/cybersecurity-services', ["$state", function ($state) {
            $state.go('enterprise-service-cybersecurity-services', {}, opts);
        }])
        // ENT General
        .when('/gdpr', ["$state", function ($state) {
            $state.go('enterprise-gdpr', {}, opts);
        }]).when('/gdpr/white-paper', ["$state", function ($state) {
            $state.go('enterprise-gdpr-white-paper', {}, opts);
        }]).when('/enterprise-security/edr-piloting', ["$state", function ($state) {
            $state.go('enterprise-edr-piloting', {}, opts);
        }]).when('/enterprise-security/edr-download', ["$state", function ($state) {
            $state.go('enterprise-edr-download', {}, opts);
        }]).when('/enterprise-security/edr-piloting-thank-you', ["$state", function ($state) {
            $state.go('enterprise-edr-piloting-thank-you', {}, opts);
        }]).when('/enterprise-security/wiki-section-home', ["$state", function ($state) {
            $state.go('enterprise-wiki-section-home', {}, opts);
        }]).when('/enterprise-security/threat-management-defense-solution/demo', ["$state", function ($state) {
            $state.go('enterprise-threat-mgmt-defence-solution-demo', {}, opts);
        }]).when('/enterprise-security/threat-management-defense-solution/demo/thank-you', ["$state", function ($state) {
            $state.go('enterprise-threat-mgmt-defence-solution-demo-thank-you', {}, opts);
        }]);
    }]);

    function routeComponentsController(ENV, $state) {
        var stateUrl = $state.current.url.replace(/enterprise-security/, 'enterprise-security-3.0');
        this.entPath = '/content/' + ENV.locale + '/enterprise-security-3.0/';
        this.path = '/content/' + ENV.locale + stateUrl + '/';
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider.state('404', {
            'parent': 'error',
            'url': '/errorpage/404',
            'data': {
                'title': '404'
            },
            'templateUrl': '/resources/template/html/pages/site-error/404.html'
        }).state('500', {
            'parent': 'error',
            'url': '/errorpage/500',
            'data': {
                'title': '500'
            },
            'templateUrl': '/resources/template/html/pages/site-error/500.html'
        });
        $urlRouterProvider.when('/404', ["$state", function ($state) {
            $state.go('404', {}, { 'location': false, 'inherit': true });
        }]).when('/500', ["$state", function ($state) {
            $state.go('500', {}, { 'location': false, 'inherit': true });
        }]);
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        var opts = { 'location': false, 'inherit': true };
        $stateProvider.state('privacy', {
            'parent': 'about-section',
            'url': '/site-general/privacy',
            'data': {
                'title': 'Privacy'
            },
            'templateUrl': '/resources/template/html/pages/site-general/privacy.html'
        }).state('terms', {
            'parent': 'about-section',
            'url': '/site-general/terms',
            'data': {
                'title': 'Terms'
            },
            'templateUrl': '/resources/template/html/pages/site-general/terms.html'
        }).state('legal', {
            'parent': 'about-section',
            'url': '/site-general/legal',
            'data': {
                'title': 'Legal'
            },
            'templateUrl': '/resources/template/html/pages/site-general/legal.html'
        }).state('legal-license', {
            'parent': 'about-section',
            'url': '/site-general/legal/license',
            'templateUrl': '/resources/template/html/pages/smb/license.html',
            'data': {
                'navIndex': 2,
                'title': 'License'
            }
        }).state('third-party-tracking', {
            'parent': 'about-section',
            'url': '/site-general/third-party-tracking',
            'data': {
                'title': 'Third Party Tracking'
            },
            'templateUrl': '/resources/template/html/pages/site-general/third-party-tracking.html'
        }).state('end-user-license-agreement', {
            'parent': 'about-section',
            'url': '/site-general/end-user-license-agreement',
            'data': {
                'title': 'End User License Agreement'
            },
            'templateUrl': '/resources/template/html/pages/site-general/end-user-license-agreement.html'
        }).state('unsubscribe_success', {
            'parent': 'about-section',
            'url': '/site-general/unsubscribe_success',
            'data': {
                'title': 'Unsubscribe Success'
            },
            'templateUrl': '/resources/template/html/pages/site-general/unsubscribe.html'
        }).state('unsubscribe_error', {
            'parent': 'about-section',
            'url': '/site-general/unsubscribe_error',
            'data': {
                'title': 'Unsubscribe Error'
            },
            'templateUrl': '/resources/template/html/pages/site-general/unsubscribe.html'
        }).state('submit-review', {
            'parent': 'master',
            'url': '/products/bazaarvoice/submit-review',
            'data': {
                'title': 'Submit review',
                'css': ['/resources/template/css/b2c.min.css']
            },
            'templateUrl': '/resources/template/html/pages/site-general/submit-review.html'
        }).state('sitemap-html', {
            'parent': 'master-header',
            'url': '/site-general/sitemap-html',
            'data': {
                'title': 'Sitemap'
            },
            'templateUrl': '/resources/template/html/pages/site-general/sitemap.html'
        });
        $urlRouterProvider.when('/privacy', ["$state", function ($state) {
            $state.go('privacy', {}, opts);
        }]).when('/terms-of-use', ["$state", function ($state) {
            $state.go('terms', {}, opts);
        }]).when('/legal/license', ["$state", function ($state) {
            $state.go('legal-license', {}, opts);
        }]).when('/legal', ["$state", function ($state) {
            $state.go('legal', {}, opts);
        }]).when('/third-party-tracking', ["$state", function ($state) {
            $state.go('third-party-tracking', {}, opts);
        }]).when('/end-user-license-agreement', ["$state", function ($state) {
            $state.go('end-user-license-agreement', {}, opts);
        }]).when('/unsubscribe_success', ["$state", function ($state) {
            $state.go('unsubscribe_success', {}, opts);
        }]).when('/unsubscribe_error', ["$state", function ($state) {
            $state.go('unsubscribe_error', {}, opts);
        }]).when('/sitemap', ["$state", function ($state) {
            $state.go('sitemap-html', {}, opts);
        }]);
    }]);
})();
'use strict';

angular.module('kappGlobal').config(["$stateProvider", function ($stateProvider) {
    /** Callback to be called on scroll for handling the sticky header */
    function handleStickyHeaderOnScroll($window) {
        var scroll = $($window).scrollTop(),
            totalHeight = $('site-header').attr('site-top-height');

        if (scroll >= totalHeight) {
            $('body').addClass('sticky-header-on');
        } else {
            $('body').removeClass('sticky-header-on');
        }
    }

    $stateProvider.state('homepage', {
        //parent: "master",
        'data': {
            'navIndex': 0,
            'title': 'Homepage'
        },
        'url': '/',
        'controller': ["$window", "$scope", function controller($window, $scope) {
            $($window).on('scroll.homepage', _.wrap($window, handleStickyHeaderOnScroll));
            $scope.$on('$destroy', function () {
                $($window).off('scroll.homepage');
            });
        }],
        'templateUrl': '/resources/template/html/pages/homepage/index.html'
    });
}]);
'use strict';

angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    var opts = { 'location': false, 'inherit': true };
    $stateProvider.state('lrc-b2c', {
        'parent': 'home-security-section',
        'data': {
            'navIndex': 1
        },
        'params': {
            'lostDaysDisclaimerFullText': null,
            'kfaDisclaimer': null,
            'canonical': '/renewal-center/home'
        },
        'url': '/lrc/b2c-hp',
        'templateUrl': '/resources/template/html/pages/lrc/home-b2c.html',
        'controller': ["$rootScope", "$stateParams", "sessionStorageService", "directiveData", "$window", "windowHelperService", "$location", function controller($rootScope, $stateParams, sessionStorageService, directiveData, $window, windowHelperService, $location) {
            var _this = this;

            directiveData.getLocal('general-translations').then(function (response) {
                _this.translations = response.data.fields;
            });
            // set canonical url
            if ($location.path() === '/lrc/ksos') {
                $stateParams.canonical = '/renewal-center/vsb';
            }
            $rootScope.canonical = windowHelperService.getCanonicalUrl();
            this.lostDaysDisclaimerFullText = $stateParams.lostDaysDisclaimerFullText; // this parameter is used when we come from lrc-serial state
            this.kfaDisclaimer = $stateParams.kfaDisclaimer;
            if (this.lostDaysDisclaimerFullText) {
                this.lostDaysDisclaimerFullText = this.lostDaysDisclaimerFullText.replace(/xx/, sessionStorageService.get('lrc-daysLeft'));
            }
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-b2b', {
        'parent': 'vsb',
        'data': {
            'navIndex': 1
        },
        'url': '/lrc/b2b-hp',
        'templateUrl': '/resources/template/html/pages/lrc/home-b2b.html',
        'controller': ["directiveData", "$stateParams", "sessionStorageService", function controller(directiveData, $stateParams, sessionStorageService) {
            var _this2 = this;

            directiveData.getLocal('general-translations').then(function (response) {
                _this2.translations = response.data.fields;
            });
            this.lostDaysDisclaimerFullText = $stateParams.lostDaysDisclaimerFullText; // this parameter is used when we come from lrc-serial state
            this.kfaDisclaimer = $stateParams.kfaDisclaimer;
            if (this.lostDaysDisclaimerFullText) {
                this.lostDaysDisclaimerFullText = this.lostDaysDisclaimerFullText.replace(/xx/, sessionStorageService.get('lrc-daysLeft'));
            }
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-verdict', {
        'parent': 'lrc-verdict-parent',
        'url': '/lrc/:verdict',
        'data': {
            'navIndex': 1,
            'spage': 'lrc-verdict'
        },
        'params': {
            'verdictData': null,
            'loc': null
        },
        //loc variable sending requests to en-ca depending on query parameter
        'template': '<lrc-verdict-page verdict="{{$ctrl.verdict}}" verdict-data="$ctrl.verdictData" loc="$ctrl.loc"></lrc-verdict-page>',
        'controller': ["$stateParams", "$rootScope", "$state", function controller($stateParams, $rootScope, $state) {
            if (!$stateParams.verdictData) $state.go('lrc-b2c', {}, opts);
            this.verdict = $stateParams.verdict;
            this.verdictData = $stateParams.verdictData;
            //loc variable sending requests to en-ca depending on query parameter
            this.loc = $stateParams.loc;
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-serial', {
        'parent': 'lrc-verdict-parent',
        'url': '/lrc?serial&Serial&SERIAL&edu&kpc-license-ownership&uni&kscup&target-tier&act-serial&lic-id&act-pid&act-pv&act-local&act-lic-type&act-lic-status&act-lic-lifespan&act-lic-daystillexpiration&act-lic-dse&act-lic-dayssinceinstall&ppcs-id&act-item&ipcountry&country',
        'data': {
            'navIndex': 1
        },
        'params': {
            'serialData': null
        },
        'controller': ["$stateParams", "lrcService", "sessionStorageService", "$state", "$location", "directiveData", "ENV", function controller($stateParams, lrcService, sessionStorageService, $state, $location, directiveData, ENV) {
            var _this3 = this;

            directiveData.getLocal('general-translations').then(function (response) {
                _this3.translations = response.data.fields;
            });

            var serial = $stateParams.serial || $stateParams.SERIAL || $stateParams.Serial;
            if (ENV.locale === 'en-us' && !serial) serial = $stateParams['act-serial'] || $stateParams['lic-id'];
            if ($state.params.serialData !== null) {
                serial = $state.params.serialData.serial || $state.params.serialData.Serial || $state.params.serialData.SERIAL;
                $stateParams['kpc-license-ownership'] = $state.params.serialData['kpc-license-ownership'];
                $stateParams.edu = $state.params.serialData.edu;
                $stateParams.uni = $state.params.serialData.uni;
            }

            var queryArr = [];
            var USParams = ['kpc-license-ownership', 'edu', 'uni', 'kscup', 'target-tier', 'act-pid', 'act-pv', 'act-local', 'act-lic-type', 'act-lic-status', 'act-lic-lifespan', 'act-lic-daystillexpiration', 'act-lic-dse', 'act-lic-dayssinceinstall', 'ppcs-id', 'act-item', 'ipcountry', 'country'];

            var genericParams = ['kpc-license-ownership', 'edu', 'uni', 'kscup', 'target-tier'];
            this.params = ENV.locale === 'en-us' ? USParams : genericParams;
            _.forEach(this.params, function (param) {
                if (angular.isDefined($stateParams[param])) queryArr.push({
                    'Key': param,
                    'Value': $stateParams[param]
                });
            });

            function replaceAll(lostDaysString, find, replace) {
                return lostDaysString.replace(find, replace);
            }
            //loc variable sending requests to en-ca depending on query parameter
            if ($stateParams['country'] === 'ca') $stateParams.loc = 'en-ca';
            lrcService.searchLicense(serial, queryArr).then(function (response) {
                _this3.license = response;
                _this3.license.data.verdictSerial = serial;
                _this3.license.data.kpc = $stateParams['kpc-license-ownership'];
                _this3.license.data.edu = $stateParams.edu;

                sessionStorageService.set('lrc-daysLeft', _this3.license.data.days_left);

                if (_this3.license.data.verdict.match(/LOSTDAYS_FALLBACK/)) {
                    _this3.lostDaysDisclaimer = {
                        'partner': _this3.license.data.verdict.match(/LOSTDAYS_FALLBACK_(.*)/)[1],
                        'link': _this3.license.data.provider_url
                    };
                    _this3.lostDaysDisclaimerFullText = replaceAll(_this3.translations[_this3.lostDaysDisclaimer.partner], /href="#"/, 'href="' + _this3.lostDaysDisclaimer.link + '"');
                    $state.go('lrc-b2c', { 'lostDaysDisclaimerFullText': _this3.lostDaysDisclaimerFullText }, opts);
                } else if (_this3.license.data.verdict.match(/KSC_FAM_UNKNOWN/)) {
                    _this3.lostDaysDisclaimerFullText = _this3.translations[_this3.license.data.verdict];
                    $state.go('lrc-b2c', { 'lostDaysDisclaimerFullText': _this3.lostDaysDisclaimerFullText }, opts);
                } else {
                    $state.go('lrc-verdict', {
                        'verdict': _this3.license.data.verdict && ENV.locale !== 'en-us' ? _this3.license.data.verdict.toLowerCase() : _this3.license.data.verdict,
                        'verdictData': _this3.license.data,
                        //loc variable sending requests to en-ca depending on query parameter
                        'loc': $stateParams.loc
                    }, opts);
                }
            }, function () {
                if ($location.path() === '/renewal-center/vsb') {
                    $state.go('lrc-b2b', {}, opts);
                } else {
                    $state.go('lrc-b2c', {}, opts);
                }
            });
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-b2c-att', {
        'parent': 'home-security-section',
        'data': {
            'navIndex': 1
        },
        'url': '/lrc/b2c-hp-att',
        'templateUrl': '/resources/template/html/pages/lrc/home-b2c.html',
        'controller': ["$location", "$state", "lrcService", function controller($location, $state, lrcService) {
            var _this4 = this;

            this.sendSerial = function () {
                lrcService.searchLicense(_this4.serial, {}).then(function (response) {
                    _this4.license = response;
                    _this4.license.data.verdictSerial = _this4.serial;
                    $state.go('lrc-verdict', {
                        'verdict': _this4.license.data.verdict && _this4.license.data.verdict.toLowerCase(),
                        'verdictData': _this4.license.data
                    }, opts);
                }, function () {
                    $state.go('lrc-b2c', {}, opts);
                });
            };
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-b2b-att', {
        'parent': 'vsb',
        'data': {
            'navIndex': 1
        },
        'url': '/lrc/b2b-hp-att',
        'templateUrl': '/resources/template/html/pages/lrc/home-b2b.html',
        'controller': ["$location", "$state", "lrcService", function controller($location, $state, lrcService) {
            var _this5 = this;

            this.sendSerial = function () {
                lrcService.searchLicense(_this5.serial, {}).then(function (response) {
                    _this5.license = response;
                    _this5.license.data.verdictSerial = _this5.serial;
                    $state.go('lrc-verdict', {
                        'verdict': _this5.license.data.verdict && _this5.license.data.verdict.toLowerCase(),
                        'verdictData': _this5.license.data
                    }, opts);
                }, function () {
                    $state.go('lrc-b2b', {}, opts);
                });
            };
        }],
        'controllerAs': '$ctrl'
    }).state('lrc-fallback', {
        'parent': 'home-security-section',
        'data': {
            'navIndex': 1
        },
        'url': '/lrc/b2c-hp',
        'templateUrl': '/resources/template/html/pages/lrc/home-b2c.html'
    });
    $urlRouterProvider
    // LRC HPs
    .when('/renewal-center/home?serial&Serial&SERIAL&kpc-license-ownership&edu&uni&kscup&target-tier&act-serial&lic-id&act-pid&act-pv&act-local&act-lic-type&act-lic-status&act-lic-lifespan&act-lic-daystillexpiration&act-lic-dse&act-lic-dayssinceinstall&ppcs-id&act-item&ipcountry&country', ["$state", "$match", function ($state, $match) {
        $state.go('lrc-serial', { 'serialData': $match }, opts);
    }]).when('/renewal-center/vsb?serial&Serial&SERIAL&kpc-license-ownership&edu&uni&kscup&target-tier&act-serial&lic-id&act-pid&act-pv&act-local&act-lic-type&act-lic-status&act-lic-lifespan&act-lic-daystillexpiration&act-lic-dse&act-lic-dayssinceinstall&ppcs-id&act-item&ipcountry&country', ["$state", "$match", function ($state, $match) {
        $state.go('lrc-serial', { 'serialData': $match }, opts);
    }]).when('/renewal-center/smb?serial&Serial&SERIAL', ["$state", "$match", function ($state, $match) {
        $state.go('lrc-serial', { 'serialData': $match }, opts);
    }]).when('/trial-center/home', ["$state", function ($state) {
        $state.go('lrc-b2c-att', {}, opts);
    }]).when('/trial-center/vsb', ["$state", function ($state) {
        $state.go('lrc-b2b-att', {}, opts);
    }]).when('/trial-center/smb', ["$state", function ($state) {
        $state.go('lrc-b2b-att', {}, opts);
    }]).when('/renewal-center/fb', ["$state", function ($state) {
        $state.go('lrc-fallback', {}, opts);
    }]);
}]);
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        var opts = { 'location': false, 'inherit': true };

        $stateProvider.state('partners-home', {
            'parent': 'partners',
            'url': '/partners',
            'data': {
                'title': 'B2C Partners',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/partners/home.html'
        }).state('partners-affiliate-partner-rules', {
            'parent': 'partners',
            'url': '/partners/affiliate/affiliate-partner-rules',
            'data': {
                'navIndex': 2,
                'title': 'Affiliate Partner Rules'
            },
            'templateUrl': '/resources/template/html/pages/partners/affiliate-partnership.html'
        }).state('partners-affiliate-partnership', {
            'parent': 'partners',
            'url': '/partners/affiliate',
            'data': {
                'navIndex': 2,
                'title': 'Partners Affiliate Partnership'
            },
            'templateUrl': '/resources/template/html/pages/partners/affiliate-partnership.html'
        }).state('partners-technology-partnership', {
            'parent': 'partners',
            'url': '/partners/technology',
            'data': {
                'navIndex': 3,
                'title': 'Partners Technology Partnership'
            },
            'templateUrl': '/resources/template/html/pages/partners/technology-partnership.html'
        }).state('partners-technology-contact', {
            'parent': 'partners',
            'url': '/partners/technology/contact',
            'data': {
                'navIndex': 3,
                'title': 'Partners Technology Contact'
            },
            'templateUrl': '/resources/template/html/pages/partners/technology-contact.html'
        }).state('partners-technology-solutions', {
            'parent': 'partners',
            'url': '/partners/technology/solutions',
            'data': {
                'navIndex': 3,
                'title': 'Partners Technology Solutions'
            },
            'templateUrl': '/resources/template/html/pages/partners/technology-solutions.html'
        }).state('partners-technology-solution', {
            'parent': 'partners',
            'url': '/partners/technology/solutions/:jsonName',
            'data': {
                'navIndex': 3,
                'title': 'Partners Technology Solutions'
            },
            'templateUrl': '/resources/template/html/pages/partners/technology-solution.html'
        }).state('partners-technology-benefits', {
            'parent': 'partners',
            'url': '/partners/technology/benefits',
            'data': {
                'navIndex': 3,
                'title': 'Partners Technology Benefits'
            },
            'templateUrl': '/resources/template/html/pages/partners/technology-benefits.html'
        }).state('partners-whitelist-program', {
            'parent': 'partners',
            'url': '/partners/whitelist-program',
            'data': {
                'navIndex': 4,
                'title': 'Partners White List Program'
            },
            'templateUrl': '/resources/template/html/pages/partners/white-list-program.html'
        }).state('managed-service-provider', {
            'parent': 'partners',
            'url': '/partners/managed-service-provider',
            'data': {
                'title': 'Managed Service Provider',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/partners/managed-service-provider.html'
        }).state('partners-contact-thank-you', {
            'parent': 'partners',
            'url': '/partners/technology/contact/thank-you',
            'data': {
                'title': 'Partners Contact Thank You',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/partners/contact-thank-you.html'
        }).state('partners-distribution', {
            'parent': 'partners',
            'url': '/partners/distribution',
            'data': {
                'title': 'Partners Distribution',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/partners/distribution.html'
        }).state('partners-special-offers', {
            'parent': 'partners',
            'url': '/partners/special-offers',
            'templateUrl': '/resources/template/html/pages/home-security/special-offers.html',
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 5
            }
        }).state('partners-special-offer', {
            'parent': 'partners',
            'url': '/partners/special-offers/:offerName',
            'templateUrl': '/resources/template/html/pages/home-security/special-offer-page.html',
            'controller': ["$stateParams", "directiveData", function controller($stateParams, directiveData) {
                var _this = this;

                this.offerName = $stateParams.offerName;
                directiveData.getByUrl(this.offerName).then(function (response) {
                    _this.offerData = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 5
            }
        }).state('partners-training-centers', {
            'parent': 'partners',
            'url': '/partners/training-centers',
            'templateUrl': '/resources/template/html/pages/smb/training-centers.html',
            'data': {
                'navIndex': 2,
                'title': 'Training Centers'
            }
        });

        $urlRouterProvider.when('/partners/contact/thank-you', ["$state", function ($state) {
            $state.go('partners-contact-thank-you', {}, opts);
        }]).when('/antivirus-sdk', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'antivirus-sdk' }, opts);
        }]).when('/safestream2', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'safestream' }, opts);
        }]).when('/antispam-software-development', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'antispam-software-development' }, opts);
        }]).when('/whitelisting', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'whitelisting' }, opts);
        }]).when('/file-reputation', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'file-reputation' }, opts);
        }]).when('/mobile-security-sdk', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'mobile-security-sdk' }, opts);
        }]).when('/web-filter', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'web-filter' }, opts);
        }]).when('/phishing-url-data-feed', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'phishing-url-data-feed' }, opts);
        }]).when('/antivirus-for-uefi', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'antivirus-for-uefi' }, opts);
        }]).when('/botnet-monitoring-and-data-feeds', ["$state", function ($state) {
            $state.go('partners-technology-solution', { 'jsonName': 'botnet-monitoring-and-data-feeds' }, opts);
        }]);
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('rss-feeds', {
            'parent': 'about-section',
            'url': '/rss-feeds',
            'templateUrl': '/resources/template/html/pages/rss/rss-feeds.html'
        }).state('rss-feeds.details', {
            'parent': 'about-section',
            'url': '/rss-feeds/:path',
            'templateUrl': '/resources/template/html/pages/rss/rss-feeds-details.html'
        });
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        var opts = { 'location': false, 'inherit': true };

        $stateProvider.state('smb-home', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security',
            'data': {
                'title': 'SMB Home',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/home.html'
        }).state('smb-services', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/services',
            'data': {
                'navIndex': 1,
                'title': 'SMB Services'
            },
            'templateUrl': '/resources/template/html/pages/smb/services.html',
            'controller': ["ENV", function controller(ENV) {
                this.locale = ENV.locale;
            }],
            'controllerAs': '$ctrl'
        }).state('smb-eula', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/eula',
            'data': {
                'title': 'SMB EULA',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/eula.html',
            'controllerAs': '$ctrl'
        }).state('smb-services-msa', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/services/msa',
            'data': {
                'navIndex': 1,
                'title': 'SMB Services'
            },
            'templateUrl': '/resources/template/html/pages/smb/services-msa.html'
        }).state('smb-services-computer-incident-investigation', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/services/computer-incident-investigation',
            'data': {
                'navIndex': 1,
                'title': 'SMB Services'
            },
            'templateUrl': '/resources/template/html/pages/smb/services-computer-incident-investigation.html'
        }).state('smb-contact-investigation', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/services/contact',
            'data': {
                'navIndex': 1,
                'title': 'SMB Contact Us'
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('smb-targeted-security-solutions', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/targeted-solutions',
            'data': {
                'title': 'SMB Targeted Security Solutions',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/targeted-security-solutions.html'
        }).state('smb-targeted-security-solution', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/targeted-solutions/:jsonName',
            'data': {
                'title': 'SMB Targeted Security Solution',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", "$stateParams", function templateProvider(templateVersion, $templateFactory, $stateParams) {
                return templateVersion.getVer('small-to-medium-business-security/targeted-solutions/' + $stateParams.jsonName, 'page-header').then(function (response) {
                    if (!response.data.fields || response.data.fields.headerType !== 'SMB Targeted Solution Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/targeted-security-solution.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/targeted-security-solution-buyblock.html');
                });
            }]
        }).state('smb-applications', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/applications',
            'data': {
                'title': 'SMB Security Applications',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/applications.html'
        }).state('smb-application', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/applications/:jsonName',
            'data': {
                'title': 'SMB Security Application Product',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/application.html'
        }).state('smb-downloads', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads',
            'data': {
                'navIndex': 2,
                'title': 'SMB Downloads'
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/downloads', 'page-header').then(function (response) {
                    if (response.data.fields.headerType !== 'SMB Downloads') return $templateFactory.fromUrl('/resources/template/html/pages/smb/downloads.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/downloads-2.html');
                });
            }]
        }).state('smb-downloads-trial', {
            'parent': 'smb',
            'url': '/smb-downloads-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Downloads Trial'
            },
            'templateUrl': '/resources/template/html/pages/smb/downloads-trial-form.html'
        }).state('smb-support', {
            'parent': 'smb',
            'url': '/smb-support',
            'data': {
                'navIndex': 3,
                'title': 'SMB Support'
            },
            'templateUrl': '/resources/template/html/pages/smb/support.html'
        }).state('smb-trial-download-success', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/thank-you',
            'data': {
                'navIndex': 2,
                'title': 'SMB Trial Download Success'
            },
            'templateUrl': '/resources/template/html/pages/smb/trial-download-success.html'
        }).state('smb-contact-us', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/contact-us',
            'data': {
                'navIndex': 3,
                'title': 'SMB Contact Us'
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('smb-contact-us-thank-you', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/contact-us/thank-you',
            'data': {
                'navIndex': 3,
                'title': 'SMB Contact Us Thank You'
            },
            'templateUrl': '/resources/template/html/pages/smb/trial-download-success.html'
        }).state('smb-how-to-buy', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/how-to-buy',
            'data': {
                'navIndex': 3,
                'title': 'SMB How To Buy'
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('smb-ddos-contact-us', { // only for US
            'parent': 'smb',
            'url': '/small-to-medium-business-security/targeted-solutions/ddos-protection/contact-us',
            'data': {
                'navIndex': 3,
                'title': 'SMB DDoS Contact Us'
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('smb-product-select', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/endpoint-select',
            'data': {
                'title': 'SMB Product Select',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/endpoint-select', 'page-header').then(function (response) {
                    if (response.data.fields.headerType === 'SMB Product Buyblock Redesign') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-redesign.html');
                    if (response.data.fields.headerType !== 'SMB Product Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-buyblock.html');
                });
            }]
        }).state('smb-product-advanced', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/endpoint-advanced',
            'data': {
                'title': 'SMB Product Advanced',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/endpoint-advanced', 'page-header').then(function (response) {
                    if (response.data.fields.headerType === 'SMB Product Buyblock Redesign') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-redesign.html');
                    if (response.data.fields.headerType !== 'SMB Product Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-buyblock.html');
                });
            }]
        }).state('smb-product-total', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/total',
            'data': {
                'title': 'SMB Product Total',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/total', 'page-header').then(function (response) {
                    if (response.data.fields.headerType === 'SMB Product Buyblock Redesign') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-redesign.html');
                    if (response.data.fields.headerType !== 'SMB Product Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-buyblock.html');
                });
            }]
        }).state('smb-product-virtualization-hybrid-cloud', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/virtualization-hybrid-cloud',
            'data': {
                'title': 'SMB Product Virtualization Hybrid Cloud',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/virtualization-hybrid-cloud', 'page-header').then(function (response) {
                    if (response.data.fields.headerType === 'SMB Product Buyblock Redesign') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-redesign.html');
                    if (response.data.fields.headerType !== 'SMB Product Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-buyblock.html');
                });
            }]
        }).state('smb-product-kasap', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/security-awareness-platform',
            'data': {
                'title': 'SMB Product Security Awareness',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/product.html'
        }).state('smb-product-kasap-contact', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/security-awareness-platform/contact',
            'data': {
                'title': 'SMB Product Security Awareness',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('smb-product-kasap-thank-you', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/security-awareness-platform/contact/thank-you',
            'data': {
                'title': 'SMB Product Security Awareness',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/trial-download-success.html'
        }).state('smb-product-cloud', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/cloud',
            'data': {
                'title': 'SMB Product Cloud',
                'navIndex': 0
            },
            'templateProvider': ["templateVersion", "$templateFactory", function templateProvider(templateVersion, $templateFactory) {
                return templateVersion.getVer('small-to-medium-business-security/cloud', 'page-header').then(function (response) {
                    if (response.data.fields.headerType !== 'SMB Product Buyblock') return $templateFactory.fromUrl('/resources/template/html/pages/smb/product.html');
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/product-buyblock.html');
                });
            }]
        }).state('smb-product-core', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/endpoint-core',
            'data': {
                'title': 'SMB Product Core',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/product.html'
        }).state('smb-product-365', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/office-365',
            'data': {
                'title': 'SMB Product Office 365',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/product-buyblock-365.html'
        }).state('smb-product-hybrid-cloud', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/virtualization-hybrid-cloud',
            'data': {
                'title': 'SMB Product Virtualization Hybrid Cloud',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/smb/product-buyblock-365.html'
        }).state('smb-free-trials-core', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-core-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Endpoint Core'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-select', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-select-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Endpoint Select'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-advanced', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-advanced-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Endpoint Advanced'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-total', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/total-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Endpoint Total'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-mail-server', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/mail-server-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Mail Server'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-file-server', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/file-server-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial File Server'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-mobile', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/mobile-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Mobile'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-internet-gateway', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/internet-gateway-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Internet Gateway'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-virtualization', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/virtualization-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Virtualization'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-virtualization-hybrid-cloud', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/virtualization-hybrid-cloud-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Virtualization Hybrid Cloud'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-hybrid-cloud-security', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/hybrid-cloud-security-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Hybrid Cloud Security'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-collaboration', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/collaboration-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Collaboration'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-systems-management', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/systems-management-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Systems Management'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-free-trials-storage', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/storage-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'SMB Free Trial Storage'
            },
            'templateUrl': '/resources/template/html/pages/smb/download-trial-form.html'
        }).state('smb-product-updates-core', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-core',
            'data': {
                'navIndex': 2,
                'title': 'SMB Product Updates Endpoint Core'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates-pack.html'
        }).state('smb-product-updates-select', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-select',
            'data': {
                'navIndex': 2,
                'title': 'SMB Product Updates Endpoint Select'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates-pack.html'
        }).state('smb-product-updates-advanced', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/endpoint-advanced',
            'data': {
                'navIndex': 2,
                'title': 'SMB Product Updates Endpoint Advanced'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates-pack.html'
        }).state('smb-product-updates-total', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/total',
            'data': {
                'navIndex': 2,
                'title': 'SMB Product Updates Endpoint Total'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates-pack.html'
        }).state('smb-windows-server-security', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/security-for-windows-server',
            'data': {
                'navIndex': 2,
                'title': 'SMB Windows Server Security'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates.html'
        }).state('smb-product-updates', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/downloads/:jsonName',
            'data': {
                'navIndex': 2,
                'title': 'SMB Product Updates'
            },
            'templateUrl': '/resources/template/html/pages/smb/product-updates.html',
            'controller': ["productData", "$stateParams", function controller(productData, $stateParams) {
                var _this = this;

                productData.getsmb($stateParams.jsonName).then(function (response) {
                    _this.product = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl'
        }).state('smb-resources-center', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/resources',
            'templateUrl': '/resources/template/html/pages/content-repo/b2b/resources-center-smb.html',
            'data': {
                'navIndex': 4,
                'title': 'Resources'
            }
        }).state('smb-resources-category', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/resources/:category?rel&sel',
            'data': {
                'navIndex': 4,
                'title': 'Resources category'
            },
            'reloadOnSearch': false,
            'templateProvider': ["ENV", "$templateFactory", "$stateParams", function templateProvider(ENV, $templateFactory, $stateParams) {
                var unwantedCategories = ['industry-awards-and-recognition', 'certificates'];
                if (ENV.locale === 'ru-ru' && unwantedCategories.indexOf($stateParams.category) > -1) {
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/' + $stateParams.category + '.html');
                } else {
                    return $templateFactory.fromUrl('/resources/template/html/pages/content-repo/b2b/resources-category-smb.html');
                }
            }]
        }).state('smb-resources-category.details', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/resources/:category/:path',
            'templateUrl': '/resources/template/html/pages/content-repo/b2b/resources-post-smb.html',
            'data': {
                'navIndex': 4,
                'title': 'Resources category'
            }
        }).state('smb-payment-and-shipping', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/payment-and-shipping',
            'templateUrl': '/resources/template/html/pages/smb/payment-options.html',
            'data': {
                'navIndex': 2,
                'title': 'Payment and Shipping'
            }
        }).state('smb-order-online', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/order-online',
            'templateUrl': '/resources/template/html/pages/smb/payment-options.html',
            'data': {
                'navIndex': 2,
                'title': 'Order Online'
            }
        })
        // State below is currently Russia specific
        .state('smb-registry', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/registry',
            'data': {
                'title': 'SMB registry',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/site-general/end-user-license-agreement.html'
        })
        // State below is currently Russia specific
        .state('smb-certified-version', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/certified-version',
            'data': {
                'title': 'Certified Version',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/site-general/privacy.html'
        }).state('smb-special-offers', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/special-offers',
            'templateUrl': '/resources/template/html/pages/home-security/special-offers.html',
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 7
            }
        }).state('smb-special-offer', {
            'parent': 'smb',
            'url': '/small-to-medium-business-security/special-offers/:offerName',
            'templateUrl': '/resources/template/html/pages/home-security/special-offer-page.html',
            'controller': ["$stateParams", "directiveData", function controller($stateParams, directiveData) {
                var _this2 = this;

                this.offerName = $stateParams.offerName;
                directiveData.getByUrl(this.offerName).then(function (response) {
                    _this2.offerData = response.data.fields;
                });
            }],
            'controllerAs': '$ctrl',
            'data': {
                'navIndex': 7
            }
        });

        $urlRouterProvider.when('/small-to-medium-business-security/hybrid-cloud-security', ["$state", function ($state) {
            $state.go('smb-product-virtualization-hybrid-cloud');
        }])
        // SMB Targeted Solutions
        .when('/small-to-medium-business-security/mail-server', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'mail-server' }, opts);
        }]).when('/small-to-medium-business-security/file-server', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'file-server' }, opts);
        }]).when('/small-to-medium-business-security/mobile', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'mobile' }, opts);
        }]).when('/small-to-medium-business-security/internet-gateway', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'internet-gateway' }, opts);
        }]).when('/small-to-medium-business-security/virtualization', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'virtualization' }, opts);
        }]).when('/small-to-medium-business-security/collaboration', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'collaboration' }, opts);
        }]).when('/small-to-medium-business-security/systems-management', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'systems-management' }, opts);
        }]).when('/small-to-medium-business-security/storage', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'storage' }, opts);
        }]).when('/small-to-medium-business-security/fraud-prevention', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'fraud-prevention' }, opts);
        }]).when('/small-to-medium-business-security/ddos-protection', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'ddos-protection' }, opts);
        }]).when('/small-to-medium-business-security/anti-spam', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'anti-spam' }, opts);
        }]).when('/small-to-medium-business-security/xsp-security', ["$state", function ($state) {
            $state.go('smb-targeted-security-solution', { 'jsonName': 'xsp-security' }, opts);
        }])
        // SMB Security Applications
        .when('/small-to-medium-business-security/windows-workstation', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'endpoint-windows' }, opts);
        }]).when('/small-to-medium-business-security/endpoint-linux', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'endpoint-linux' }, opts);
        }]).when('/small-to-medium-business-security/endpoint-mac', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'endpoint-mac' }, opts);
        }]).when('/small-to-medium-business-security/security-center', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'security-center' }, opts);
        }]).when('/small-to-medium-business-security/endpoint-windows', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'endpoint-windows' }, opts);
        }]).when('/small-to-medium-business-security/linux-file-server', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'linux-file-server' }, opts);
        }]).when('/small-to-medium-business-security/windows-server-security', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'windows-server-security' }, opts);
        }]).when('/small-to-medium-business-security/mobile-device', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'mobile-device' }, opts);
        }]).when('/small-to-medium-business-security/linux-mail-server', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'linux-mail-server' }, opts);
        }]).when('/small-to-medium-business-security/mail-security-appliance', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'mail-security-appliance' }, opts);
        }]).when('/small-to-medium-business-security/microsoft-exchange-server', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'microsoft-exchange-server' }, opts);
        }]).when('/small-to-medium-business-security/lotus-notes-domino', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'lotus-notes-domino' }, opts);
        }]).when('/small-to-medium-business-security/proxy-server', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'proxy-server' }, opts);
        }]).when('/small-to-medium-business-security/microsoft-isa-server', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'microsoft-isa-server' }, opts);
        }]).when('/small-to-medium-business-security/microsoft-sharepoint', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'microsoft-sharepoint' }, opts);
        }]).when('/small-to-medium-business-security/virtualization-agentless', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'virtualization-agentless' }, opts);
        }]).when('/small-to-medium-business-security/virtualization-light-agent', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'virtualization-light-agent' }, opts);
        }]).when('/small-to-medium-business-security/azure-cloud-security', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'azure-cloud-security' }, opts);
        }]).when('/small-to-medium-business-security/aws-cloud-security', ["$state", function ($state) {
            $state.go('smb-application', { 'jsonName': 'aws-cloud-security' }, opts);
        }]).when('/small-to-medium-business-security/ddos-protection/contact-us', ["$state", function ($state) {
            // only for US
            $state.go('smb-ddos-contact-us', {}, opts);
        }]).when('/small-to-medium-business-security/microsoft-office-365-security', ["$state", function ($state) {
            $state.go('smb-product-365', {}, opts);
        }]).when('/small-to-medium-business-security/contact-investigation', ["$state", function ($state) {
            $state.go('smb-contact-investigation', {}, opts);
        }]).when('/small-to-medium-business-security/security-awareness-platform/how-to-buy', ["$state", function ($state) {
            $state.go('smb-product-kasap-contact', {}, opts);
        }]).when('/small-to-medium-business-security/security-awareness-platform/thank-you', ["$state", function ($state) {
            $state.go('smb-product-kasap-thank-you', {}, opts);
        }]).when('/small-to-medium-business-security/end-user-license-agreement', ["$state", function ($state) {
            $state.go('smb-eula', {}, opts);
        }]);
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('vsb-home', {
            'parent': 'vsb',
            'url': '/small-business-security',
            'data': {
                'title': 'VSB Home',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/vsb/home.html'
        }).state('vsb-product', {
            'parent': 'vsb',
            'url': '/small-business-security/small-office-security',
            'data': {
                'title': 'VSB Product',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/vsb/product.html'
        }).state('vsb-support', {
            'parent': 'vsb',
            'url': '/small-business-security/support',
            'data': {
                'navIndex': 3,
                'title': 'VSB Support'
            },
            'templateUrl': '/resources/template/html/pages/vsb/support.html'
        }).state('vsb-downloads', {
            'parent': 'vsb',
            'url': '/small-business-security/downloads',
            'data': {
                'navIndex': 2,
                'title': 'VSB Downloads'
            },
            'templateUrl': '/resources/template/html/pages/vsb/downloads.html'
        }).state('vsb-download', {
            'parent': 'vsb',
            'url': '/small-business-security/downloads/small-office-security',
            'data': {
                'navIndex': 2,
                'title': 'VSB Download'
            },
            'templateUrl': '/resources/template/html/pages/vsb/download-updates.html'
        }).state('vsb-download-success', {
            'parent': 'vsb',
            'url': '/small-business-security/downloads/thank-you/small-office-security-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'VSB Download Success'
            },
            'templateUrl': '/resources/template/html/pages/vsb/download-trial-success.html'
        }).state('vsb-free-trial', {
            'parent': 'vsb',
            'url': '/small-business-security/downloads/small-office-security-free-trial',
            'data': {
                'navIndex': 2,
                'title': 'VSB Free Trial'
            },
            'templateUrl': '/resources/template/html/pages/vsb/download-trial.html'
        }).state('vsb-contact-us', {
            'parent': 'vsb',
            'url': '/small-business-security/contact-us',
            'data': {
                'navIndex': 3,
                'title': 'VSB Contact Us'
            },
            'templateUrl': '/resources/template/html/pages/smb/contact-us.html'
        }).state('vsb-contact-us-thank-you', {
            'parent': 'vsb',
            'url': '/small-business-security/contact-us/thank-you',
            'data': {
                'navIndex': 3,
                'title': 'VSB Contact Us Thank You'
            },
            'templateUrl': '/resources/template/html/pages/vsb/trial-download-success.html'
        }).state('resources-center', {
            'parent': 'vsb',
            'url': '/small-business-security/resources',
            'templateUrl': '/resources/template/html/pages/content-repo/b2b/resources-center-vsb.html',
            'data': {
                'navIndex': 4,
                'title': 'Resources'
            },
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }]
        }).state('resources-category', {
            'parent': 'vsb',
            'url': '/small-business-security/resources/:category?rel&sel',
            'data': {
                'navIndex': 4,
                'title': 'Resources category'
            },
            'reloadOnSearch': false,
            'controller': ["imageManagerService", function controller(imageManagerService) {
                imageManagerService.activateRandomImagesCache();
            }],
            'templateProvider': ["ENV", "$templateFactory", "$stateParams", function templateProvider(ENV, $templateFactory, $stateParams) {
                var unwantedCategories = ['industry-awards-and-recognition', 'certificates'];
                if (ENV.locale === 'ru-ru' && unwantedCategories.indexOf($stateParams.category) > -1) {
                    return $templateFactory.fromUrl('/resources/template/html/pages/smb/' + $stateParams.category + '.html');
                } else {
                    return $templateFactory.fromUrl('/resources/template/html/pages/content-repo/b2b/resources-category-vsb.html');
                }
            }]
        }).state('resources-category.details', {
            'parent': 'vsb',
            'url': '/small-business-security/resources/:category/:path',
            'templateUrl': '/resources/template/html/pages/content-repo/b2b/resources-post-vsb.html',
            'data': {
                'navIndex': 4,
                'title': 'Resources category'
            }
        }).state('vsb-lrc-closed', {
            'parent': 'vsb',
            'url': '/vsb-lrc-closed',
            'data': {
                'title': 'VSB LRC Closed',
                'navIndex': 0
            },
            'templateUrl': '/resources/template/html/pages/vsb/LRC-closed.html'
        });
    }]);
})();
'use strict';

(function () {
    angular.module('kappGlobal.contentRepoCatConfig', []).constant('CATEGORYCONFIG', {
        'global': ['01::preemptive-safety', '01::customers', '01::general-cybersecurity', '02::threats', '02::insights', '02::industrial-cybersecurity', '03::infographics', '03::products', '03::finance', '04::definitions', '04::technology', '04::privacy', '05::industry-awards-and-recognition', '06::cyber-insurance', '07::digital-skills', '09::webinars', '12::formations']
    }).constant('CERTIFICATESCONFIG', {
        'ru': ['01::Госорганы', '02::Тестовые лаборатории', '03::Другие вендоры']
    }).constant('AWARDSCONFIG', {
        'global': ['01::awards'],
        'ru': ['01::Награды']
    }).constant('SUBCATCONFIG', {
        'global': ['01::Business News', '02::Comparative Tests', '03::Corporate News', '04::Events Calendar', '05::Information', '06::Press Releases', '07::Product news', '08::Spam News', '09::Updates News', '10::Virus News', '11::Why Kaspersky- Comparative tests'],
        'es': ['01::Noticias empresariales', '02::Pruebas Comparativas', '03::Noticias corporativas', '04::Calendario de eventos', '05::Información', '06::Comunicados de prensa', '07::Noticias sobre productos', '08::Noticias sobre spam', '09::Noticias sobre actualizaciones', '10::Noticias sobre virus', '11::Por qué Kaspersky - Pruebas comparativas', '12::Análisis y comentarios', '13::Riks News'],
        'fr': ['00::Récompenses et Certifications', '01::Actualités du secteur', '02::Tests Comparatifs', '03::Actualités sur les entreprises', '04::Calendrier des événements', '05::Informations', '06::Communiqués de presse', '07::Actualités Produits', '08::Actualités Spam', '09::Actualités sur les mises à jour', '10::Actualités Virus', '11::Pourquoi Kaspersky - Tests comparatifs'],
        'it': ['01::Business News', '02::Test comparativi', '03::Corporate News', '04::Calendario eventi', '05::Informazione', '06::Comunicati stampa', '07::News di prodotto', '08::News sullo spam', '09::Notizie sugli aggiornamenti', '10::Notizie sui virus', '11::Perché scegliere Kaspersky - Test comparativi', '12::News Italia', '13::Riks News', '14::Topic del mese', '15::Le nostre classifiche', '16::Eventi Italia', '17::Ferrari Lounge', '18::Malware-pr', '19::Notizie Business', '20::Notizie Prodotti', '21::Notizie Virus', '22::Riconoscimenti e Certificazioni'],
        'de': ['00::Allgemeine Informationen', '01::Business-Nachrichten', '02::Vergleichstests', '03::Unternehmensnachrichten', '04::Ereignisse', '04::Veranstaltungskalender', '05::Informationen', '06::Pressemitteilungen', '07::Produktinfos und -neuigkeiten', '08::Spamnachrichten', '09::Updatenachrichten', '10::Virennachrichten', '11::Warum Kaspersky – Vergleichstests', '12::Riks News'],
        'nl': ['01::Zakelijk Nieuws', '02::Vergelijkende Tests', '03::Corporate Nieuws', '04::Evenementenkalender', '05::Information', '06::Persberichten', '07::Productnieuws', '08::Spamnieuws', '09::Updates News', '10::Virusnieuws', '11::Waarom Kaspersky - Vergelijkende Tests', '12::Riks News'],
        'tr': ['01::İş Haberleri', '02::Karşılaştırmalı Testler', '03::Kurumsal Haberler', '04::Etkinlik Takvimi', '05::Bilgi', '06::Haber Bültenleri', '07::Ürün Haberleri', '08::Spam Haberleri', '09::Güncelleme Haberleri', '10::Virüs Haberleri', '11::Neden Kaspersky - Karşılaştırmalı Testler', '12::Riks News'],
        'ae': ['01::أخبار الأعمال', '02::اختبارات مقارنة', '03::خبار الشركة', '04::تقويم الأحداث', '05::معلومات', '06::النشرات الصحفية', '07::أخبار المنتجات', '08::أخبار البريد الإلكتروني العشوائي', '09::أخبار التحديثات', '10::أخبار الفيروسات', '11::لماذا Kaspersky هي الأفضل - اختبارات مقارنة'],
        'br': ['01::Novidades dos negócios', '02::Testes comparativos', '03::Novidades corporativas', '04::Calendário de eventos', '05::Informações', '06::Comunicado à imprensa', '07::Novidades sobre produtos', '08::Novidades sobre spam', '09::Novidades sobre atualizações', '10::Novidades sobre vírus', '11::Por que a Kaspersky? - Testes corporativos', '12::Comunicados de Imprensa', '13::Últimas Notícias', '14::Kaspersky Blog'],
        'se': ['01::Affärsnyheter', '02::Jämförande tester', '03::Företagsnyheter', '04::Evenemangskalender', '05::Information', '06::Pressmeddelanden', '07::Produktnyheter', '08::Skräppostnyheter', '09::Uppdateringsnyheter', '10::Virusnyheter', '11::Varför Kaspersky? – Jämförande tester', '12::Riks News'],
        'dk': ['01::ERHVERVSNYHEDER', '02::SAMMENLIGNENDE TESTS', '03::Erhvervsnyheder', '04::Kalender', '05::Information', '06::Pressemeddelelser', '07::Produktnyheder', '08::Spamnyheder', '09::Opdatér Nyheder', '10::Virusnyheder', '11::Hvorfor Kaspersky – sammenlignende tests', '12::Riks News'],
        'no': ['01::Bedriftsnyheter', '02::Sammenlignende tester', '03::Konsernnyheter', '04::Hendelseskalender', '05::Informasjon', '06::Pressemeldinger', '07::Produktnyheter', '08::Søppelpostnyheter', '09::Oppdateringsnyheter', '10::Virusnyheter', '11::Hvorfor velge Kaspersky – sammenlignende tester', '12::Riks News'],
        'cn': ['01::商务新闻', '02::评比测试', '03::企业新闻', '04::活动日程表', '05::信息', '06::新闻稿', '07::产品新闻', '08::垃圾邮件动态', '09::产品更新', '10::病毒播报', '11::为何选择卡巴斯基——评比测试'],
        'mx': ['01::Blog de Kaspersky', '01::Noticias comerciales', '02::Pruebas comparativas', '03::Noticias corporativas', '04::Calendario de eventos', '05::Información', '06::Comunicados de prensa', '07::Noticias sobre productos', '08::Noticias sobre spam', '09::Noticias sobre actualizaciones', '10::Noticias sobre virus', '11::¿Por qué elegir Kaspersky Lab? Pruebas comparativas', '12::Ultimas Noticias'],
        'ru': ['01::Деловые новости', '02::Независимые тесты',
        //'03::Новости о киберугрозах',
        //'04::Календарь событий',
        //'05::Информация',
        //'06::Пресс-релизы',
        '07::Новости о продуктах',
        //'08::Новости о спам-рассылках',
        //'09::Нов��сти об обновлениях',
        //'10::Новости о вирусах',
        //'11::Награды',
        //'12::История версий',
        '13::Новости об угрозах', '14::Реализованные проекты'],
        'jp': ['07::製品ニュース', '10::ウイルスニュース', '08::スパムニュース', '02::比較テスト', '01::ビジネスニュース', '04::イベントカレンダー', '12::お知らせ']
    });
})();
'use strict';

/*eslint angular/window-service: 0*/
(function () {
    'use strict';

    angular.module('kappGlobal').config(['$compileProvider', '$httpProvider', configureModule]);

    function configureModule($compileProvider, $httpProvider) {
        if (!navigator.userAgent.match(/PhantomJS/i) && isProd()) {
            $compileProvider.commentDirectivesEnabled(false);
            $compileProvider.cssClassDirectivesEnabled(false);
            $compileProvider.debugInfoEnabled(false);
        }
        /*
        Gives performance boost when handling concurrent requests, by delaying
        and aggregating digest cycles, thus reducing the number of calculations
         */
        $httpProvider.useApplyAsync(true);

        function isProd() {
            var isDebug = location.search.split('debug=')[1];
            return !window.location.host.match(/ngdev|ngtst|ngtest|stg|localhost|127.0.0.1/) && !isDebug || isDebug === 'prod';
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.branch', []).constant('BRANCH', {
        'name': 'release',
        'sha': '3bb5850df9666c2c171bde2d695aeaca4f4d9bbb',
        'date': '2018-08-06T15:21:07.348Z'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.config', ['kappGlobal.env']).constant('SETUP', {
        'showAR': 'true',
        'isChecked': 'true',
        'country': 'Global',
        'trialButtonsInsideLrc': 'default' // 'default' | 'false'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.currencyConfig', []).constant('CURRENCY', {
        'globalCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'en-global', 'Global', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'AI', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'AG', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'AW', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'BS', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'BB', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'VG', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'BQ', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'KY', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'CW', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'DM', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'GD', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'HT', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'JM', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'MS', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'KN', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'TT', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'TC', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'VI', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'LC', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'CU', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'DO', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'PR', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'GP', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'MQ', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'Caribbean Dollar', 'SX', 'en-cu', 'Caribbean', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'BN', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'LA', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'TH', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'VN', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'BD', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'NP', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'LK', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'South East Asia Dollar', 'MM', 'en-global', 'South East Asia', '$', null, '$1'), constructCurrencyObject('USD', 'Israeli Dollar', 'IL', 'he-il', 'Israel', '$', null, '$1'), constructCurrencyObject('EUR', 'Euro', 'FI', 'en-fi', 'Finland', '€', null, '1 $', ' ', ','), constructCurrencyObject('IDR', 'Indonesia Rupiah', 'ID', 'en-id', 'Indonesia', 'Rp', 'Asia', '$1', '.', ','),
        // constructCurrencyObject('KHR', 'Cambodia Riel', 'KH', 'en-kh', 'Cambodia', '៛', 'Asia', '1$', '.', ','),
        constructCurrencyObject('MYR', 'Malaysia Ringgit', 'MY', 'en-my', 'Malaysia', 'RM', 'Asia', '$1'), constructCurrencyObject('PHP', 'Philippines Peso', 'PH', 'en-ph', 'Philippine', '₱', 'Asia', '$1'), constructCurrencyObject('SGD', 'Singapore Dollar', 'SG', 'en-sg', 'Singapore', 'S$', 'Asia', '$1')
        // constructCurrencyObject('AUD', 'Australian Dollar', 'AU', 'en-au', 'Australia'),
        // constructCurrencyObject('NZD', 'New Zealand Dollar', 'NZ', 'en-nz', 'New Zealand')
        ],
        'auCurrencies': [constructCurrencyObject('AUD', 'Australian Dollar', '', 'en-au', 'Australia', '$', null, '$1'), constructCurrencyObject('NZD', 'New Zealand Dollar', 'NZ', 'en-nz', 'New Zealand', '$', null, '$1')],
        'aeCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'en-us', 'Middle East', '$', null, '$1', null, '.'), constructCurrencyObject('AED', 'UAE dirham', 'AE', 'en-ae', 'United Arab Emirates', 'AED', null, '$ 1', null, '.'), constructCurrencyObject('QAR', 'Qatari riyal', 'QA', 'en-qa', 'Qatar', 'QAR', null, '$ 1', '.', '.'), constructCurrencyObject('SAR', 'Saudi Arabian riyal', 'SA', 'en-sa', 'Saudi Arabia', 'SAR', null, '$ 1', null, '.')],
        'arCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'ar-us', 'Middle East', '$', null, '$1', null, '.'), constructCurrencyObject('AED', 'UAE dirham', 'AE', 'ar-ae', 'United Arab Emirates', 'AED', null, '$ 1', null, '.'), constructCurrencyObject('QAR', 'Qatari riyal', 'QA', 'ar-qa', 'Qatar', 'QAR', null, '$ 1', null, '.'), constructCurrencyObject('SAR', 'Saudi Arabian riyal', 'SA', 'ar-sa', 'Saudi Arabia', 'SAR', null, '$ 1', null, '.')],
        'brCurrencies': [constructCurrencyObject('BRL', 'Brazilian Real', '', 'pt-br', 'Brazil', null, null, '$1')],
        'deCurrencies': [constructCurrencyObject('EUR', 'Euro', '', 'de-de', 'Germany', '€', null, '1 $'), constructCurrencyObject('CHF', 'Schweizer Franken', 'CH', 'de-ch', 'Switzerland', 'CHF', null, '$ 1', '’', '.')],
        'esCurrencies': [constructCurrencyObject('EUR', 'Euro', '', 'es-es', 'Spain', null, null, '1 $')],
        'frCurrencies': [constructCurrencyObject('EUR', 'Euro', '', 'fr-fr', 'France', '€', null, '1 $'), constructCurrencyObject('DA', 'Dinar algérien', 'DZ', 'fr-dz', 'Algeria', 'DA', null, '1 $'), constructCurrencyObject('DT', 'Dinar tunisien', 'TN', 'fr-tn', 'Tunisia', 'DT', null, '1 $'), constructCurrencyObject('DH', 'Dirham marocain', 'MA', 'fr-ma', 'Morocco', 'DH', null, '1 $', null, ','), constructCurrencyObject('EUR', 'Euro', 'BE', 'fr-be', 'Belgium', '€', 'Europe', '1 $')],
        'gbCurrencies': [constructCurrencyObject('GBP', 'British Pound', '', 'en-gb', 'United Kingdom', '£', null, '$1'), constructCurrencyObject('EUR', 'Euro', 'IE', 'en-ie', 'Ireland', '€', null, '$1')],
        'inCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'en-us', 'Rest of World', '$', null, '$1'), constructCurrencyObject('INR', 'Indian Rupee', 'IN', 'en-in', 'India', '₹', null, '$ 1'), constructCurrencyObject('LKR', 'Sri Lankan Rupee', 'LK', 'en-lk', 'Sri Lanka', 'LKR', null, '$ 1'), constructCurrencyObject('BDT', 'Bangladeshi Taka', 'BD', 'en-bd', 'Bangladesh', 'BDT', null, '$ 1'), constructCurrencyObject('NPR', 'Nepalese Rupee', 'NP', 'en-np', 'Nepal', 'NPR', null, '$ 1')],
        'itCurrencies': [constructCurrencyObject('EUR', 'Euro', '', 'it-it', 'Italy', null, null, '1 $')],
        'nlCurrencies': [constructCurrencyObject('EUR', 'Euro', '', 'nl-nl', 'Netherlands', null, null, '$ 1')],
        'zaCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'en-za', 'Africa', '$', null, '$1', ',', '.'), constructCurrencyObject('ZAR', 'South African rand', 'ZA', 'en-sa', 'South Africa', 'R', null, '$1'), constructCurrencyObject('KES', 'Kenyan shilling', 'KE', 'en-ke', 'Kenya', 'KSh', null, '$1', ',', '.'), constructCurrencyObject('NGN', 'Nigerian naira', 'NG', 'en-ng', 'Nigeria', '₦', null, '$1', ',', '.'), constructCurrencyObject('NAD', 'Namibian dollar', 'NA', 'en-na', 'Namibia', '$', null, '$1', ',', '.'), constructCurrencyObject('EUR', 'Euro', 'FI', 'en-fi', 'Finland', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'BJ', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'BF', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'CM', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'CF', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'TD', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'CG', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'CD', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'GQ', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'GA', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'GW', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'CI', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'ML', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'NE', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'SN', 'en-be', 'AfricaEuro', '€', null, '1 $'), constructCurrencyObject('EUR', 'Euro', 'TG', 'en-be', 'AfricaEuro', '€', null, '1 $')],
        'seCurrencies': [constructCurrencyObject('SEK', 'Svensk krona', '', 'sv-se', 'Sweden', null, null, '1 $')],
        'dkCurrencies': [constructCurrencyObject('DKK', 'Danske kroner', '', 'da-dk', 'Denmark', null, null, '1 $')],
        'noCurrencies': [constructCurrencyObject('NOK', 'Norsk krone', '', 'nb-no', 'Norway', null, null, '$ 1')],
        'trCurrencies': [constructCurrencyObject('TRY', 'Turkish Lira', '', 'tr-tr', 'Turkey', 'TRY', null, '$1')],
        'usCurrencies': [constructCurrencyObject('USD', 'US Dollars', '', 'en-us', 'USA', null, null, '$1')],
        'cnCurrencies': [constructCurrencyObject('CNY', 'Chinese Yuan', '', 'zh-cn', 'China', null, null, '$ 1')],
        'mxCurrencies': [constructCurrencyObject('USD', 'U.S. Dollar', '', 'es-us', 'Global', '$', null, '$1'), constructCurrencyObject('MXN', 'Mexican Peso', 'MX', 'es-mx', 'Mexico', 'MXN', null, '$ 1'), constructCurrencyObject('ARS', 'Argentinian Peso', 'AR', 'es-ar', 'Argentina', 'ARS', null, '$1', ''), constructCurrencyObject('PEN', 'Peruvian Sol', 'PE', 'es-pe', 'Peruvia', 'PEN', null, '$1'), constructCurrencyObject('USD', 'U.S. Dollar', 'EC', 'es-ec', 'Ecuador', '$', null, '$1'), constructCurrencyObject('CLP', 'Chilean Peso', 'CL', 'es-cl', 'Chile', 'CLP', null, '$1', '.', ','), constructCurrencyObject('COP', 'Colombian Peso', 'CO', 'es-co', 'Colombia', 'COP', null, '$ 1', '.', ',')],
        'ruCurrencies': [constructCurrencyObject('RUB', 'Russian Rouble', '', 'ru-ru', 'Russia', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'KZ', 'ru-kz', 'Kazakhstan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'TJ', 'ru-kz', 'Tajikistan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'UZ', 'ru-kz', 'Uzbekistan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'KG', 'ru-kz', 'Kyrgyzstan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'TM', 'ru-kz', 'Turkmenistan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'GE', 'ru-kz', 'Georgia', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'AM', 'ru-kz', 'Armenia', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('RUB', 'Russian Rouble', 'AZ', 'ru-kz', 'Azerbaijan', 'RUB', null, '1 $', null, null, 0), constructCurrencyObject('BYN', 'Belorussian Rouble', 'BY', 'ru-by', 'Russia', 'BYN', null, '1 $', null, null, 0)],
        'jpCurrencies': [constructCurrencyObject('JPY', 'Japanese yen', '', 'ja-jp', 'Japan', '¥', null, '$1', null, null, 0)],
        'regions': [{ 'locale': 'en-global', 'name': 'Global', 'selectedLanguages': 'en', 'selectedCountryCode': 'Global' }, { 'locale': 'en-GB', 'name': 'The European Union', 'selectedLanguages': 'en', 'selectedCountryCode': 'gb' }, { 'locale': 'he-IL', 'name': 'Israel', 'selectedLanguages': 'en', 'selectedCountryCode': 'il' }, { 'locale': 'en-SEA', 'name': 'South East Asia', 'selectedLanguages': 'en', 'selectedCountryCode': 'my' }, { 'locale': 'en-ID', 'name': 'Indonesia', 'selectedLanguages': 'en', 'selectedCountryCode': 'id' }, { 'locale': 'en-PH', 'name': 'Philippines', 'selectedLanguages': 'en', 'selectedCountryCode': 'my' }, { 'locale': 'en-CAR', 'name': 'Caribbean', 'selectedLanguages': 'en', 'selectedCountryCode': 'Global' }, { 'locale': 'en-FI', 'name': 'Finland', 'selectedLanguages': 'fi', 'selectedCountryCode': 'fi' }, { 'locale': 'en-MY', 'name': 'Malaysia', 'selectedLanguages': 'en', 'selectedCountryCode': 'my' }, { 'locale': 'en-SG', 'name': 'Singapore', 'selectedLanguages': 'en', 'selectedCountryCode': 'my' }]
    });

    /**
    * [constructCurrencyObject description]
    * @param  {String} currency            The currency ID
    * @param  {String} currencyDisplayName The currency display name
    * @param  {String} geoIP               The geoIP locale
    * @param  {String} locale              The site locale
    * @param  {String} name                The locale display name
    * @param  {String} [symbol='$']        Override for currency symbol
    * @param  {String} region              The region display name
    * @param  {String} [template='']       The currency formatting template; $ is the currency symbol and 1 is the numeric value. (e.g. 1 $ to have symbol at the end)
    * @param  {String} groupSep            Override for thousands separator
    * @param  {String} decimalSep          Override for decimals separator
    * @param  {String} decimalCount        Override for number of decimals to show
    * @return {Object}                     The currency object
    */
    function constructCurrencyObject(currency, currencyDisplayName, geoIP, locale, name, symbol, region) {
        var template = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '$1';
        var groupSep = arguments[8];
        var decimalSep = arguments[9];
        var decimalCount = arguments[10];

        return {
            'currency': currency,
            'symbol': symbol,
            'geoIP': geoIP,
            'locale': locale,
            'currencyDisplayName': currencyDisplayName,
            'name': name,
            'displayName': currency + ' - ' + currencyDisplayName,
            'template': template,
            'groupSep': groupSep,
            'decimalSep': decimalSep,
            'decimalCount': decimalCount,
            'region': region
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.env', []).constant('ENV', function () {

        var locale = 'en-global',
            server = '',
            ISOConfig = [{
            'id': 'GL',
            'locale': 'en\-global'
        }, {
            'id': 'RU',
            'locale': 'ru-ru'
        }, {
            'id': 'US',
            'locale': 'en-us'
        }, {
            'id': 'UK',
            'locale': 'en-gb'
        }, {
            'id': 'BR',
            'locale': 'pt-br'
        }, {
            'id': 'FR',
            'locale': 'fr-fr'
        }, {
            'id': 'DE',
            'locale': 'de-de'
        }, {
            'id': 'IT',
            'locale': 'it-it'
        }, {
            'id': 'ES',
            'locale': 'es-es'
        }, {
            'id': 'NL',
            'locale': 'nl-nl'
        }, {
            'id': 'AU',
            'locale': 'en-au'
        }, {
            'id': 'ME',
            'locale': 'en-ae'
        }, {
            'id': 'ME',
            'locale': 'ar-ae'
        }, {
            'id': 'JP',
            'locale': 'ja-jp'
        }, {
            'id': 'IN',
            'locale': 'en-in'
        }, {
            'id': 'ZA',
            'locale': 'en-za'
        }, {
            'id': 'CN',
            'locale': 'zh-cn'
        }, {
            'id': 'TR',
            'locale': 'tr-tr'
        }, {
            'id': 'LA',
            'locale': 'es-mx'
        }, {
            'id': 'SE',
            'locale': 'sv-se'
        }, {
            'id': 'DK',
            'locale': 'da-dk'
        }, {
            'id': 'NO',
            'locale': 'nb-no'
        }, {
            'id': 'CA',
            'locale': 'en-ca'
        }];

        return {
            'locale': locale,
            'server': server,
            'apiServer': server,
            'ISOConfig': ISOConfig
        };
    }());
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.geoLocationConfig', []).constant('GEO', {
        'vpnProhibitedCountries': getVpnProhibitedCountries(),
        'kscProhibitedCountries': getKscProhibitedCountries(),
        'downloadUrls': getDownloadUrlForProhibitedCountries(),
        'getRUCountries': getRUCountries()
    });

    function getVpnProhibitedCountries() {
        return [constructGeoObject('Belarus', 'BY'), constructGeoObject('Oman', 'OM'), constructGeoObject('Pakistan', 'PK'), constructGeoObject('Qatar', 'QA'), constructGeoObject('Iran', 'IR'), constructGeoObject('UAE', 'AE'), constructGeoObject('Saudi Arabia', 'SA'), constructGeoObject('Hong Kong', 'HK'), constructGeoObject('China', 'CN')];
    }

    function getKscProhibitedCountries() {
        return [constructGeoObject('Belarus', 'BY'), constructGeoObject('Oman', 'OM'), constructGeoObject('Pakistan', 'PK'), constructGeoObject('Qatar', 'QA'), constructGeoObject('Iran', 'IR'), constructGeoObject('China', 'CN'), constructGeoObject('Hong Kong', 'HK'), constructGeoObject('Saudi Arabia', 'SA')];
    }

    function constructGeoObject(countryName, locale) {
        return {
            'countryName': countryName,
            'locale': locale.toLowerCase()
        };
    }

    function getDownloadUrlForProhibitedCountries() {
        return ['downloads/thank-you/internet-security', 'downloads/thank-you/total-security', 'downloads/thank-you/antivirus', 'downloads/total-security-free-trial', 'downloads/antivirus-free-trial', 'downloads/internet-security-free-trial', 'downloads/thank-you/antivirus-free-trial', 'downloads/thank-you/total-security-free-trial', 'downloads/thank-you/internet-security-free-trial', 'antivirus', 'internet-security', 'total-security', 'acq/kss/verdicts', 'free-mac-virus-scan', 'mac-virus-scan', 'free-virus-scan', 'acq/kss/verdict-11', 'acq/msft/security-for-windows', 'acq/kss/uninstall', 'acq/ksu/uninstall'];
    }

    function getRUCountries() {
        return ['RU', 'KZ', 'BY'];
    }
})();
'use strict';

(function () {
    'use strict';
    /*This configs sets rules to form a link to the cart
    * whenever Partner (ecommProvider) is set tracking.module.js will append a different set of parameters to it
    * */

    angular.module('kappGlobal.partnersConfig', []).constant('PARTNERS', {
        'ar-ae': 'Avangate',
        'da-dk': 'Digital River',
        'de-de': 'Digital River',
        'en-ae': 'Avangate',
        'en-au': 'Digital River',
        'en-gb': 'Digital River',
        'en-in': 'Digital River',
        'en-us': 'Digital River',
        'en-za': 'Avangate',
        'es-es': 'Nexway',
        'es-mx': 'Digital River',
        'fr-fr': 'Nexway',
        'it-it': 'Nexway',
        'nb-no': 'Digital River',
        'nl-nl': 'Digital River',
        'pt-br': 'Digital River',
        'sv-se': 'Digital River',
        'tr-tr': 'Avangate',
        'zh-cn': 'Digital River',
        'ru-ru': 'Allsoft',
        'ja-jp': 'Digital River'
    });
})();
/*eslint angular/window-service: 0*/
/*
(function() {
    'use strict';
    angular.module('kappGlobal')
        .config(['RollbarProvider', RollbarProvider]);

    function RollbarProvider(RollbarProvider) {
        RollbarProvider.init({
            'accessToken': getAccessTokenWhenProd(),
            'captureUncaught': true,
            'captureUnhandledRejections': true,
            'enabled': isProd() && !window.customFlag,
            'payload': {
                'environment': 'en-global'
            }
        });
    }
    function isProd() {
        return !window.location.host.match(/ngdev|ngtst|ngtest|stg|localhost|127.0.0.1/);
    }

    function getAccessTokenWhenProd() {
        return isProd() ? '7fba81fd8f2b4dd9bd9685ca1918af96' : '';
    }
})();
*/
"use strict";
'use strict';

(function () {
    'use strict';
    /*This configs is where we keep details of all the alt texts for all screenshot images
    * currently limited to Screenshot images, can be extended for other images, site-wide
    * 'ar-ae': null,
     'da-dk': null,
     'de-de': null,
     'en-ae': null,
     'en-au': null,
     'en-gb': null,
     'en-global': null,
     'en-in': null,
     'en-za': null,
     'es-es': null,
     'es-mx': null,
     'fr-fr': null,
     'it-it': null,
     'nb-no': null,
     'nl-nl': null,
     'pt-br': null,
     'sv-se': null,
     'tr-tr': null,
     'zh-cn': null,
     'ru-ru': null'
     'ja-jp': null'
    * */

    angular.module('kappGlobal.seoConfig', []).constant('SEO', {
        'en-gb': {
            'EN-GB-DATA': 'EN-GB-DATA',
            'product-box-KPM': 'Kaspersky Password Manager',
            'screen-KTSMD-01': 'Kaspersky Total Security Screenshot',
            'screen-KTSMD-02': 'Screenshot of Kaspersky Total Security',
            'screen-KTSMD-03': 'Kaspersky Total Security Privacy Protection',
            'screen-KTSMD-04': 'Kaspersky Total Security Secure Connection',
            'screen-KIS-01': 'Kaspersky Internet Security screenshot',
            'screen-KIS-02': 'Kaspersky Internet Security Tools',
            'screen-KIS-03': 'Kaspersky Internet  Security Privacy Protection',
            'screen-KIS-04': 'Kaspersky Total Security Secure Connection',
            'screen-KAV-01': 'Kaspersky Anti-Virus Interface',
            'screen-KAV-02': 'Kaspersky Anti-Virus Cloud Protection',
            'screen-KAV-03': 'Kaspersky Anti-Virus Settings',
            'screen-KISMAC-01': 'Kaspersky Mac Internet Security Screenshot',
            'screen-KISMAC-02': 'Kaspersky Mac Internet Security - Safe Money',
            'screen-KISMAC-03': 'Kaspersky Mac Parental Control - Sophia',
            'screen-KISA-01': 'Kaspersky Internet Security for Android Screenshot',
            'screen-KISA-02': 'Kaspersky Internet Security for Android Privacy Protection',
            'screen-KISA-03': 'Kaspersky Internet Security for Android Web Protection',
            'screen-KISA-04': 'Kaspersky Internet Security for Android Anti Theft',
            'screen-KPM-01': 'Kaspersky Password Manager Screenshot',
            'screen-KPM-02': 'Kaspersky Password Manager Interface',
            'screen-KPM-03': 'Kaspersky Password Manager Capture Card Details',
            'screen-KPM-04': 'Kaspersky Password Manager Sign In'
        },
        'default': {
            'DEFAULT-DATA': 'DEFAULT-DATA',
            'product-box-KPM': 'Kaspersky Password Manager',
            'screen-KTSMD-01': 'Kaspersky Total Security Screenshot',
            'screen-KTSMD-02': 'Screenshot of Kaspersky Total Security',
            'screen-KTSMD-03': 'Kaspersky Total Security Privacy Protection',
            'screen-KTSMD-04': 'Kaspersky Total Security Secure Connection',
            'screen-KIS-01': 'Kaspersky Internet Security screenshot',
            'screen-KIS-02': 'Kaspersky Internet Security Tools',
            'screen-KIS-03': 'Kaspersky Internet  Security Privacy Protection',
            'screen-KIS-04': 'Kaspersky Total Security Secure Connection',
            'screen-KAV-01': 'Kaspersky Anti-Virus Interface',
            'screen-KAV-02': 'Kaspersky Anti-Virus Cloud Protection',
            'screen-KAV-03': 'Kaspersky Anti-Virus Settings',
            'screen-KISMAC-01': 'Kaspersky Mac Internet Security Screenshot',
            'screen-KISMAC-02': 'Kaspersky Mac Internet Security - Safe Money',
            'screen-KISMAC-03': 'Kaspersky Mac Parental Control - Sophia',
            'screen-KISA-01': 'Kaspersky Internet Security for Android Screenshot',
            'screen-KISA-02': 'Kaspersky Internet Security for Android Privacy Protection',
            'screen-KISA-03': 'Kaspersky Internet Security for Android Web Protection',
            'screen-KISA-04': 'Kaspersky Internet Security for Android Anti Theft',
            'screen-KPM-01': 'Kaspersky Password Manager Screenshot',
            'screen-KPM-02': 'Kaspersky Password Manager Interface',
            'screen-KPM-03': 'Kaspersky Password Manager Capture Card Details',
            'screen-KPM-04': 'Kaspersky Password Manager Sign In'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(config);
    config.$inject = ['$urlMatcherFactoryProvider'];

    function config($urlMatcherFactoryProvider) {
        function valToString(val) {
            return val !== null || angular.isDefined(val) ? val.toString() : val;
        }

        $urlMatcherFactoryProvider.type('nonURIEncoded', {
            'encode': valToString,
            'decode': valToString,
            'is': function is() {
                return true;
            }
        });
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.version', []).constant('VER', {
        'version': '103.0.2'
    });
})();
'use strict';

/*eslint angular/window-service: 0*/
(function () {
    'use strict';

    angular.module('kappGlobal').config(["$sceDelegateProvider", function ($sceDelegateProvider) {
        $sceDelegateProvider.resourceUrlWhitelist(['self', 'https://api.bazaarvoice.com/**', 'https://api.trustpilot.com/**', 'https://www.youtube.com/**', 'https://westus.api.cognitive.microsoft.com/**', 'https://cb-us.maxymiser.com/**', 'https://proxy-eu.maxymiser.com/**', 'https://dev.mvtresearch.com/**']);
    }]);
})();
/* eslint-disable */
'use strict';

angular.module("ngLocale", [], ["$provide", function ($provide) {
  var PLURAL_CATEGORY = { ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other" };
  function getDecimals(n) {
    n = n + '';
    var i = n.indexOf('.');
    return i == -1 ? 0 : n.length - i - 1;
  }

  function getVF(n, opt_precision) {
    var v = opt_precision;

    if (undefined === v) {
      v = Math.min(getDecimals(n), 3);
    }

    var base = Math.pow(10, v);
    var f = (n * base | 0) % base;
    return { v: v, f: f };
  }

  $provide.value("$locale", {
    "DATETIME_FORMATS": {
      "AMPMS": ["AM", "PM"],
      "DAY": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      "ERANAMES": ["Before Christ", "Anno Domini"],
      "ERAS": ["BC", "AD"],
      "FIRSTDAYOFWEEK": 6,
      "MONTH": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      "SHORTDAY": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      "SHORTMONTH": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      "STANDALONEMONTH": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      "WEEKENDRANGE": [5, 6],
      "fullDate": "EEEE, MMMM d, y",
      "longDate": "MMMM d, y",
      "medium": "MMM d, y h:mm:ss a",
      "mediumDate": "MMM d, y",
      "mediumTime": "h:mm:ss a",
      "short": "M/d/yy h:mm a",
      "shortDate": "M/d/yy",
      "shortTime": "h:mm a"
    },
    "NUMBER_FORMATS": {
      "CURRENCY_SYM": "$",
      "DECIMAL_SEP": ".",
      "GROUP_SEP": ",",
      "PATTERNS": [{
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      }, {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-\xA4",
        "negSuf": "",
        "posPre": "\xA4",
        "posSuf": ""
      }]
    },
    "id": "en-us",
    "localeID": "en_US",
    "pluralCat": function pluralCat(n, opt_precision) {
      var i = n | 0;var vf = getVF(n, opt_precision);if (i == 1 && vf.v == 0) {
        return PLURAL_CATEGORY.ONE;
      }return PLURAL_CATEGORY.OTHER;
    }
  });
}]);
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal').config(paginationConfig);

    paginationConfig.$inject = ['paginationTemplateProvider'];
    function paginationConfig(paginationTemplateProvider) {
        paginationTemplateProvider.setPath('resources/template/html/modules/_shared/components/pagination/templates/pagination-1.html');
    }
})();
'use strict';

String.prototype.replaceAll = function (find, replace) {
    return this.replace(new RegExp(find, 'g'), replace);
};

String.prototype.validateEmail = function () {
    var re = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    return re.test(this);
};
'use strict';

(function () {
    cookieService.$inject = ["$document"];
    angular.module('kappGlobal.cookieService', []).factory('cookieService', cookieService);

    function cookieService($document) {
        'use strict';

        return {
            'set': setCookie,
            'get': getCookie,
            'remove': removeCookie
        };

        function setCookie(key, value, days, domain) {
            if (!key) {
                return null;
            }

            var expiry = '';
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
                expiry = '; expires=' + date.toUTCString();
            }
            $document[0].cookie = encodeURIComponent(key) + '=' + encodeURIComponent(value) + expiry + '; path=/;' + (domain ? 'domain=' + domain : '');
            return true;
        }

        function getCookie(key) {
            if (!key) {
                return null;
            }
            var cookies = $document[0].cookie;

            // escaping special characters
            var escapedKey = encodeURIComponent(key).replace(/[\-\.\+\*]/g, '\\$&');

            // cookies are returned in this format: "cookie1=val1; cookie2=val2; cookie3=val3"
            // we are filtering that string for our key, and then returning the value for that key.
            var cookieValue = cookies.replace(new RegExp('(?:(?:^|.*;)\\s*' + escapedKey + '\\s*\\=\\s*([^;]*).*$)|^.*$'), '$1');

            return decodeURIComponent(cookieValue) || null;
        }

        function removeCookie(key) {
            if (!key) {
                return null;
            }

            var hasCookie = getCookie(key);

            if (!hasCookie) {
                return false;
            } else {
                return setCookie(key, '', -1);
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    currencyManager.$inject = ["$rootScope", "sessionStorageService", "CURRENCY", "geoLocationManager", "ENV", "localizationService"];
    angular.module('kappGlobal.currencyManager', ['kappGlobal.currencyConfig', 'kappGlobal.geoLocationManager']).factory('currencyManager', currencyManager);

    function currencyManager($rootScope, sessionStorageService, CURRENCY, geoLocationManager, ENV, localizationService) {
        var currentCurrencyObj = void 0;

        return {
            'getCurrencies': getCurrencies,
            'getCurrentCurrencyFromCache': getCurrentCurrencyFromCache,
            'getDefaultCurrencyFromConfig': getDefaultCurrencyFromConfig,
            'setCurrency': setCurrency,
            'setCurrentCurrency': setCurrentCurrency,
            'getCurrentCurrency': getCurrentCurrency
        };

        function getCurrencies(overrideCurrencies, defaultCurrency, geoIp, currenciesCacheName) {
            currenciesCacheName = currenciesCacheName || $rootScope.getCacheNames.currenciesCache;
            var cachedCurrencies = sessionStorageService.get(currenciesCacheName);
            if (cachedCurrencies !== null) return cachedCurrencies;
            overrideCurrencies = getOrSetCurrencies(overrideCurrencies);
            var currencies = [],
                geoIpDefaultCurrency = getDefaultCurrencyByGeoIp(overrideCurrencies, geoIp);
            defaultCurrency = geoIpDefaultCurrency || defaultCurrency;
            if (defaultCurrency) {
                currencies = filterCurrenciesByDefault(overrideCurrencies, defaultCurrency);
            } else {
                currencies = filterCurrenciesByRegion(overrideCurrencies);
            }
            sessionStorageService.set(currenciesCacheName, currencies);
            setCurrency(defaultCurrency);
            return currencies;
        }

        function getCurrentCurrencyFromCache(currencyLocaleCacheName) {
            currencyLocaleCacheName = getCurrencyLocaleCacheName(currencyLocaleCacheName);
            return sessionStorageService.get(currencyLocaleCacheName);
        }

        function getDefaultCurrencyFromConfig(locale) {
            locale = locale || ENV.locale;
            locale = locale.toLowerCase() === 'ar-ae' ? 'ar-ar' : locale;
            var countryCode = locale.split('-')[1];
            var localeCurrencyConfig = CURRENCY[countryCode + 'Currencies'];
            if (angular.isUndefined(localeCurrencyConfig)) {
                throw new Error(locale + ' is not in the {_config/kappGlobal.currency.config) file. Please add (' + countryCode + 'Currencies) to the config list.');
            }
            return localeCurrencyConfig[0];
        }

        function setCurrency(item, currencyLocaleCacheName) {
            currencyLocaleCacheName = currencyLocaleCacheName || getCurrencyLocaleCacheName(currencyLocaleCacheName);
            if (item === null || angular.isUndefined(item)) return {};
            $rootScope.populateCurrency(item);
            setCurrentCurrency(item);
            localizationService.setCurrencyLocale(item);
            sessionStorageService.set(currencyLocaleCacheName, item);
            $rootScope.$emit('currencyChange');
            return $rootScope;
        }

        function getOrSetCurrencies(overrideCurrencies) {
            overrideCurrencies = overrideCurrencies || CURRENCY[getLocaleCurrencyInfoByValue('Currencies')] || CURRENCY.globalCurrencies;
            return overrideCurrencies;
        }

        function getDefaultCurrencyByGeoIp(currencies, geoIp) {
            geoIp = geoIp || geoLocationManager.getUserGeoIp();
            var defaultCurrency = void 0;
            for (var i = 0, length = currencies.length; i < length; i++) {
                var currency = currencies[i];
                if (currency['geoIP'].toLowerCase() !== geoIp.toLowerCase()) continue;
                defaultCurrency = currency;
                break;
            }
            return defaultCurrency;
        }

        function filterCurrenciesByDefault(currencies, defaultCurrency) {
            currencies = getUniqueCurrencies(currencies);
            currencies = getUniqueCurrenciesByRegion(currencies);
            if (defaultCurrency) {
                var indexToRemove = currencies.map(function (e) {
                    return e.currency;
                }).indexOf(defaultCurrency['currency']);
                currencies.splice(indexToRemove, 1);
                currencies.unshift(defaultCurrency);
            }
            return currencies;
        }

        function getUniqueCurrencies(currencies) {
            var result = [];
            currencies.map(function (currency, index) {
                var previousResult = result[index - 1];
                if (angular.isUndefined(previousResult) || previousResult['currency'] !== currency['currency']) {
                    result.push(currency);
                }
            });
            return result;
        }

        function filterCurrenciesByRegion(currencies) {
            var result = [];
            currencies.map(function (currency) {
                if (angular.isUndefined(currency['region']) || currency['region'] === null) result.push(currency);
            });
            return result;
        }

        function getCurrencyLocaleCacheName(currencyLocaleCacheName) {
            return currencyLocaleCacheName || $rootScope.getCacheNames.currencyLocaleCache;
        }

        function getLocaleCurrencyInfoByValue(value) {
            var locale = ENV.locale;
            locale = locale.toLowerCase() === 'ar-ae' ? 'ar-ar' : locale;
            return '' + locale.split('-')[1] + value;
        }

        function setCurrentCurrency(currencyObj) {
            return currentCurrencyObj = currencyObj;
        }
        function getCurrentCurrency() {
            return currentCurrencyObj;
        }

        function getUniqueCurrenciesByRegion(currencies) {
            var result = [],
                geoIp = geoLocationManager.getUserGeoIp();
            currencies.forEach(function (currency) {
                if (angular.isUndefined(currency['region']) || currency['region'] === null || geoIp === currency['geoIP'] && angular.isDefined(currency['region'])) {
                    result.push(currency);
                }
            });
            return result;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    directiveData.$inject = ["$http", "ENV", "$state", "sessionStorageService", "$q", "$window"];
    angular.module('kappGlobal.directiveData', ['kappGlobal.config']).factory('directiveData', directiveData);
    function directiveData($http, ENV, $state, sessionStorageService, $q, $window) {
        return {
            'get': get,
            'getByUrl': getByUrl,
            'getLocal': getLocal,
            'getBySection': getBySection
        };

        function get(fPath, loc) {
            var locale = loc || ENV.locale;

            if ($window.content && $window.content[encodeURIComponent(fPath)]) {
                var x = fPath.replace(/\/\//g, '/');
                var res = { 'data': $window.content[encodeURIComponent(x)] };
                return $q.resolve(res);
            }
            return fPath.match(/^\/?content\//) ? $http.get(fPath) : $http.get('/content/' + locale + fPath, { 'cache': true });
        }

        function getByUrl(fName) {
            if (fName.match(/\//)) return get(fName);
            var currentState = $state.href($state.current.name) || '';
            var contentLocation = currentState.replace(/(\?|#).*/, '');
            if (contentLocation === '/' || contentLocation === '') contentLocation = '/homepage';

            /**
             * Implementation of content delivery concept as single-api-call
             * Failed becuase of content versioning issue, potentially recoverable when content is
             * handled properly
             */
            /*            if ($rootScope.stateData) {
                            for (let i = 0; i < $rootScope.stateData.length; i++) {
                                if ($rootScope.stateData[i].title === fName) {
                                    obj = $rootScope.stateData[i];
                                    break;
                                }
                            }
                             if (obj) {
                                return $q.resolve({'data': obj});
                            } else {
                                let err = new Error('hiddenByCMS');
                                return $q.reject(err);
                            }
                         } else {*/
            return $http.get('/content/' + ENV.locale + contentLocation + '/' + fName + '.json', { 'cache': true });
            //}
        }

        function getLocal(fName) {
            var cachedData = sessionStorageService.get('local[' + fName + ']');

            if (cachedData) return $q.resolve({ 'data': cachedData });

            return $http.get('/content/' + ENV.locale + '/localization/' + fName + '.json', { 'cache': true }).then(function (response) {
                sessionStorageService.set('local[' + fName + ']', response.data);
                return response;
            }).catch(function (error) {
                return error;
            });
        }

        function getBySection(fName, dir) {
            // second argument for directory by section

            if (_.endsWith(fName, '.json')) {
                return $http.get(fName);
            }

            if ($state.includes('home-security-section') && fName === 'footer') {
                return $q.reject('Rejection: ' + fName + ' is not needed on ' + (dir || 'this page'));
            }

            var section = void 0;
            if ($state.includes('homepage')) section = '/homepage';
            if ($state.includes('home-security-section')) section = '/home-security';
            if ($state.includes('vsb') || $state.includes('lrc-b2b')) section = '/small-business-security';
            if ($state.includes('smb')) section = '/small-to-medium-business-security';
            if ($state.includes('enterprise')) section = '/enterprise-security';
            if ($state.includes('partners')) section = '/partners';
            if ($state.includes('about-section')) section = '/about';

            // check if second argument is set, if not then use the first arg value, @fname
            var directory = dir || fName;

            if (!section) return $q.reject('Rejection: ' + fName + ' is not needed on ' + (dir || 'this page'));

            return $http.get('/content/' + ENV.locale + section + '/' + directory + '/' + fName + '.json');
        }
    }
})();
'use strict';

(function () {
    'use strict';

    downloadLinksFactory.$inject = ["$http", "ENV"];
    angular.module('kappGlobal.downloadLinksFactory', ['kappGlobal.config']).factory('downloadLinks', downloadLinksFactory);

    function downloadLinksFactory($http, ENV) {
        return {
            'getByApp': getByApp
        };

        function getByApp(applications, params) {
            if (angular.isString(applications)) applications = applications.split(',');

            var defaultObj = {
                'applications': applications,
                'options': {
                    'links_type': 'UpdateBuilds',
                    'locale_selection_type': 'Country',
                    'selected_languages_codes': 'en',
                    'fallback_language_code': 'en',
                    'cpp_id': '',
                    'website_country_code': 'Global',
                    'website_language_code': 'en',
                    'website_fallback_language': '',
                    'lang_locale_link_selection_amount': 'All',
                    'show_release_version_type': null,
                    'use_aux_lang_for_app_plugins': null
                }
            };

            if (!params) params = defaultObj;

            return $http.post(ENV.server + '/_svc/downloads.svc/' + ENV.locale + '/SelectLinksByApplications', params).then(function (response) {
                return response;
            });
        }
    }
})();
'use strict';

(function () {
    errorService.$inject = ["$log", "windowHelperService"];
    angular.module('kappGlobal.errorService', []).factory('errorService', errorService);

    function errorService($log, windowHelperService) {
        'use strict';

        var isStaging = windowHelperService.isStaging();

        return {
            'warn': warn
        };

        function warn(errorObj) {
            if (isStaging) $log.warn(parseError(errorObj), { 'error': errorObj });
        }

        function parseError(errorObj) {
            if (angular.isString(errorObj)) return 'Rejection: ' + errorObj;
            errorObj.config = errorObj.config || {};
            return 'Rejection: ' + errorObj.status + ' ' + errorObj.statusText + ': ' + errorObj.config.url;
        }
    }
})();
'use strict';

(function () {
    geoLocationManager.$inject = ["$location", "GEO", "windowHelperService"];
    angular.module('kappGlobal.geoLocationManager', ['kappGlobal.geoLocationConfig']).factory('geoLocationManager', geoLocationManager);

    function geoLocationManager($location, GEO, windowHelperService) {
        var geoIpUrlName = 'ipcountry',
            IPCountry = windowHelperService.getIPCountry();
        return {
            'getVpnProhibitedCountries': getVpnProhibitedCountries(),
            'getProhibitedDownloadUrl': getProhibitedDownloadUrl(),
            'getUserGeoIp': getUserGeoIp,
            'getGeoLocation': getGeoLocation,
            'isVpnProhibitedCountry': isVpnProhibitedCountry,
            'isKscProhibitedCountry': isKscProhibitedCountry,
            'geoIPOverride': geoIPOverride,
            'showVpnProhibitedMessage': showVpnProhibitedMessage
        };

        function getUserGeoIp(url) {
            var geoIp = getGeoIpFromUrl(url);
            geoIp = geoIp || IPCountry || $location.search()[geoIpUrlName] || '';
            return geoIp.toLowerCase();
        }

        function getVpnProhibitedCountries() {
            return GEO['vpnProhibitedCountries'];
        }

        function getKscProhibitedCountries() {
            return GEO['kscProhibitedCountries'];
        }

        function getProhibitedDownloadUrl() {
            return GEO.downloadUrls;
        }

        function getGeoLocation() {
            return windowHelperService.getGeoLocation() || getUserGeoIp();
        }

        function isVpnProhibitedCountry(geoIp) {
            var userGeoIp = geoIp || getUserGeoIp();
            return _.some(getVpnProhibitedCountries(), function (country) {
                return country.locale === userGeoIp;
            });
        }

        function isKscProhibitedCountry(geoIp) {
            var userGeoIp = geoIp || getUserGeoIp();
            return _.some(getKscProhibitedCountries(), function (country) {
                return country.locale === userGeoIp;
            });
        }

        function isDownloadUrl(url, downloadUrls) {
            return _.some(downloadUrls, function (downloadUrl) {
                return url.indexOf(downloadUrl) !== -1;
            });
        }

        function showVpnProhibitedMessage(url, geoIp) {
            if (angular.isUndefined(url) || url === null) {
                throw new Error('geoLocationManager::showVpnProhibitedMessage:: Url is required param');
            }
            return isVpnProhibitedCountry(geoIp) && isDownloadUrl(url, getProhibitedDownloadUrl());
        }

        function geoIPOverride(componentData, downloadVersion) {
            if (angular.isUndefined(componentData)) throw new Error('componentData cannot be undefined');
            if (angular.isUndefined(componentData['geoipLinkOverride'])) return;

            var geoIPLinkOverride = componentData['geoipLinkOverride'],
                geoIp = this.getUserGeoIp(),
                localeRegex = new RegExp(geoIp, 'i'),
                overrideDownloadLink = void 0;

            // find first geoIP link override match
            for (var i = 0; i < geoIPLinkOverride.length && !overrideDownloadLink; i++) {
                overrideDownloadLink = downloadVersion ? getOverrideLinkWithDownloadVersion(geoIPLinkOverride[i], localeRegex, downloadVersion) : getOverrideLinkWithoutDownloadVersion(geoIPLinkOverride[i], localeRegex);
            }
            if (overrideDownloadLink) componentData.overrideDownloadLink = overrideDownloadLink;

            return componentData;
        }

        function getOverrideLinkWithoutDownloadVersion(item, localeRegex) {
            if (item['listOfLocales'].match(localeRegex)) {
                return item['overrideLink'];
            }
            return '';
        }

        function getOverrideLinkWithDownloadVersion(item, localeRegex, downloadVersion) {
            if (item['listOfLocales'].match(localeRegex) && item['language'] === downloadVersion['language_loc_name']) {
                return item['overrideLink'];
            }
            return '';
        }

        // Local helper functions
        function getGeoIpFromUrl(url) {
            if (!url) return;
            return url.split(geoIpUrlName + '=')[1];
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.httpInterceptor', []).factory('httpInterceptor', httpInterceptor).config(config);

    httpInterceptor.$inject = ['$q', '$rootScope'];
    config.$inject = ['$httpProvider'];

    function httpInterceptor($q, $rootScope) {
        var hasFired = void 0,
            requestCounter = 0,
            minReached = void 0;

        function handleNGReady() {
            if (performance && 'mark' in performance) performance.mark('ngReady');
            $rootScope.$emit('ngReady');
            $rootScope.isReady = true;
            hasFired = true;
            //$rootScope.htmlReady();
        }

        return {
            'request': function request(config) {
                ++requestCounter;
                if (requestCounter > 5) {
                    minReached = true;
                }
                return config || $q.when(config);
            },

            'response': function response(_response) {
                if (--requestCounter === 0 && minReached && !hasFired) {
                    handleNGReady();
                }
                return _response || $q.when(_response);
            },

            'responseError': function responseError(response) {
                if (--requestCounter === 0 && minReached && !hasFired) {
                    handleNGReady();
                }
                return $q.reject(response);
            }
        };
    }

    function config($httpProvider) {
        $httpProvider.interceptors.push('httpInterceptor');
    }
})();
'use strict';

(function () {
    'use strict';

    localizationService.$inject = ["$locale"];
    angular.module('kappGlobal.localization', ['kappGlobal.currencyConfig']).factory('localizationService', localizationService);

    function localizationService($locale) {
        var defaultCurrency = {
            'decimalSep': $locale.NUMBER_FORMATS.DECIMAL_SEP,
            'groupSep': $locale.NUMBER_FORMATS.GROUP_SEP
        };

        return {
            'setCurrencyLocale': setCurrencyLocale
        };

        /**
         * Set currency formatting overrides on the $locale service
         * @param {object} currencyObj The currency object
         */
        function setCurrencyLocale(currencyObj) {
            if (currencyObj.symbol) $locale.NUMBER_FORMATS.CURRENCY_SYM = currencyObj.symbol;
            $locale.NUMBER_FORMATS.DECIMAL_SEP = currencyObj.decimalSep || defaultCurrency.decimalSep;
            $locale.NUMBER_FORMATS.GROUP_SEP = currencyObj.groupSep || defaultCurrency.groupSep;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcService', ['kappGlobal.config']).factory('lrcService', ["$q", "$rootScope", "$http", "ENV", function lrcSrvice($q, $rootScope, $http, ENV) {
        return {
            'searchLicense': function searchLicense(serial, queryParams) {
                var data = [];
                var locale = ENV.locale;
                if (queryParams) angular.extend(data, queryParams);

                if (serial) {
                    // to be refactored
                    return $http.post(ENV.server + '/_svc/lrc.svc/' + locale + '/licenseinfo?serial=' + serial, data);
                } else {
                    var defer = $q.defer();
                    defer.reject('LRC Service: no serial');
                    return defer.promise;
                }
            }
        };
    }]);
})();
'use strict';

/*eslint-disable*/
/*TODO fix this controller if still needed*/
(function () {
    'use strict';

    maxymiser.$inject = ["$rootScope", "$log", "$compile", "$http", "priceData", "$window"];
    angular.module('kappGlobal.maxymiser', ['kappGlobal.priceData']).factory('maxymiser', maxymiser);

    function maxymiser($rootScope, $log, $compile, $http, priceData, $window) {
        return {
            'readComponentData': readComponentData,
            'changeComponentData': changeComponentData,
            'changeComponentTemplate': changeComponentTemplate,
            'prepareModelForDropdown': prepareModelForDropdown,
            'prepareModelForRadio': prepareModelForRadio,
            'fireMMEvent': fireMMEvent
        };

        function readComponentData(componentSelector) {
            var res = [];
            if (componentSelector.length > 30) {
                $log.warn('The number of selected items (' + componentSelector.length + ') exceeds the limit of 30');
                return false;
            }
            for (var i = 0; i < componentSelector.length; i++) {
                $log.log($(componentSelector[i]).children()[0]);

                var eltScope = angular.element($(componentSelector[i]).children()[0]).scope(),
                    eltCtrl = eltScope ? eltScope.$ctrl : undefined;

                $log.log(eltCtrl);
                res.push(eltCtrl);
            }
            return res;
        }

        function changeComponentData(componentSelector, changesObj) {
            if (componentSelector.length > 30) {
                $log.warn('The number of selected items (' + componentSelector.length + ') exceeds the limit of 30');
                return false;
            }
            for (var i = 0; i < componentSelector.length; i++) {
                var scopeCurrent = angular.element($(componentSelector[i]).children()[0]).scope(),
                    scopeNew = {};
                Object.assign(scopeNew, scopeCurrent);
                angular.extend(scopeCurrent.$ctrl, changesObj);
                scopeCurrent.$digest();
            }
        }

        function changeComponentTemplate(componentSelector, template) {
            if (componentSelector.length > 30) {
                $log.warn('The number of selected items (' + componentSelector.length + ') exceeds the limit of 30');
                return false;
            }

            var _loop = function _loop(i) {
                var element = angular.element(componentSelector),
                    scope = angular.element($(componentSelector[i]).children()[0]).scope();
                $http.get('/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-' + template + '.html').then(function (response) {
                    element.html(response.data);
                    $compile(element.contents())(scope);
                });
            };

            for (var i = 0; i < componentSelector.length; i++) {
                _loop(i);
            }
        }

        function prepareModelForDropdown(componentSelector) {
            if (componentSelector.length > 30) {
                $log.warn('The number of selected items (' + componentSelector.length + ') exceeds the limit of 30');
                return false;
            }

            for (var i = 0; i < componentSelector.length; i++) {
                var _scope = angular.element($(componentSelector[i]).children()[0]).scope();
                setDropdownValues(_scope);
                _scope.$ctrl.setCurrentValue = setCurrentValueDropdown;
                _scope.$digest();
            }
        }

        function prepareModelForRadio(componentSelector) {
            if (componentSelector.length > 30) {
                $log.warn('The number of selected items (' + componentSelector.length + ') exceeds the limit of 30');
                return false;
            }

            for (var i = 0; i < componentSelector.length; i++) {
                var _scope2 = angular.element($(componentSelector[i]).children()[0]).scope();
                setRadioValues(_scope2);
                _scope2.$ctrl.setCurrentValue = setCurrentValueRadio;
                _scope2.$digest();
            }
        }

        function setDropdownValues(scope) {
            var ctrl = scope.$ctrl;
            ctrl.packArr = [];
            ctrl.termArr = [];
            if (angular.isObject(ctrl.priceList)) {
                var aFlag = false;
                ctrl.priceList.forEach(function (item) {
                    if (ctrl.priceList[0].autorenew != item.autorenew) aFlag = true;
                    if (ctrl.packArr.indexOf(item.pack) === -1) ctrl.packArr.push(item.pack);
                    if (ctrl.termArr.indexOf(item.term) === -1) ctrl.termArr.push(item.term);
                });

                // if we have only one autorenew and it doesn't match the default one
                if (aFlag == false) {
                    ctrl.showAR = false;
                    ctrl.defaultAutorenew = ctrl.priceList[0].autorenew;
                }
                // when we provided with a number for licenes convert it to string like "1 device" for LRC
                if (ctrl.selectedPack && ctrl.selectedPack.length < 4) {
                    for (var i = 0; i < ctrl.packArr.length; i++) {
                        if (parseInt(ctrl.packArr[i]) === ctrl.selectedPack) {
                            ctrl.selectedPackString = ctrl.packArr[i];
                            break;
                        }
                    }
                }
                // when we provided with a number for terms convert it to string like "2 years" for LRC
                if (ctrl.selectedTerm && ctrl.selectedTerm.length < 4) {
                    for (var _i = 0; _i < ctrl.termArr.length; _i++) {
                        if (parseInt(ctrl.termArr[_i]) === ctrl.selectedTerm) {
                            ctrl.selectedTermString = ctrl.termArr[_i];
                            break;
                        }
                    }
                }

                ctrl.packValue = ctrl.selectedPackString || ctrl.packArr[0];
                ctrl.termValue = ctrl.selectedTermString || ctrl.termArr[0];
                ctrl.autorenew = ctrl.selectedAutorenew || ctrl.defaultAutorenew;
                // Emit Buyblock ready event to currency selector
                $rootScope.buyBlockReady();

                ctrl.setCurrentValue();
            }
        }

        function setCurrentValueDropdown() {
            var _this = this;

            var valueFound = false;
            for (var i in this.priceList) {
                if (this.priceList[i].pack == this.packValue && this.priceList[i].term == this.termValue && this.priceList[i].autorenew == this.autorenew) {
                    this.price_id = this.priceList[i].id;
                    this.product_id = this.priceList[i].product_id;
                    this.currentValue = this.priceList[i];
                    valueFound = true;
                }
            }
            if (!valueFound) {
                //Checking for a value with the opposite autorenewal setting
                for (var _i2 in this.priceList) {
                    if (this.priceList[_i2].pack == this.packValue && this.priceList[_i2].term == this.termValue && this.priceList[_i2].autorenew == !this.autorenew) {
                        this.price_id = this.priceList[_i2].id;
                        this.product_id = this.priceList[_i2].product_id;
                        this.currentValue = this.priceList[_i2];
                        this.autorenew = !this.autorenew;
                        break;
                    }
                }
            }
            // if(!calledFromOtherBuyblock) this.valueToSet = {term:this.termValue,pack:this.packValue,autorenew:this.autorenew};

            if (this.product_id != undefined && this.price_id != undefined) {
                priceData.getCartLink(this.product_id, this.price_id, this.purchaseType).then(function (response) {
                    _this.buyLink = response.data;
                }).catch(function (response) {
                    $log.warn(response);
                    _this.buyLink = 'Oops! Something went wrong';
                });
            } else {
                this.buyLink = 'Oops! Something went wrong';
            }
        }

        function setRadioValues(scope) {
            var ctrl = scope.$ctrl;
            ctrl.cutPriceList = [];
            ctrl.selectedValue = {};

            if (angular.isObject(ctrl.priceList)) {
                var aFlag = false;
                ctrl.priceList.forEach(function (item, i) {
                    if (ctrl.priceList[0].autorenew != item.autorenew) aFlag = true;
                    ctrl.cutPriceList[i] = {
                        'pack': item.pack,
                        'term': item.term,
                        'price': item.price,
                        'autorenew': item.autorenew
                    };
                });
                // if we have only one autorenew and it doesn't match the default one
                // if(this.defaultAutorenew != aFlag) {
                //     this.defaultAutorenew = aFlag;
                // }
                if (aFlag == false) {
                    ctrl.showAR = false;
                    ctrl.defaultAutorenew = ctrl.priceList[0].autorenew;
                }
                ctrl.cutPriceList = ctrl.cutPriceList.sort(function (a, b) {
                    return parseInt(a.pack) - parseInt(b.pack);
                });

                var tempObj = [];
                var tempPrice = [];
                var rememberPack = ctrl.cutPriceList[0].pack;
                ctrl.cutPriceList.forEach(function (item, i) {

                    if (item.pack == rememberPack) {
                        tempObj.push(item);
                        if (i == ctrl.cutPriceList.length - 1) {
                            tempObj.sort(function (a, b) {
                                return parseInt(a.term) - parseInt(b.term);
                            });
                            tempObj.forEach(function (item) {
                                tempPrice.push(item);
                            });
                            tempObj = [];
                        }
                    } else {
                        tempObj.sort(function (a, b) {
                            return parseInt(a.term) - parseInt(b.term);
                        });
                        tempObj.forEach(function (item) {
                            tempPrice.push(item);
                        });
                        tempObj = [];
                        tempObj.push(item);

                        if (i === ctrl.cutPriceList.length - 1) {
                            tempPrice.push(item);
                        }
                    }
                    rememberPack = item.pack;
                });

                ctrl.cutPriceList = tempPrice;

                if (ctrl.product.bbSettings) {
                    if (ctrl.product.bbSettings.selectedPack) {
                        for (var i in ctrl.cutPriceList) {
                            if (parseInt(ctrl.cutPriceList[i].pack) == ctrl.product.bbSettings.selectedPack) {
                                ctrl.selectedPack = ctrl.cutPriceList[i].pack;
                            }
                        }
                    }
                    if (ctrl.product.bbSettings.selectedTerm) {
                        for (var _i3 in ctrl.cutPriceList) {
                            if (parseInt(ctrl.cutPriceList[_i3].term) == ctrl.product.bbSettings.selectedTerm) {
                                ctrl.selectedTerm = ctrl.cutPriceList[_i3].term;
                            }
                        }
                    }
                }

                ctrl.selectedValue.pack = ctrl.selectedPack || ctrl.cutPriceList[0].pack;
                ctrl.selectedValue.term = ctrl.selectedTerm || ctrl.cutPriceList[0].term;
                ctrl.autorenew = ctrl.defaultAutorenew;
                ctrl.selectedValue = JSON.stringify(ctrl.selectedValue);
                // Emit Buyblock ready event to currency selector
                $rootScope.buyBlockReady();

                ctrl.setCurrentValue();
            }
        }

        function setCurrentValueRadio() {
            var _this2 = this;

            this.selectedValueObject = JSON.parse(this.selectedValue);
            for (var i in this.priceList) {
                if (this.priceList[i].pack == this.selectedValueObject.pack && this.priceList[i].term == this.selectedValueObject.term && this.priceList[i].autorenew == this.autorenew) {
                    this.price_id = this.priceList[i].id;
                    this.product_id = this.priceList[i].product_id;
                    this.currentValue = this.priceList[i];
                }
            }
            this.setBuyblockValueByProduct({ 'product': this.productShortName, 'term': this.selectedValueObject.term, 'pack': this.selectedValueObject.pack, 'autorenew': this.autorenew });
            priceData.getCartLink(this.product_id, this.price_id, this.purchaseType).then(function (response) {
                _this2.buyLink = response.data;
            }).catch(function (response) {
                $log.warn(response);
                _this2.buyLink = 'Oops! Something went wrong';
            });
        }

        function fireMMEvent() {
            var mmDOMReady = $window.document.createEvent('Event');
            mmDOMReady.initEvent('mmDOMReady', true, true);
            $window.document.dispatchEvent(mmDOMReady);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    messageFormatService.$inject = ["$window", "angularLoad", "$locale"];
    angular.module('kappGlobal.messageFormat', []).factory('messageFormatService', messageFormatService);

    /**
     * MessageFormat service, lazy loads the dependency provides compile feature.
     *
     * https://messageformat.github.io/messageformat/
     */
    function messageFormatService($window, angularLoad, $locale) {

        var messageFormatLoad = angularLoad.loadScript('resources/template/js/messageformat.js').then(function () {
            return new $window.MessageFormat($locale.localeID);
        });

        return {
            compile: compile
        };

        /**
         * @param  {Object} format object to compile
         * @return {Promise} MessageFormat compiled format
         */
        function compile(format) {
            return messageFormatLoad.then(function (messageFormat) {
                return messageFormat.compile(format);
            });
        }
    }
})();
'use strict';

(function () {
    osDetectService.$inject = ["$location"];
    angular.module('kappGlobal.osDetect', []).factory('osDetectService', osDetectService);

    function osDetectService($location) {

        return {
            'getCurrentOs': getCurrentOs,
            'getCurrentOsHash': getCurrentOsHash,
            'findOSInArray': findOSInArray
        };

        function getCurrentOsHash() {
            return $location.hash();
        }

        function findOSInArray(array, item) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === item) return i;
            }
            return -1;
        }

        function getCurrentOs(hash) {
            var OSDetected = {
                'device': {
                    'type': 'pc',
                    'subDevice': {
                        'os': ''
                    }
                }
            };

            if (hash === 'pc' || hash === 'mac' || hash === 'mobile' || hash === 'ios' || hash === 'android' || hash === 'all') {

                // populate return value if hash of device is set and used as a parameter

                OSDetected.device.type = hash;
            } else {
                var os = navigator.platform;

                // otherwise detect os

                if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i)) {
                    OSDetected.device.type = 'mobile';

                    if (navigator.userAgent.match(/Android/i)) {
                        OSDetected.device.subDevice.os = 'android';
                    }

                    if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i)) {
                        OSDetected.device.subDevice.os = 'ios';
                    }
                }

                if (os.indexOf('Win') !== -1) {
                    OSDetected.device.type = 'pc';
                } else if (os.indexOf('Mac') !== -1) {
                    OSDetected.device.type = 'mac';
                }
            }

            return OSDetected;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    pageInfoService.$inject = ["$http", "ENV"];
    angular.module('kappGlobal.pageInfoModule', ['kappGlobal.config']).factory('pageInfoService', pageInfoService);

    function pageInfoService($http, ENV) {
        var pageInfoUrl = ENV.server + '/_svc/page/';
        return {
            'ipInfo': ipInfo,
            'hasRoute': hasRoute
        };

        function ipInfo(url, languages) {
            url = encodeURIComponent(url) || '';
            languages = languages || '';

            return $http.get(pageInfoUrl + 'ipinfo?url=' + url + '&languages=' + languages);
        }

        function hasRoute(url) {
            url = encodeURIComponent(url) || ENV.server;
            return $http.get(pageInfoUrl + 'hasroute?url=' + url);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    priceDataFactory.$inject = ["$http", "$rootScope", "ENV", "tracking"];
    angular.module('kappGlobal.priceData', ['kappGlobal.config']).factory('priceData', priceDataFactory);

    function priceDataFactory($http, $rootScope, ENV, tracking) {
        var serverUrlPriceService = ENV.server + '/_svc/price.svc/';

        return {
            'currency': currency,
            'estore': estore,
            'getPrice': getPrice,
            'getCartLink': getCartLink,
            'products': products,
            'purchase': purchase
        };

        function currency() {
            var locale = $rootScope.currencyLocale || ENV.locale;
            return $http.get('' + serverUrlPriceService + locale + '/currency/list', { 'cache': true });
        }

        function estore() {
            var locale = $rootScope.currencyLocale || ENV.locale;
            return $http.get('' + serverUrlPriceService + locale + '/estore/list', { 'cache': true });
        }

        function getPrice(productName, purchaseType, currency, estore) {
            purchaseType = purchaseType || 'purchase';
            estore = estore || '';
            currency = currency || $rootScope.currency || '';
            productName = encodeURIComponent(productName);
            estore = encodeURIComponent(estore);

            var url = getPriceUrl(purchaseType, productName, currency, estore);
            return $http.get(url, { 'cache': false });
        }

        function getCartLink(product_id, price_id, purchaseType, productName, resellerOverride) {
            return getCartLinkUrl(purchaseType, product_id, price_id, productName, resellerOverride).then(function (url) {
                return $http.get(url, { 'cache': true });
            });
        }

        function products() {
            var locale = $rootScope.currencyLocale || ENV.locale;
            return $http.get('' + serverUrlPriceService + locale + '/product/list', { 'cache': true });
        }

        function purchase() {
            var locale = $rootScope.currencyLocale || ENV.locale;
            return $http.get('' + serverUrlPriceService + locale + '/product/list', { 'cache': true });
        }

        // Helper methods
        function getCartLinkUrl(purchaseType, productId, priceId, productName, resellerOverride) {
            var locale = $rootScope.currencyLocale || ENV.locale;
            return estore().then(function (response) {
                var regKey = $rootScope.regKey,
                    serial = $rootScope.kaspersky.serialNumber,
                    storeArgs = tracking.formatQueryString('', undefined, response.data, resellerOverride),
                    productCheckoutUrl = '' + serverUrlPriceService + locale + '/product/checkout?id=' + productId + '&price_id=' + priceId + '&store_args=' + storeArgs;

                if (purchaseType === 'Renewal' && serial) {
                    return regKey ? productCheckoutUrl + '&serial=' + serial + '&regkey=' + regKey : productCheckoutUrl + '&serial=' + serial;
                }
                if ((productName === 'ksc-family' || productName === 'ksc-personal') && serial) {
                    return productCheckoutUrl + '&serial=' + serial;
                }
                return productCheckoutUrl;
            });
        }

        function getPriceUrl(purchaseType, productName, currency, estore) {
            // currency = currency || $rootScope.currency || '';
            var locale = $rootScope.currencyLocale || ENV.locale;
            var defaultPurchaseUrl = '' + serverUrlPriceService + locale + '/product/price?name=' + productName + '&ptype=' + purchaseType + '&currency=' + currency + '&estore=' + estore,
                serial = $rootScope.kaspersky.serialNumber;
            return purchaseType === 'Renewal' && serial ? defaultPurchaseUrl + '&serial=' + serial : defaultPurchaseUrl;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.productData', []).factory('productData', ["$http", "ENV", function ($http, ENV) {
        return {
            'getb2c': function getb2c(product) {
                return $http.get('content/' + ENV.locale + '/home-security/products/' + product + '/' + product + '.json', { 'cache': true });
            },
            'getvsb': function getvsb(product) {
                return $http.get('content/' + ENV.locale + '/small-business-security/products/' + product + '/' + product + '.json', { 'cache': true });
            },
            'getsmb': function getsmb(product) {
                return $http.get('content/' + ENV.locale + '/small-to-medium-business-security/products/' + product + '.json', { 'cache': true });
            },
            'getcusjsonb2b': function getcusjsonb2b(section, product) {
                return $http.get('content/' + ENV.locale + '/' + section + '/products/' + product + '.json', { 'cache': true });
            }
        };
    }]);
})();
'use strict';

(function () {
    'use strict';

    productDownloadHelper.$inject = ["CURRENCY"];
    angular.module('kappGlobal.productDownloadHelper', ['kappGlobal.currencyConfig']).factory('productDownloadHelper', productDownloadHelper);

    function productDownloadHelper(CURRENCY) {
        return {
            'constructLocale': constructLocale,
            'constructUpdateFields': constructUpdateFields,
            'getApplication': getApplication,
            'getDownloadLocales': getDownloadLocales,
            'getDocSettings': getDocSettings,
            'getFieldsToUpdate': getFieldsToUpdate,
            'getRegionLocale': getRegionLocale
        };

        function getDownloadLocales() {
            return CURRENCY.regions;
        }

        function constructLocale(region) {
            if (angular.isUndefined(region)) return {};
            var values = region.locale.split('-');
            return {
                'language': values[0],
                'selectedCountryCode': region.selectedCountryCode,
                'selectedLanguages': region.selectedLanguages
            };
        }

        function constructUpdateFields(localeSelectionType, selectedLanguagesCodes, countryCode, languageCode) {
            return {
                'localeSelectionType': localeSelectionType,
                'selectedLanguagesCodes': selectedLanguagesCodes,
                'countryCode': countryCode,
                'languageCode': languageCode
            };
        }

        function getFieldsToUpdate(fields) {
            return {
                'locale_selection_type': fields.localeSelectionType,
                'selected_languages_codes': fields.selectedLanguagesCodes.trim(),
                'website_country_code': fields.countryCode,
                'website_language_code': fields.languageCode
            };
        }

        function getDocSettings(application, docFieldsToUpdate, componentSettings) {
            return {
                'applications': application,
                'options': {
                    'links_type': componentSettings.linksType,
                    'locale_selection_type': docFieldsToUpdate.localeSelectionType || 'Country',
                    'selected_languages_codes': getSelectedLanguages(docFieldsToUpdate.selectedLanguages, componentSettings.selectedLanguagesCodes),
                    'fallback_language_code': 'en',
                    'website_country_code': docFieldsToUpdate.selectedCountryCode || 'Global',
                    'website_language_code': docFieldsToUpdate.language || 'en',
                    'website_fallback_language': 'en',
                    'lang_locale_link_selection_amount': null,
                    'show_release_version_type': null,
                    'use_aux_lang_for_app_plugins': null
                }
            };
        }

        function getApplication(componentData) {
            if (angular.isUndefined(componentData) || componentData === null) return [];
            var productTaxonomy = componentData['productTaxonomy'];
            if (!productTaxonomy.length) return componentData.product.split(',') || [];
            var productTaxonomyKeys = [];
            productTaxonomy.map(function (product) {
                productTaxonomyKeys.push(product['key']);
            });
            return productTaxonomyKeys;
        }

        function getSelectedLanguages(value, fallback) {
            return angular.isDefined(value) ? value : fallback;
        }

        function getRegionLocale(region) {
            var regionLocale = region['locale'].split('-');
            return { 'languageCode': regionLocale[0], 'countryCode': regionLocale[1] };
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.searchService', ['kappGlobal.config']).factory('searchService', ["$http", "ENV", function ($http, ENV) {
        var serverUrlPriceService = ENV.server + '/_svc/search.svc/';
        return {
            'search': function search(queryText, lCode, cCode) {
                var languageCode = lCode || 'en',
                    countryCode = cCode || 'global',
                    section = '',
                    sortType = '';

                return $http.get(serverUrlPriceService + 'Search?query=' + queryText + '&languageCode=' + languageCode + '&countryCode=' + countryCode + '&sec=' + section + '&sort=' + sortType);
            },
            'getDataPage': function getDataPage(searchId, pageNumber) {
                searchId = searchId || '';
                pageNumber = pageNumber || 1;
                return $http.get(serverUrlPriceService + 'GetDataPage?searchId=' + searchId + '&pageNumber=' + pageNumber);
            },
            'getNavigators': function getNavigators(searchId) {
                searchId = searchId || '';
                return $http.get(serverUrlPriceService + 'GetNavigators?searchId=' + searchId);
            }
        };
    }]);
})();
'use strict';

(function () {
    'use strict';

    templateVersion.$inject = ["$http", "$q", "ENV", "sessionStorageService", "errorService"];
    angular.module('kappGlobal.templateVersion', ['kappGlobal.config']).factory('templateVersion', templateVersion);
    function templateVersion($http, $q, ENV, sessionStorageService, errorService) {
        return {
            'getVer': getVer
        };

        function returnCached(cachedData, deferred) {
            deferred.resolve(cachedData);
            return deferred.promise.then(function (cachedData) {
                return cachedData;
            }, function (error) {
                return deferred.reject(error);
            });
        }

        function getVer(siteLet, comp, compOverride) {
            var cachedData = sessionStorageService.get('templVer[' + siteLet + ']'),
                deferred = $q.defer();

            if (cachedData && !compOverride) {
                returnCached(cachedData, deferred);
            }

            var res = '';
            return $http.get('/content/' + ENV.locale + '/' + siteLet + '/' + comp + '.json').then(function (response) {
                res = response;
                if (compOverride) {
                    return $http.get('/content/' + ENV.locale + '/' + siteLet + '/' + compOverride + '.json').then(function (responseOverride) {
                        if (responseOverride.data.fields.template && responseOverride.data.fields.template !== 'noOverride') {
                            res = responseOverride;
                        } else if (cachedData) {
                            returnCached(cachedData, deferred);
                        }
                        return res;
                    }, function (rejection) {
                        errorService.warn(rejection);
                    });
                }
                sessionStorageService.set('templVer[' + siteLet + ']', res);
                return res;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    tracking.$inject = ["$rootScope", "localStorageService", "cookieService", "appHelperService", "sessionStorageService"];
    angular.module('kappGlobal.tracking', []).factory('tracking', tracking);

    function tracking($rootScope, localStorageService, cookieService, appHelperService, sessionStorageService) {
        var adobeParams = ['aclid', 'acregion', 'acaid', 'acipmccid', 'acaiid', 'acmid', 'acbid'];
        var admitadParams = ['admitad_uid', 'admitad_aid'];

        return {
            'formatQueryString': formatQueryString,
            'stripBuyLinkParams': stripBuyLinkParams,
            'setAdobeCampaignValues': setAdobeCampaignValues,
            'setTrackingCookie': setTrackingCookie,
            'setAdmitadRefererParams': setAdmitadRefererParams
        };

        function formatQueryString() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var hasPurchaseAsPurchaseType = arguments[1];
            var estoreProviders = arguments[2];
            var resellerOverride = arguments[3];

            /* TODO: URL related stuff is left for compatibility, just in case
             only this shall be returned encodeURIComponent(queryString + urlObj.hash)
             */
            resellerOverride ? sessionStorageService.set('resellerOverride', resellerOverride) : sessionStorageService.set('resellerOverride', '');

            var urlArray = url ? decodeURIComponent(url).match(/(\w+):\/\/([\w.]+)\/([\w.\-\s/+]*)(\?(.*))?(#.*)?$/) : [],
                validatedUrlArray = validateUrlArray(urlArray),
                urlObj = getUrlObject(validatedUrlArray),
                salesTrackingMapping = getSalesTrackingMapping(estoreProviders),
                queryStringAppendix = setQueryString(salesTrackingMapping, hasPurchaseAsPurchaseType);

            var queryString = '';
            if (urlObj.queryString === '' && queryStringAppendix !== '') queryString = '?' + queryStringAppendix.substr(1);
            if (urlObj.queryString !== '' && queryStringAppendix !== '') queryString = '?' + urlObj.queryString + '&' + queryStringAppendix.substr(1);
            return url ? url : encodeURIComponent(queryString + urlObj.hash);
        }

        function stripBuyLinkParams(url, stripArr) {
            stripArr = stripArr || getDefaultStripArray();
            // if second parameter is not an array return original value
            if (!angular.isArray(stripArr)) return url;
            if ($rootScope.kaspersky.kpc === 'subaccount') {
                stripArr.push('sn');
                stripArr.push('regKey');
            }
            var arr = [],
                splitUrl = url.split(/(?=[;?&#])/);
            for (var i = 0, length = splitUrl.length; i < length; i++) {
                arr.push(splitUrl[i].split('='));
            }
            return arr.filter(function (item) {
                var modded = item[0].slice(1);
                return stripArr.indexOf(modded) === -1;
            }).map(function (item, index) {
                return item[0] + (index === 0 ? '?' : '') + (angular.isDefined(item[1]) ? '=' + item[1] : '');
            }).join('').replace('??', '?');
        }

        function setTrackingCookie() {
            var searchParam = appHelperService.searchParam('klsiteclass');
            if (searchParam) cookieService.set('klsiteclass', searchParam, 90);
        }

        function setAdobeCampaignValues() {
            angular.forEach(adobeParams, function (param) {
                var searchParam = appHelperService.searchParam(param);
                if (searchParam) localStorageService.set(param, searchParam, 60);
            });
        }

        function setAdmitadRefererParams() {
            angular.forEach(admitadParams, function (param) {
                var refererParam = appHelperService.searchParam(param);
                if (refererParam) cookieService.set(param, refererParam, 60);
            });
        }

        // Helper methods
        function matchProvider(estoreProviders) {
            var defaultProvider = $rootScope.kaspersky.eCommProvider;
            if (angular.isUndefined(estoreProviders) || !estoreProviders.length) return [defaultProvider];
            var array = [],
                knownProviders = ['Allsoft', 'Softkey', 'Avangate', 'Digital River', 'Nexway'];
            estoreProviders.forEach(function (provider) {
                for (var i = 0, length = knownProviders.length; i < length; i++) {
                    var item = knownProviders[i],
                        matched = provider.match(item);
                    if (matched && matched.length && array.indexOf(item) === -1) {
                        array.push(item);
                        continue;
                    }
                    if (array.indexOf(defaultProvider) === -1) {
                        array.push(defaultProvider);
                    }
                }
            });
            return array;
        }

        function extendSalesTrackingMapping(salesTrackingMapping, estoreProviders) {
            var providers = matchProvider(estoreProviders);
            providers.forEach(function (item) {
                switch (item) {
                    case 'Allsoft':
                    case 'Softkey':
                        salesTrackingMapping = angular.extend(salesTrackingMapping, getSoftKeyObject());
                        break;
                    case 'Avangate':
                        salesTrackingMapping = angular.extend(salesTrackingMapping, getAvangateObject());
                        break;
                    case 'Digital River':
                        salesTrackingMapping = angular.extend(salesTrackingMapping, getDigitalRiverObject());
                        break;
                    case 'Nexway':
                        salesTrackingMapping = angular.extend(salesTrackingMapping, getNexwayObject());
                        break;
                    default:
                        salesTrackingMapping = angular.extend(salesTrackingMapping, getDigitalRiverObject());
                        break;
                }
            });
            return salesTrackingMapping;
        }

        function getFormattedPageName() {
            // Get the pageName from the kaspersky object, replacing all ' > ' strings with a '_' and all strings
            // formed by non-latin characters, non-cyrillic characters, not numbers and not '_' with a '-'
            if ($rootScope.kaspersky.pageName) return $rootScope.kaspersky.pageName.replaceAll(' > ', '_').replace(/[^\wа-я]+/ig, '-');
        }

        function getSalesTrackingMapping(estoreProviders) {
            var salesTrackMap = extendSalesTrackingMapping(getSalesTrackMapDefaultObject(), estoreProviders);
            salesTrackMap = getAdobeCampaignValues(salesTrackMap);
            return salesTrackMap;
        }

        function getParamsToSearch() {
            return ['affiliate', 'reseller', 'typnews', 'omcampaign', 'ADDITIONAL_reseller', 'campaign', 'cid', 'referer2'];
        }

        function getQueryStringAppendix(queryString, key, value) {
            return queryString + '&' + key + '=' + value;
        }

        function getAdobeCampaignValues(salesTrackingMapper) {
            angular.forEach(adobeParams, function (param) {
                salesTrackingMapper[param] = appHelperService.searchParam(param) || localStorageService.get(param);
            });
            return salesTrackingMapper;
        }

        function getUrlObject(urlArray) {
            return {
                'protocol': urlArray[1],
                'host': urlArray[2],
                'path': urlArray[3],
                'queryString': urlArray[5],
                'hash': urlArray[6]
            };
        }

        function getSalesTrackMapDefaultObject() {
            return {
                'aclid': '',
                'acregion': '',
                'acaid': '',
                'acipmccid': '',
                'acaiid': '',
                'acmid': '',
                'acbid': '',
                'klsiteclass': setParameterValue('klsiteclass'),
                'p4s_p_push_subscriber_id': setParameterValue('p4s_p_push_subscriber_id')
            };
        }

        function getSoftKeyObject() {
            return {
                'referer2': setParameterValue('campaign'),
                'referer6': setParameterValue('spage'),
                'referer3': setParameterValue('channel'),
                'referer4': setParameterValue('sku'),
                'referer5': setParameterValue('admitad_uid'),
                'regkey': setParameterValue('regKey'),
                'spage': setParameterValue('spage')
            };
        }

        function getAvangateObject() {
            return {
                'ADDITIONAL_reseller': setParameterValue('campaign'),
                'ADDITIONAL_spage': setParameterValue('spage'),
                'ADDITIONAL_channel': setParameterValue('channel'),
                'ADDITIONAL_pnumber': setParameterValue('sku'),
                'ADDITIONAL_regkey': setParameterValue('regKey'),
                'ADDITIONAL_sn': setParameterValue('serial')
            };
        }

        function getDigitalRiverObject() {
            return {
                'affiliate': setParameterValue('campaign'),
                'spage': setParameterValue('spage'),
                'channel': setParameterValue('channel'),
                'pnumber': setParameterValue('sku'),
                'regkey': setParameterValue('regKey'),
                'pgm': setParameterValue('pgm')
            };
        }

        function getNexwayObject() {
            return {
                'typnews': setParameterValue('campaign'),
                'spage': setParameterValue('spage'),
                'channel': setParameterValue('channel'),
                'pnumber': setParameterValue('sku'),
                'regkey': setParameterValue('regKey')
            };
        }

        function getDefaultStripArray() {
            return ['affiliate', 'typnews', 'reseller', 'spage', 'channel', 'pnumber', 'ADDITIONAL_reseller', 'ADDITIONAL_spage', 'ADDITIONAL_channel', 'ADDITIONAL_pnumber', 'referrer2', 'referrer3', 'referrer4', 'referrer6'];
        }

        function setParameterValue(id) {
            var res = '';
            switch (id) {
                case 'campaign':
                    res = appHelperService.searchParam(getParamsToSearch()) || cookieService.get('omCampaign') || sessionStorageService.get('resellerOverride') || '';
                    break;
                case 'spage':
                    res = getFormattedPageName();
                    break;
                case 'channel':
                    res = $rootScope.kaspersky.verdictChannel || '';
                    break;
                case 'sku':
                    res = $rootScope.kaspersky.verdictPartNumber || '';
                    break;
                case 'regKey':
                    res = $rootScope.kaspersky.regKey || '';
                    break;
                case 'pgm':
                    res = appHelperService.searchParam('pgm') || '';
                    break;
                case 'klsiteclass':
                    res = cookieService.get('klsiteclass') || '';
                    break;
                case 'admitad_uid':
                    res = cookieService.get('admitad_uid') || '';
                    break;
                case 'serial':
                    res = $rootScope.kaspersky.serialNumber || '';
                    break;
                case 'p4s_p_push_subscriber_id':
                    res = cookieService.get('p4s_push_subscriber_id') || '';
            }
            return res;
        }

        function setQueryString(salesTrackingMapper, hasPurchaseAsPurchaseType) {
            var queryString = '';
            for (var key in salesTrackingMapper) {
                var value = salesTrackingMapper[key];
                if (value) {
                    if (key === 'regkey' && hasPurchaseAsPurchaseType) continue;
                    queryString = getQueryStringAppendix(queryString, key, value);
                }
            }
            return queryString;
        }

        function validateUrlArray(urlArray) {
            urlArray = urlArray || [];
            var length = urlArray.length ? urlArray.length : 7;
            for (var i = 1, len = length; i < len; i++) {
                if (angular.isUndefined(urlArray[i])) urlArray[i] = '';
            }
            return urlArray;
        }
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.accordion', []);
})();
'use strict';

ajaxSpinner.$inject = ["$http"];
angular.module('kappGlobal.ajaxSpinner', []).directive('ajaxSpinner', ajaxSpinner);

function ajaxSpinner($http) {
    return {
        'restrict': 'ACE',
        'templateUrl': '/resources/template/html/modules/_shared/components/ajax-spinner/templates/ajax-spinner.html',
        'link': function link(scope) {
            scope.isLoading = function () {
                return $http.pendingRequests.length > 0;
            };

            scope.$watch(scope.isLoading, function (v) {
                if (v) {
                    $('#spinner').show();
                } else {
                    $('#spinner').hide();
                }
            });
        }
    };
}
'use strict';

(function () {
    angular.module('kappGlobal.articlesSection', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.awardsSection', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.bazaarVoice', ['kappGlobal.paginationModule', 'kappGlobal.caching']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.bottomBanner', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.buyblocks', ['kappGlobal.productData', 'kappGlobal.tracking', 'kappGlobal.messageFormat']).directive('buyblockProductShortDesc', function () {
        return {
            'replace': true, // prevent nesting in an element to avoid side effect on existing css
            'scope': {
                'product': '='
            },
            'template': '<p ng-bind-html="product.overrideProdDescLrc || product.shortDesc | html" data-test="buyblock-desc--{{product.shortName}}"></p>'
        };
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.callbackForm', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.compareTable', ['kappGlobal.directiveData', 'kappGlobal.osDetect']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo', ['duScroll', 'kappGlobal.config', 'kappGlobal.mapper', 'kappGlobal.contentRepoCatConfig', 'kappGlobal.imageManager', 'kappGlobal.caching']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.cookiesRequirement', ['kappGlobal.caching']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.currencySelector', ['kappGlobal.currencyManager']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.customCarousel', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.customHtml', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.doubleBanner', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.downloadBlock', ['kappGlobal.downloadLinksFactory', 'kappGlobal.productData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.downloadBlockFeatured', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.errorAnimation', []).component('errorAnimation', {
        'templateUrl': '/resources/template/html/modules/_shared/components/error-animation/templates/error-animation.html'
    });
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.eula', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.featureSection', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.featuredProducts', ['kappGlobal.priceData', 'kappGlobal.osDetect']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.featuresGrid', []);
})();
'use strict';

(function () {

    angular.module('kappGlobal.filters', ['ngSanitize']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc', ['kappGlobal.directiveData', 'kappGlobal.productData', 'kappGlobal.tracking']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmcUniversal', ['kappGlobal.directiveData', 'ngDialog']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.homepageBanner', ['kappGlobal.directiveData', 'kappGlobal.searchService']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.kssVerdictHeader', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcDisclaimers', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcSerial', ['kappGlobal.directiveData', 'kappGlobal.lrcService', 'ngMessages']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcStepsSec', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcSteps', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.lrcVerdictPage', ['kappGlobal.directiveData', 'kappGlobal.productData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.malwareStats', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.mobileNav', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.newsLetterOptIn', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.newsLetterPopup', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.notificationBarGeo', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.pageHeader', ['kappGlobal.directiveData', 'kappGlobal.env']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.paginationModule', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.arPopup', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.popup', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.premiumServices', ['kappGlobal.directiveData', 'ngSanitize']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.productPromo', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.productScriptsInjector', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.productUpdates', ['kappGlobal.directiveData', 'kappGlobal.downloadLinksFactory', 'kappGlobal.productData', 'kappGlobal.productDownloadHelper', 'kappGlobal.geoLocationManager']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.productUpdatesPack', ['kappGlobal.directiveData', 'kappGlobal.productData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.promoSection', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.renewAndAbout', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.resourceDocuments', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.rss', ['kappGlobal.config', 'kappGlobal.contentRepo', 'kappGlobal.mapper', 'kappGlobal.imageManager', 'kappGlobal.caching']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.search', ['kappGlobal.config', 'ngSanitize']);
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.siteBar', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.footerGlobal', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.siteHeader', ['kappGlobal.directiveData', 'kappGlobal.currencyManager']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.socialSharing', ['720kb.socialshare']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.statsWidget', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.tabbedSectionBuyblock', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.trustpilotReviews', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    angular.module('kappGlobal.vpnProhibitedMessage', ['kappGlobal.geoLocationManager']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.caching', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.dynamicModelBinding', []);
})();
'use strict';

/*eslint angular/window-service: 0*/
(function () {
    'use strict';

    errorHttpInterceptor.$inject = ["$q"];
    exceptionHandler.$inject = ["$log"];
    angular.module('kappGlobal.errorHandler', []).factory('errorHttpInterceptor', errorHttpInterceptor).factory('$exceptionHandler', exceptionHandler).config(['$httpProvider', httpProvider]);

    function errorHttpInterceptor($q) {
        return {
            'responseError': function responseError(rejection) {
                // if (isProd() && rejection.status !== 404 && !window.customFlag) {
                //     Rollbar.error(`Rejection: ${rejection.status} ${rejection.statusText}`, {'error': rejection});
                // }
                return $q.reject(rejection);
            }
        };
    }

    function exceptionHandler($log) {
        return function errorCatcherHandler() {
            if (!isProd()) return $log.error.apply($log, arguments);
            // Rollbar.error(exception, {'cause': cause});
        };
    }

    function httpProvider($httpProvider) {
        $httpProvider.interceptors.push('errorHttpInterceptor');
    }

    function isProd() {
        var isDebug = location.search.split('debug=')[1];
        return !window.location.host.match(/ngdev|ngtst|ngtest|stg|localhost|127.0.0.1/) && !isDebug || isDebug === 'prod';
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.helpers', []);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.helpers').factory('stringHelper', stringHelper);

    function stringHelper() {
        return {
            'toTitleCase': toTitleCase,
            'replaceSpamText': replaceSpamText,
            'replaceDmToSpam': replaceDmToSpam
        };
    }

    /**
    * Formats a string to title case. RU requires only the first character of the first word to be title case
    * @param  {string}  str  The string to formata
    * @param  {Boolean} isRu Whether the locale is ru-ru or not
    * @return {string}       The formatted string
    */
    function toTitleCase(str, isRu) {
        var expression = isRu ? /([\wа-яА-Я\s]*)/ : /[\wа-яА-Я]\S*/g;
        return str.replace(expression, function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    }

    function replaceSpamText(text) {
        return caseInsensitiveReplace(text, 'spam', 'dm');
    }

    function replaceDmToSpam(text) {
        return caseInsensitiveReplace(text, 'dm', 'spam');
    }

    function caseInsensitiveReplace(text, searchMask, replaceMask) {
        var regEx = new RegExp(searchMask, 'ig');
        return text.replace(regEx, replaceMask);
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.helpers').factory('validationHelper', validationHelper);

    function validationHelper() {
        return {
            'isNullOrUndefined': isNullOrUndefined
        };

        function isNullOrUndefined(val) {
            return _.isNull(val) || _.isUndefined(val);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.imageManager', ['kappGlobal.caching', 'kappGlobal.config']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.mapper', ['kappGlobal.imageManager']);
})();
'use strict';

/**
 * Created by Fedotov_Al on 17.10.2016.
 */
(function () {
  'use strict';

  angular.module('kappGlobal.ngSrcLocaleHack', []);
})();
'use strict';

/*eslint-disable*/
/* TODO: improve this code + linting*/
!function (window) {
    var getModule = function getModule(angular) {
        return angular.module('seo', []).run(['$rootScope', function ($rootScope) {
            $rootScope.htmlReady = function () {
                $rootScope.$evalAsync(function () {
                    // fire after $digest
                    setTimeout(function () {
                        // fire after DOM rendering
                        if (typeof window.callPhantom === 'function') {
                            window.callPhantom();
                        }
                    }, 0);
                });
            };
        }]);
    };
    if (typeof define === 'function' && define.amd) define(['angular'], getModule);else getModule(angular);
}(window);
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.storyList', []);
})();
'use strict';

(function () {
    angular.module('kappGlobal.preiumService', ['directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.promoComparisonChart', ['kappGlobal.directiveData', 'kappGlobal.osDetect']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about', ['ngSanitize', 'kappGlobal.pageHeader', 'kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2b', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c', ['ngSanitize', 'kappGlobal.bazaarVoice', 'kappGlobal.directiveData', 'kappGlobal.downloadLinksFactory', 'kappGlobal.productDownloadHelper', 'kappGlobal.productData', 'kappGlobal.buyblocks']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners', ['kappGlobal.directiveData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.smb', ['kappGlobal.directiveData', 'kappGlobal.downloadLinksFactory', 'kappGlobal.productData']);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.vsb', ['kappGlobal.directiveData', 'kappGlobal.downloadLinksFactory', 'kappGlobal.productData']);
})();
'use strict';

(function () {
    'use strict';

    aboutController.$inject = ["directiveData", "$element", "errorService"];
    angular.module('kappGlobal.about').controller('aboutController', aboutController);

    function aboutController(directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var elementName = $element['context'].localName;
            return directiveData.getByUrl(elementName).then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    b2bController.$inject = ["directiveData", "$element", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bController', b2bController);

    function b2bController(directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var elementName = $element['context'].localName;
            return directiveData.getByUrl(ctrl.resource || elementName).then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    b2cController.$inject = ["directiveData", "$element", "errorService"];
    angular.module('kappGlobal.b2c').controller('b2cController', b2cController);

    function b2cController(directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var elementName = ctrl.contentName || $element['context'].localName;
            return directiveData.getByUrl(elementName).then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    enterpriseController.$inject = ["directiveData", "$element", "errorService"];
    angular.module('kappGlobal.enterprise').controller('enterpriseController', enterpriseController);

    function enterpriseController(directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var elementName = ctrl.contentName || ctrl.resource || $element['context'].localName;
            return directiveData.getByUrl(elementName).then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    sharedGetByNameController.$inject = ["directiveData", "$element", "errorService"];
    angular.module('kappGlobal').controller('sharedGetByNameController', sharedGetByNameController);

    function sharedGetByNameController(directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var elementName = ctrl.contentName || ctrl.resource || $element['context'].localName;
            return directiveData.getByUrl(elementName).then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    repoMapper.$inject = ["imageManagerService"];
    angular.module('kappGlobal.mapper', ['kappGlobal.imageManager']).factory('repoMapper', repoMapper);

    function repoMapper(imageManagerService) {
        var _categoryNameSplitter = '::';

        return {
            'mapRepositoryLinkFields': mapRepositoryLinkFields,
            'mapRepositoryHeaderFields': mapRepositoryHeaderFields,
            'mapBlogFields': mapBlogFields,
            'mapBlogResourceFields': mapBlogResourceFields,
            'mapResourcesFields': mapResourcesFields
        };

        function mapRepositoryLinkFields(linkResponse, url) {
            return {
                'body': linkResponse['fields']['body'],
                'boost': linkResponse['fields']['boost'],
                'category': mapCategory(linkResponse['fields']['category']),
                'categoryName': getTitle(linkResponse['fields']['category']),
                'date_publication_start': linkResponse['fields']['date_publication_start'],
                'image': imageManagerService.getResourceImage(linkResponse),
                'thumb': imageManagerService.getResourceThumb(linkResponse),
                'id': linkResponse['id'],
                'labels': linkResponse['fields']['labels'],
                'link': mapLinkFields(linkResponse['fields']['link']),
                'pubDate': new Date(linkResponse['pubdate']),
                'repository_type': linkResponse['fields']['repository_type'],
                'schemaName': linkResponse['schemaName'],
                'subtitle': linkResponse['fields']['subtitle'],
                'summary': linkResponse['fields']['summary'],
                'subcategory': mapCategory(linkResponse['fields']['subcategory']),
                'subcategoryTitle': getTitle(linkResponse['fields']['subcategory']),
                'title': linkResponse['fields']['title'],
                'url': url,
                'video': linkResponse['fields']['video'],
                'videoTitle': linkResponse['fields']['video_title'],
                'isVideoContent': hasContent(linkResponse['fields']['video'])
            };
        }

        function mapRepositoryHeaderFields(linkResponse) {
            return {
                'id': linkResponse['id'],
                'title': linkResponse['title'],
                'pubDate': new Date(linkResponse['pubdate']),
                'schemaName': linkResponse['schemaName'],
                'headerTitle': linkResponse['fields']['headerTitle'],
                'headerSubTitle': linkResponse['fields']['headerSubTitle'],
                'headerDescription': linkResponse['fields']['headerDescription'],
                'headerBgImg': imageManagerService.getRandomizedImage(linkResponse['fields']['headerBgImg']),
                'buttons': linkResponse['fields']['buttons'],
                'menu': linkResponse['fields']['menu'],
                'filters': linkResponse['fields']['filters']
            };
        }

        function mapBlogFields(linkResponse) {
            return {
                'id': linkResponse['id'],
                'title': linkResponse['title'],
                'pubDate': new Date(linkResponse['pubdate']),
                'schemaName': linkResponse['schemaName'],
                'blogSectionTitle': linkResponse['fields']['title'],
                'resources': linkResponse['fields']['resources']
            };
        }

        function mapBlogResourceFields(resource) {
            return {
                'resourceTitle': resource['resourceTitle'],
                'resourceSubTitle': resource['resourceSubTitle'],
                'resourceExcerpt': resource['resourceExcerpt'],
                'resourceExcerptSummary': resource['resourceExcerptSummary'],
                'resourceImage': imageManagerService.getRandomizedImage(resource['resourceImage']),
                'resourceImageAlt': resource['resourceImageAlt'],
                'resourceLogo': imageManagerService.getRandomizedImage(resource['resourceLogo']),
                'resourceLogoAlt': resource['resourceLogoAlt'],
                'resourceLink': resource['resourceLink'],
                'resourceLinkText': resource['resourceLinkText'],
                'resourceLinkTarget': resource['resourceLinkTarget']
            };
        }

        function mapResourcesFields(resource) {
            return {
                'resourceCategory': resource['resourceCategory'],
                'resourceTitle': resource['resourceTitle'],
                'resourceSummary': resource['resourceSummary'],
                'resourceImage': imageManagerService.getRandomizedImage(resource['resourceImage']),
                'resourceLink': resource['resourceLink']
            };
        }

        function mapCategory(values) {
            var array = [];
            if (!values) return array;
            values.map(function (value) {
                array.unshift(mapContentSubCategoryFields(value));
            });
            return array;
        }

        function mapLinkFields(link) {
            if (!link) return {};
            return {
                'text': link['text'],
                'link': link['link'],
                'isExternal': link['isExternal']
            };
        }

        function mapContentSubCategoryFields(subcategory) {
            if (!subcategory) return {};
            return {
                'id': subcategory['id'],
                'key': subcategory['key'],
                'title': subcategory['title'],
                'description': subcategory['description']
            };
        }

        function getTitle(value) {
            if (!value || value.length < 1) return '';
            var valueTitle = value[0]['title'],
                splitter = valueTitle.split(_categoryNameSplitter);
            if (splitter.length > 1) {
                valueTitle = splitter[1];
            }
            return valueTitle;
        }

        function hasContent(content) {
            return angular.isDefined(content) && content.length > 0;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.accordion').component('accordion', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/accordion/templates/accordion.template.html',
        'controller': 'accordionController'
    });
})();
'use strict';

(function () {
    accordionController.$inject = ["directiveData", "$element", "$timeout", "errorService"];
    angular.module('kappGlobal.accordion').controller('accordionController', accordionController);

    function accordionController(directiveData, $element, $timeout, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl(ctrl.resource || 'accordion').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            }).then(function () {
                $timeout(function () {
                    $element.find('li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                        $(this).parent().toggleClass('open');
                        $(this).siblings().slideToggle();
                    });
                });
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.articlesSection').component('articlesSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/articles-section/templates/articles-section.html',
        'controller': 'articlesSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    articlesSectionController.$inject = ["directiveData", "$sce", "errorService"];
    angular.module('kappGlobal.articlesSection').controller('articlesSectionController', articlesSectionController);

    function articlesSectionController(directiveData, $sce, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;
        ctrl.parseYoutubeUrl = parseYoutubeUrl;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'articles').then(function (response) {
                ctrl.data = response.data.fields;
                setupArticles();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function setupArticles() {
            if (ctrl.data.block_sections && ctrl.data.block_sections[0].article_item_blocks) {
                ctrl.articles = ctrl.data.block_sections[0].article_item_blocks;
            }
        }

        function parseYoutubeUrl(url) {
            return $sce.trustAsResourceUrl('https://www.youtube.com/embed/' + url);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.awardsSection').component('awardsSection', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/awards/templates/awards.html',
        'controller': 'awardsSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    awardsSectionController.$inject = ["$element", "directiveData", "errorService"];
    angular.module('kappGlobal.awardsSection').controller('awardsSectionController', awardsSectionController);

    function awardsSectionController($element, directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'awards-section').then(function (response) {
                ctrl.data = response.data.fields;
                prependComment(response.data.id);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function prependComment(id) {
            var comment = '<!-- Start Component Presentation: {"ComponentID" : "' + id + '","ComponentTemplateID" : "tcm:246-294262-32"} -->';
            $($element).prepend(comment);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.bazaarVoice').component('bazaarvoiceSubmit', {
        'templateUrl': '/resources/template/html/modules/_shared/components/bazaarvoice/templates/bazaarvoice-submit.html',
        'controller': 'bazaarVoiceSubmitController'
    });
})();
'use strict';

(function () {
    'use strict';

    bazaarVoiceSubmitController.$inject = ["ENV", "angularLoad", "$rootScope", "errorService"];
    angular.module('kappGlobal.bazaarVoice').controller('bazaarVoiceSubmitController', bazaarVoiceSubmitController);

    function bazaarVoiceSubmitController(ENV, angularLoad, $rootScope, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;
        ctrl.locale = ENV.locale;
        ctrl.bvLocale = '';
        ctrl.bvCode = {
            'en\-global': '-en_eu',
            'de-de': '-de_de',
            'en-gb': '-en_gb',
            'fr-fr': '-fr_fr',
            'es-es': '-es_es',
            'it-it': '-it_it',
            'nl-nl': '-nl_nl',
            'sv-se': '-sv_se',
            'da-dk': '-da_dk',
            'nb-no': '-no_no',
            'pt-br': '-pt_br',
            'tr-tr': '-tr_tr',
            'en-au': '-en_au',
            'en-za': '-en_za',
            'en-in': '-en_in',
            'en-ae': '-en_ae',
            'ar-ae': '-ar_sa',
            'en-us': '',
            'en-ca': '-en_ca',
            'es-mx': '-es',
            'zh-cn': '-zh_cn',
            'ja-jp': '-ja_jp'
        };

        // reset link for Bazaarvoice breadcrum item
        var ngRender = $rootScope.$on('ngRender', function () {
            if ($rootScope.breadcrumbs && $rootScope.breadcrumbs[2] && $rootScope.breadcrumbs[2].title === 'Bazaarvoice') {
                $rootScope.breadcrumbs[2].link = '';
            }
            ngRender();
        });

        function activate() {
            getData();
        }

        function getData() {
            if (ctrl.locale in ctrl.bvCode) {
                ctrl.bvLocale = ctrl.bvCode[ctrl.locale];
                loadBazaarvoice();
            }
        }

        function loadBazaarvoice() {
            angularLoad.loadScript('//kaspersky.ugc.bazaarvoice.com/static/8811' + ctrl.bvLocale + '/bvapi.js').then(function () {
                if ($BV) {
                    $BV.ui('submission_container', {});
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.bazaarVoice').component('bazaarvoice', {
        'bindings': {
            'productId': '@',
            'template': '@',
            'buttonText': '@'
        },
        'controller': 'bazaarVoiceController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'stars';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/bazaarvoice/templates/bazaarvoice-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    bazaarVoiceController.$inject = ["directiveData", "bazaarVoiceDataService", "errorService", "$rootScope", "$q", "$scope", "$window", "ngDialog"];
    angular.module('kappGlobal.bazaarVoice').controller('bazaarVoiceController', bazaarVoiceController);

    function bazaarVoiceController(directiveData, bazaarVoiceDataService, errorService, $rootScope, $q, $scope, $window, ngDialog) {
        var ctrl = this;
        ctrl.bv = {};
        ctrl.bvData = {};
        ctrl.showReviewsActive = false;
        ctrl.currentPage = 1;
        ctrl.pageSize = 10;
        ctrl.reverse = false;
        ctrl.reviewRating = 'Rating';
        ctrl.reviewDate = 'SubmissionTime';
        ctrl.reviewOrderBy = 'Rating';
        ctrl.orderByCondition = orderByCondition;
        ctrl.isActive = isActive;
        ctrl.getStars = getStars;
        ctrl.showReviews = showReviews;
        ctrl.$onInit = activate;
        $rootScope.hasMatchingPopupCalled = false;

        function getProductId(value) {
            var splitOn = '#bazaarvoice_';
            return value.match(splitOn) ? value.split(splitOn)[1] : value;
        }

        var showReviewsPopupEventUnsub = $rootScope.$on('showReviewsPopup', function (event, value) {
            if (ctrl.productId === getProductId(value) && !$rootScope.hasMatchingPopupCalled) {
                $rootScope.hasMatchingPopupCalled = true;
                showReviews(true);
            }
        });

        function activate() {
            $q.all([getData(), getBazaarVoiceData(getProductId(ctrl.productId))]).catch(errorService.warn);

            orderByCondition(ctrl.reviewOrderBy);
            $scope.$on('$destroy', handleScopeDestroyed);

            $scope.$on('open-popup', function (evt, productId) {
                if (productId === ctrl.productId) {
                    showReviews(true);
                }
            });
        }

        function getData() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.bvData = response.data.fields;
            });
        }

        function checkTemplate() {
            if (ctrl.template === 'reviews-carousel') return true;
        }

        function getBazaarVoiceData(productId) {
            var popupActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkTemplate();

            if (productId) {
                return bazaarVoiceDataService.getProductReviews(productId, popupActive).then(function (response) {
                    if (!response) return false;
                    var pass = 0;
                    ctrl.bv = response.data;

                    if (ctrl.bv && 'hasErrors' in ctrl.bv) {
                        return errorService.warn('Bazaarvoice:', ctrl.bv.Errors);
                    }

                    var hasProducts = ctrl.bv && ctrl.bv.Includes && ctrl.bv.Includes.Products && ctrl.bv.Includes.Products[productId];
                    ctrl.starsRange = hasProducts && ctrl.bv.Includes.Products[productId].ReviewStatistics.OverallRatingRange || 5;

                    ctrl.productName = hasProducts && ctrl.bv.Includes.Products[productId].Name;

                    ctrl.litStars = function (range, value) {
                        if (!popupActive) {
                            value = ctrl.bv.Results[0] && ctrl.bv.Results[0].ProductStatistics.ReviewStatistics.AverageOverallRating;
                        }
                        ctrl.starsValue = Math.round(value * 2) / 2;

                        if (value > range) {
                            pass = value - range;

                            if (pass <= 0.99 && pass >= 0.01) {
                                return 'font-icons icon-star half';
                            }
                            return 'font-icons icon-star';
                        } else {
                            return 'font-icons icon-star empty';
                        }
                    };

                    ctrl.showReviewsActive = true;
                }).catch(function (err) {
                    errorService.warn('Bazaarvoice:', err);
                });
            } else {
                errorService.warn('Bazaarvoice: productId empty');
            }
        }

        function orderByCondition(orderByPredicate) {
            var index = ctrl.reviewOrderBy.indexOf('' + orderByPredicate);
            ctrl.reviewOrderBy = orderByPredicate;
            if (index === 0) {
                ctrl.reverse = !ctrl.reverse;
            }
        }

        function isActive(name) {
            return ctrl.reviewOrderBy === name;
        }

        function getStars(num) {
            return new Array(num);
        }

        function showReviews(popupActive) {
            if (ctrl._popupOpened) {
                return;
            }

            ctrl._popupOpened = true;

            return getBazaarVoiceData(ctrl.productId, popupActive).then(function () {
                ngDialog.open({
                    'template': '/resources/template/html/modules/_shared/components/bazaarvoice/templates/bazaarvoice-reviews.html',
                    'className': 'ngdialog-flyout',
                    'data': ctrl,
                    'onOpenCallback': function onOpenCallback() {
                        $window.trackPageView($rootScope.kaspersky.pageName + ' > Bazaarvoice Reviews Popup');
                    },
                    'preCloseCallback': function preCloseCallback() {
                        ctrl._popupOpened = false;
                        $rootScope.hasMatchingPopupCalled = false;
                        $window.trackPageView($rootScope.kaspersky.pageName);
                    }
                });
            }, function (rejection) {
                errorService.warn('BazaarvoicePopup:', rejection);
            });
        }

        function handleScopeDestroyed() {
            showReviewsPopupEventUnsub();
        }
    }
})();
'use strict';

(function () {
    bazaarVoiceDataFactory.$inject = ["$http", "ENV", "$q", "sessionStorageService", "errorService"];
    angular.module('kappGlobal.bazaarVoice').factory('bazaarVoiceDataService', bazaarVoiceDataFactory);
    function bazaarVoiceDataFactory($http, ENV, $q, sessionStorageService, errorService) {
        return {
            'getProductReviews': getProductReviews
        };

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getProductReviews(productId, popupActive) {
            var locale = ENV.locale,
                apiV = '5.4',
                localKey = '',
                deferred = $q.defer(),
                bvKeys = {
                'en\-global': { 'stg': 'caBst7vBCtRNgQQxEC2CbwjvR9FIUDcFAHFyXwAkT3QH0', 'prd': 'cabJKCehLpQRAwz4AQUDff1880AIrgtbGbjDrFVT1Qgs8' },
                'en-gb': { 'stg': 'ca5wj0Tkb40EOYwllxyc9U5IvvUg0aovEPmu0UKRkpgag', 'prd': 'cagV1QmIQoFe5NhiyJuyVz7xoGVOhfP36bBLzgHRCgtPo' },
                'en-us': { 'stg': 'caeTW2Wz0IbCIZ7K6zy8xSORfsqwl2D7NE8eKfRkp6mR4', 'prd': 'caYZsgm68NlkyOqbr62JVKBBK8tD5FCdNT4ituKNXI41o' },
                'de-de': { 'stg': 'caMegpfHc9aR33Ln2JNhR1qMcbndtTTu5EOwSV9QtU4es', 'prd': 'cajftwLXWFM8sYn7yOGMVbQNZNCgXM2GsIyFwz0haYiVw' },
                'es-mx': { 'stg': 'caVzLNrPC7eWB6N7AQgAuQSjAe61k0SJ2oafIteSeaZD0', 'prd': 'cafnPwOl2IIDldcJvB4tDc1Z6PaPqDHmJJmCRmUvSG0R8' },
                'es-es': { 'stg': 'caZN8puAQoLqqbyliP0GfuXPWpyD2YK493IhomwXUuvR8', 'prd': 'caR41nBZDUA6LBHdjF9ohmTqfpgS5clRdKPdr8PzRMd9U' },
                'fr-fr': { 'stg': 'carrESPmA1PYggPmmtAiG7breXZOtZR8cJHbxPXaC0hac', 'prd': 'caDH2cy3YQ50l546Dve3X7nzQcpoyaPCBLFOYuduXRQl4' },
                'it-it': { 'stg': 'caOSimTdXgLnHCUxWBMdWfLM9Bx1j1klnWLfSukPvbA4U', 'prd': 'caGLMm2RN1rAoh3hAqk0eOvdKwc9IhvL9n9ZqPFVVLFZk' },
                'nl-nl': { 'stg': 'ca4Mjoe43f8W4pVp9xPF5MxKBRjPnVkGwmanu4PTsVLvw', 'prd': 'ca64EsK207d8BinQOBC4iCMbnBgNkiCH7DKvacyh646Q4' },
                'pt-br': { 'stg': 'carZBTVHWSjpR7Q78tZBRBlPR4fBL4PVYaXFLXLtjlZKc', 'prd': 'caLRzkLjo4rihnkHgTWC2bhVnPDRRUZce22LWrTYkiNVI' },
                'tr-tr': { 'stg': 'cavvd0H7106fUgPru6O7s2pfr8IEIRgZ96FQO5LV8qa0k', 'prd': 'cae2S95bo6T4Lq3wrHHErcYHeei1tFw0QYBeOXQ3c3O6Y' },
                'en-au': { 'stg': 'caUSqmUjIpDHoOQbF0G5mCIFvHIeMAvhlZwMyHXPWNe6s', 'prd': 'caSUUvnBQmvtAPQPwHEqEnnfZf9ERIXoQ0UlFfRPqQHHQ' },
                'en-za': { 'stg': 'caBm5x4OK07BqVsseBH1FsfMeVk5lc9udBiy9xxqdGJPw', 'prd': 'casbMFdQGWNjfjUeHpX7Y9OtSJuRtzSIDT3KTxBn732Z4' },
                'en-in': { 'stg': 'cavuw4tFdeIF3Rqn4Omimh8itmYE2De0Czn3WV35k52xY', 'prd': 'caLr4CuEo0J4a41iZCH7jHxcTTPjQli440aeYDn09j00I' },
                'en-ae': { 'stg': 'caNc9CZFhryR9rrgZfO63kcVg0rpqaBYSA8pdXY3LMZ2E', 'prd': 'caHiBA7TUC4PqdYnIHi627VKRNkqfSSBdid1m4Av4i7xA' },
                'ar-ae': { 'stg': 'caZfrlcJUk9SRYAopLzHQkxxrFk2SJpKU6IsJeD1OcFMA', 'prd': 'caD4YMV0HkPEbHKQ9QMC68W1nmS78gIhuqLRXhmuKdHD0' },
                'sv-se': { 'stg': 'cawERHSSqaHLSJmSw4axAFypWGlOFU8IPEKlcURjFb08A', 'prd': 'ca16JDB1ehqf8kHmC0cBqT1sdGnYYiPeTLWiFHAwDU64M' },
                'da-dk': { 'stg': 'caHPJwtg2jhjGKzhlPecgUfduBrDlqlZpiTmlOIdRarMY', 'prd': 'caFvvPPqgu1NqAGnpghLzHPGTkMtqIJtG1Ra8ZZE5OaxQ' },
                'nb-no': { 'stg': 'cawkB2CPhbOZok4H8gu8yZKNLMp7E3ct97Dj2ERZi86D0', 'prd': 'caR1efEJ3uUnQCrIVRuMXxCXBAsnICKqWL6Z7AdiWqWwA' },
                'zh-cn': { 'stg': 'cajtZIfFT7ZPsjo0yfCRB4RdU1pEvL08Q7bQ8oNSvSUbI', 'prd': 'caNIOX4FfLa2RwCzgodRNrZKquZB66LVVr5Y792jIr1nc' },
                'ja-jp': { 'stg': 'caPuv3LCkvwbAermx7Un9qFRIsZyhuA1WwEPCv2U5HrPo', 'prd': 'caSk15kP4lHLzcnGHpQfHn4RKaOkCtZ8gvIO6XMfLlNMQ' }
            };

            if (!productId) {
                errorService.warn('BazaarVoice: Product ID empty');
                deferred.reject();
                return deferred.promise;
            }

            if (locale in bvKeys) {
                localKey = bvKeys[locale]['prd'];
            } else {
                errorService.warn('BazaarVoice: No key for this locale');
                deferred.reject();
                return deferred.promise;
            }

            var cachedData = sessionStorageService.get(popupActive ? 'bazaarvoiceReviews' + productId : 'bazaarvoiceStatistics' + productId);

            if (cachedData) {
                deferred.resolve(cachedData);
                return deferred.promise.then(function (cachedData) {
                    return { 'data': cachedData };
                }, function (error) {
                    return deferred.reject(error);
                });
            }

            if (popupActive) {
                var getUrl = 'https://api.bazaarvoice.com/data/reviews.json';
                return $http.jsonp(getUrl + '?apiversion=' + apiV + '&passkey=' + localKey + '&Filter=ProductId:' + productId + '&HasComments:true&Include=Products&Stats=Reviews&Limit=100', { 'jsonpCallbackParam': 'callback' }).then(function (response) {
                    sessionStorageService.set('bazaarvoiceReviews' + productId, response.data);
                    return response;
                }, handleRejection);
            } else {
                var _getUrl = 'https://api.bazaarvoice.com/data/statistics.json';
                return $http.jsonp(_getUrl + '?apiversion=' + apiV + '&passkey=' + localKey + '&Filter=ProductId:' + productId + '&Stats=Reviews', { 'jsonpCallbackParam': 'callback' }).then(function (response) {
                    sessionStorageService.set('bazaarvoiceStatistics' + productId, response.data);
                    return response;
                }, handleRejection);
            }
        }
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.bottomBanner').component('bottomBanner', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/bottom-banner/templates/bottom-banner.html',
        'controller': 'bottomBannerController'
    });
})();
'use strict';

(function () {
    'use strict';

    bottomBannerController.$inject = ["windowHelperService", "directiveData", "ENV", "errorService"];
    angular.module('kappGlobal.bottomBanner').controller('bottomBannerController', bottomBannerController);

    function bottomBannerController(windowHelperService, directiveData, ENV, errorService) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.$onInit = activate;
        ctrl.setBackgroundImage = setBackgroundImage;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;

        function activate() {
            getData();
        }

        function getData() {
            if (ctrl.resource) ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);

            return directiveData.getByUrl(ctrl.resource || 'bottom-banner').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function setBackgroundImage() {
            return ctrl.data && ctrl.data.backgroundImage ? '' : 'lightgreen-background';
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.buyblocks').component('buyblockDropdown', {
        'bindings': {
            'productShortName': '@productName', //for cases when we only know the name of the product
            'productInfo': '<', //for cases when we have all product data available
            'purchaseType': '@',
            'selectedPack': '@',
            'selectedTerm': '@',
            'selectedAutorenew': '@',
            'estore': '@',
            'symbol': '@',
            'locale': '@',
            'buyButtonText': '@',
            'productBox': '@',
            'template': '@',
            'noBoxshot': '@', // does nothing? LT
            'setBuyblockValueByProduct': '&', // does nothing? LT
            'valueToSet': '<',
            'upgradeButton': '@',
            'highlighted': '@',
            'type': '@',
            'kscDisclaimer': '@',
            'hideProductLinks': '@',
            'promoline': '@',
            'countMonthly': '@',
            'description': '@',
            'free': '@',
            'onFormUpdated': '&',
            'hideTrialButton': '@',
            'saveRateText': '@',
            'savingsPriceType': '@',
            'disableAutoRenew': '@',
            'hideArCheckbox': '@'
        },
        'controller': 'buyblockDropdownController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'dropdown';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-' + template + '.html';
        }]
    });
})();
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(function () {
    'use strict';

    buyblockDropdownController.$inject = ["$rootScope", "$scope", "$state", "ENV", "SETUP", "appHelperService", "directiveData", "priceData", "productData", "windowHelperService", "buyblockService", "ngDialog", "errorService"];
    angular.module('kappGlobal.buyblocks').controller('buyblockDropdownController', buyblockDropdownController);

    function buyblockDropdownController($rootScope, $scope, $state, ENV, SETUP, appHelperService, directiveData, priceData, productData, windowHelperService, buyblockService, ngDialog, errorService) {
        var ctrl = this;
        ctrl.error = ctrl.error || null;
        ctrl.isB2B = false;
        ctrl.hidePack = false;
        ctrl.isChecked = '' + SETUP.isChecked;
        ctrl.showAR = '' + SETUP.showAR;
        ctrl.curState = $state.current.parent;
        ctrl.stateName = $state.current.name;
        ctrl.currency = buyblockService.getCurrency(ctrl);
        ctrl.currentValue = {
            'price': 'no data',
            'eStore': '/store'
        };
        ctrl.productPricesExist = true;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.product = {};
        ctrl.productName = ctrl.productName || '';
        ctrl.productShortName = ctrl.productShortName || '';
        ctrl.asterisk = '';
        ctrl.translations = {};
        ctrl.buyblockData = {
            'unavailableMsgType': '',
            'buyblock_not_available_msg': '',
            'buyblock_not_available_b2b_msg': '', 'b2cDisclaimer': '', 'disclaimer': ''
        };
        ctrl.priceList = [];
        ctrl.packArr = [];
        ctrl.termArr = [];
        ctrl.buyLink = 'no data received yet';
        ctrl.omnitureText = 'Buy';
        ctrl.defaultAutorenew = ctrl.isChecked === 'true';
        ctrl.priceListGroupedBy = { 'term': {}, 'pack': {} };
        ctrl.notAvailableItemsFor = { 'term': {}, 'pack': {} };

        ctrl.addSalesTrackingParameters = addSalesTrackingParameters;
        ctrl.registerOnce = registerOnce;
        ctrl.setCurrentValue = setCurrentValue;
        ctrl.showARPopup = showARPopup;
        ctrl.sendToBuyUrl = sendToBuyUrl;
        ctrl.getPromoline = getPromoline;
        ctrl.accountDescPopup = accountDescPopup;
        ctrl.getSavings = getSavings;
        ctrl.isPriceSavingDisplayed = isPriceSavingDisplayed;
        ctrl.isPackDisabled = isPackDisabled;
        ctrl.isTermDisabled = isTermDisabled;

        // $rootScope destroy events begin
        var currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange),
            arPopupCheck = $rootScope.$on('arPopupCheck', function (event, value) {
            ctrl.autorenew = value;
            setCurrentValue();
        });
        // $rootScope destroy events end

        ctrl.$onInit = activate;
        ctrl.$onChanges = handleChanges;
        ctrl.hasTrialButton = hasTrialButton;

        function activate() {
            ctrl.locale = ctrl.locale || ENV.locale;

            getProductData(ctrl.productShortName);
            getTranslations();
            $scope.$on('$destroy', handleScopeDestroyed);
        }

        function handleChanges(changesObj) {
            if (changesObj['valueToSet']) {
                handleUpdateCurrentValue(changesObj['valueToSet'].currentValue);
            }
        }

        function getPromoline() {
            return ctrl.promoline ? ctrl.promoline : ctrl.buyblockData ? ctrl.buyblockData.promoline : undefined;
        }

        function addSalesTrackingParameters(event) {
            if (event) event.preventDefault();
            if (ctrl.error) return;
            sendToBuyUrl();
        }

        function registerOnce(checked) {
            buyblockService.registerOnce(checked, ctrl.defaultAutorenew);
        }

        function handleUpdateCurrentValue(valueToSet) {
            var valueIsDifferent = !_.isEqual(valueToSet, {
                'pack': ctrl.packValue,
                'term': ctrl.termValue,
                'autorenew': ctrl.autorenew
            });

            if (valueToSet && valueIsDifferent) {
                ctrl.packValue = valueToSet.pack;
                ctrl.termValue = valueToSet.term;
                ctrl.autorenew = valueToSet.autorenew;
                if (ctrl.priceList && ctrl.priceList.length > 0) setCurrentValue();
            }
        }

        function setCurrentValue(changedProp) {
            findMatch();
            ctrl.renewalAvailable = buyblockService.checkRenewal(ctrl.priceList, ctrl.packValue, ctrl.termValue, false);

            var promise = priceData.getCartLink(ctrl.currentValue.product_id, ctrl.currentValue.id, ctrl.purchaseType, ctrl.product.shortName).then(function (response) {
                ctrl.buyLink = response.data;
            }, function (rejection) {
                errorService.warn(rejection);
                ctrl.buyLink = 'Oops! Something went wrong';
            });

            ctrl.onFormUpdated({
                'values': {
                    'term': ctrl.termValue,
                    'pack': ctrl.packValue,
                    'autorenew': ctrl.autorenew
                }
            });

            setAvailableOptionList(changedProp);

            return promise;
        }

        function setAvailableOptionList(prop) {
            if (ctrl.template !== '58' || !prop) return;

            // this avoid repeating the same logic for term and pack
            // prop is pack|term
            // otherProp is the other value
            var otherProp = prop === 'term' ? 'pack' : 'term',
                propValue = ctrl[prop + 'Value'],
                otherPropValueArr = ctrl[otherProp + 'Arr'],
                availableListForOtherProp = _.uniq(ctrl.priceListGroupedBy[prop][propValue].map(function (i) {
                return i[otherProp];
            }));

            ctrl.notAvailableItemsFor[otherProp] = _.difference(otherPropValueArr, availableListForOtherProp).reduce(function (res, pack) {
                return Object.assign(res, _defineProperty({}, pack, true));
            }, {});
        }

        function isPackDisabled(value) {
            return ctrl.notAvailableItemsFor.pack[value] === true;
        }

        function isTermDisabled(value) {
            return ctrl.notAvailableItemsFor.term[value] === true;
        }

        function showARPopup() {
            buyblockService.showARPopup();
        }

        function sendToBuyUrl() {
            return buyblockService.sendToBuyUrl(ctrl.buyLink, ctrl.purchaseType);
        }

        function hidePack() {
            if (ctrl.locale === 'ru-ru' && (ctrl.productShortName === 'ksc-family' || ctrl.product && ctrl.product.shortName === 'ksc-family')) {
                ctrl.hidePack = true;
            }
        }

        // Private helper Methods
        function buyblockSetup() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                var bbSettings = ctrl.productInfo ? ctrl.productInfo.bbSettings : {},
                    isB2B = $state.current.parent ? Boolean($state.current.parent.match(/(smb|vsb)/ig)) : false;

                ctrl.buyblockData = Object.assign({}, response.data.fields, bbSettings);

                ctrl.disablePackSelect = ctrl.buyblockData.packSelectDisabled === 'True';
                ctrl.disableTermSelect = ctrl.buyblockData.termSelectDisabled === 'True';

                ctrl.buyblockData.unavailableMsgType = ''; // this.buyblockData.unavailableMsgType used in ng-switch directive to pick b2b_fallback text if it exists and b2c_fallback if not
                if (ctrl.buyblockData.buyblock_not_available_msg && !isB2B) ctrl.buyblockData.unavailableMsgType = 'b2c';
                if (ctrl.buyblockData.buyblock_not_available_b2b_msg && isB2B) ctrl.buyblockData.unavailableMsgType = 'b2b';
                checkDisclaimer(isB2B);
                hidePack();
            });
        }

        function checkDisclaimer(isB2B) {
            var b2bDisclaimer = ctrl.buyblockData.disclaimer || ctrl.buyblockData.smbDisclaimer;

            if (ctrl.locale === 'en-us' && $rootScope.kaspersky.verdictSite === 'LRC') return ctrl.disclaimerObj = {};

            ctrl.disclaimerObj = ctrl.product && ctrl.product.bbDisclaimer ? { 'disclaimer': ctrl.product.bbDisclaimer, 'asterisk': '*' } : buyblockService.checkDisclaimer(isB2B, ctrl.buyblockData.b2cDisclaimer, b2bDisclaimer);
        }

        function findMatch() {
            var matchConfig = {
                'pack': ctrl.packValue,
                'term': ctrl.termValue,
                'autorenew': ctrl.autorenew
            },
                matchIndex = buyblockService.findPriceMatch(ctrl.priceList, matchConfig, false);

            if (matchIndex < 0) {
                ctrl.autorenew = !ctrl.autorenew;
                matchConfig.autorenew = !matchConfig.autorenew;

                matchIndex = buyblockService.findPriceMatch(ctrl.priceList, matchConfig, false);
            }

            if (matchIndex > -1) {
                ctrl.currentValue = ctrl.priceList[matchIndex];
            }
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            });
        }

        function setProductPageLink() {
            ctrl.product.prodPageLink = ctrl.hideProductLinks ? '' : ctrl.product.prodPageLink;
        }

        function getProductData(productShortName) {
            if (productShortName) {
                return getCustomProduct(productShortName);
            }
            var productInfo = $scope.$watch('$ctrl.productInfo', function (newV) {
                if (newV) {
                    ctrl.product = ctrl.productInfo;
                    ctrl.productName = ctrl.productInfo.title;
                    setProductPageLink();
                    getPriceList();
                    productInfo();
                    buyblockSetup();
                }
            });
        }

        function getCustomProduct(productShortName) {
            return productData.getb2c(productShortName).then(function (response) {
                ctrl.product = response.data.fields;
                ctrl.productName = response.data.fields.title;
                setProductPageLink();
                buyblockSetup();
            }).then(function () {
                getPriceList();
            });
        }

        function getPriceList() {
            if (angular.isUndefined(ctrl.productName)) return;
            setEStore();
            return priceData.getPrice(ctrl.productName, ctrl.purchaseType, ctrl.currency, ctrl.newEstore || '').then(handlePriceSuccess, handlePriceError);
        }

        function handleCurrencyChange() {
            ctrl.currency = $rootScope.currency;
            getPriceList();
        }

        function handlePriceError(rejection) {
            ctrl.productPricesExist = false;
            errorService.warn(rejection);
        }

        function handleScopeDestroyed() {
            arPopupCheck();
            currencyChange();
        }

        function resetPricingObjectsToDefault() {
            ctrl.packArr = [];
            ctrl.termArr = [];
            ctrl.buyLink = 'no data received yet';
            ctrl.defaultAutorenew = ctrl.isChecked === 'true';
            ctrl.productPricesExist = true;
        }

        function handlePriceSuccess(response) {
            setupTracking();
            var bbSettings = ctrl.product.bbSettings;

            if (bbSettings.isChecked) ctrl.isChecked = bbSettings.isChecked;
            if (bbSettings.showAR) ctrl.showAR = bbSettings.showAR;
            if (bbSettings.hideArCheckbox) {
                ctrl.showAR = bbSettings.hideArCheckbox[0] && bbSettings.hideArCheckbox[0].toLowerCase() !== 'true';
            }

            resetPricingObjectsToDefault();

            ctrl.priceList = response.data;
            ctrl.priceList.sort(function (a, b) {
                return parseInt(a.pack) - parseInt(b.pack);
            });

            if (!angular.isObject(ctrl.priceList) || !ctrl.priceList.length) {
                errorService.warn('API not available');
                ctrl.productPricesExist = false;
                return false;
            }
            setupPriceList();
        }

        function isPriceSavingDisplayed() {
            var hasCurVal = ctrl.currentValue && ctrl.currentValue.price_striked,
                buyblockData = ctrl.buyblockData;

            return hasCurVal && (buyblockData.saveRate || buyblockData.saveRateText);
        }

        function setEStore() {
            if (ctrl.estore || appHelperService.stateIncludes('lrc-verdict')) {
                ctrl.newEstore = ctrl.estore;
                return;
            }
            ctrl.newEstore = ctrl.product.bbSettings.eStore;
        }

        function getCNPackValue() {
            if (ctrl.locale === 'zh-cn' && (ctrl.productShortName === 'kav' || $state.params.productName === 'kav')) {
                return ctrl.packArr[0];
            }
        }

        function getUSPackValue() {
            if (ctrl.locale === 'en-us' && (ctrl.productShortName === 'ktsmd' || $state.params.productName === 'ktsmd')) {
                return _.find(ctrl.packArr, function (i) {
                    return i === '5 Devices';
                });
            }
        }

        function setupPriceList() {
            var hasAutoRenewal = ctrl.priceList.some(function (item) {
                return ctrl.showAR !== false && ctrl.priceList[0].autorenew !== item.autorenew;
            });

            ctrl.packArr = _.uniq(ctrl.priceList.map(function (i) {
                return i.pack;
            }));
            ctrl.termArr = _.uniq(ctrl.priceList.map(function (i) {
                return i.term;
            }));

            ctrl.priceListGroupedBy = {
                'term': _.groupBy(ctrl.priceList, 'term'),
                'pack': _.groupBy(ctrl.priceList, 'pack')
            };

            // if we have only one autorenew and it doesn't match the default one
            if (ctrl.disableAutoRenew === 'true') {
                ctrl.showAR = false;
                ctrl.autorenew = false;
            } else {
                if (!hasAutoRenewal) {
                    ctrl.showAR = false;
                    ctrl.defaultAutorenew = ctrl.priceList[0].autorenew;
                } else {
                    ctrl.showAR = '' + SETUP.showAR;
                }
            }

            // when we provided with a number for licenses convert it to string like '1 device' for LRC
            if (ctrl.selectedPack) {
                setCustomSelectedPack(ctrl);
            }
            // when we provided with a number for terms convert it to string like '2 years' for LRC
            if (ctrl.selectedTerm && ctrl.productShortName === 'ksec') {
                ctrl.selectedTermString = ctrl.selectedTerm;
            } else if (ctrl.selectedTerm) {
                setCustomSelectedTerm(ctrl);
            }

            ctrl.packValue = getCNPackValue() || ctrl.selectedPackString || getUSPackValue() || ctrl.packArr[0];
            ctrl.termValue = ctrl.selectedTermString || ctrl.termArr[0];
            ctrl.autorenew = ctrl.selectedAutorenew === 'true' || ctrl.defaultAutorenew;

            // Emit Buyblock ready event to currency selector
            $rootScope.buyBlockReady();

            setCurrentValue();
            setAvailableOptionList('pack');
            setAvailableOptionList('term');

            updatePriceFormat();
        }

        function setCustomSelectedPack(ctrl) {
            var selectedPack = parseInt(ctrl.selectedPack);
            ctrl.selectedPackString = _.find(ctrl.packArr, function (value) {
                return parseInt(value) === selectedPack;
            });
        }

        function setCustomSelectedTerm(ctrl) {
            if (ctrl.selectedTerm === '0') ctrl.selectedTerm = 1;

            if (ctrl.selectedTerm === '0.5' && ctrl.priceListGroupedBy.term['6 Months']) {
                ctrl.selectedTerm = ctrl.selectedTermString = '6 Months';
                return;
            }

            var selectedTermFloat = parseFloat(ctrl.selectedTerm),
                rounded = selectedTermFloat < 1 ? Math.ceil(selectedTermFloat) : Math.floor(selectedTermFloat);

            ctrl.termArr.forEach(function (value) {
                var valueInt = parseInt(value);
                // this is needed for cases where product is in months, and the term would come as 0.08 (30/365)
                // use ceil for numbers < 1 and floor for numbers > 1
                if (valueInt === rounded || valueInt === rounded - 1) {
                    ctrl.selectedTermString = value;
                }
            });
        }

        function setupTracking() {
            if (ctrl.purchaseType === 'Renewal') ctrl.omnitureText = 'Renew';
            if (ctrl.upgradeButton) ctrl.omnitureText = 'Upgrade';
        }

        function accountDescPopup() {
            ngDialog.open(buyblockService.ngDialogSettings(ctrl, $scope, {
                'className': 'ngdialog-plain ngdialog-narrow',
                'template': '/resources/template/html/modules/b2c/components/kscloud-disclaimers/templates/account-description.html'
            }));
        }

        function hasTrialButton() {
            return buyblockService.hasTrialButton(ctrl.product) && !ctrl.hideTrialButton;
        }

        /**
         * Get savings messaging and value (either custom or default)
         */
        function getSavings(messageType) {
            if (ctrl.product) return buyblockService.getSavings(messageType, ctrl.currentValue, ctrl.product.bbSettings, ctrl.buyblockData, ctrl.saveRateText, ctrl.savingsPriceType);
        }

        function updatePriceFormat() {
            var products = ['kesb-select', 'kesb-advanced', 'ksos', 'cloud'],
                hasProduct = _.some(products, function (product) {
                return product === ctrl.product.shortName;
            });

            ctrl.showLabelFR = appHelperService.stateIncludes('lrc-verdict') && hasProduct && ENV.locale === 'fr-fr';
        }
    }
})();
'use strict';

// This component has been dismissed; please use <buyblock-dropdown> passing one-price as a template parameter
// e.g. <buyblock-dropdown template="one-price"></buyblock-dropdown>
(function () {
    angular.module('kappGlobal.buyblocks').component('buyblockOnePrice', {
        'bindings': {
            'productShortName': '@productName',
            'purchaseType': '@',
            'valueToSet': '<',
            'selectedPack': '@',
            'selectedTerm': '@',
            'selectedAutorenew': '@',
            'countMonthly': '@',
            'estore': '@',
            'template': '@',
            'description': '@',
            'free': '@',
            'hideTrialButton': '@'
        },
        'controller': 'buyblockDropdownController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'one-price';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.buyblocks').component('buyblockRadio', {
        'bindings': {
            'productShortName': '@productName', //for cases when we only know the name of the product
            'productInfo': '<', //for cases when we have all product data available
            'purchaseType': '@',
            'selectedPack': '@',
            'selectedTerm': '@',
            'selectedAutorenew': '@',
            'estore': '@',
            'symbol': '@',
            'locale': '@',
            'buyButtonText': '@',
            'productBox': '@',
            'template': '@',
            'value': '<', // does nothing? LT
            'compare': '<', // does nothing? LT
            'highlighted': '@', // used in featured-products and HMC
            'highlightButton': '@', // used in featured-products and HMC
            'setBuyblockValueByProduct': '&',
            'type': '@',
            'overrideProductDesc': '@',
            'hideProductLinks': '@',
            'promoline': '@',
            'updateButtonText': '@',
            'valueToSet': '<',
            'countMonthly': '@',
            'description': '@',
            'free': '@',
            'resellerOverride': '@',
            'saveRateText': '@',
            'savingsPriceType': '@',
            'hideTrialButton': '@',
            'disableAutoRenew': '@',
            'hideArCheckbox': '@',
            'upgradeButton': '@',
            'isFailover': '@',
            'hideAr': '@',
            'hidePriceDisclaimer': '@',
            'component': '@'
        },
        'controller': 'buyblockRadioController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'product-page';
            if ($attrs.template) template = $attrs.template;
            return '/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    buyblockRadioController.$inject = ["$rootScope", "$q", "$scope", "$state", "ENV", "SEO", "SETUP", "directiveData", "priceData", "productData", "windowHelperService", "buyblockService", "errorService", "ngDialog", "geoLocationManager"];
    angular.module('kappGlobal.buyblocks').controller('buyblockRadioController', buyblockRadioController);

    function buyblockRadioController($rootScope, $q, $scope, $state, ENV, SEO, SETUP, directiveData, priceData, productData, windowHelperService, buyblockService, errorService, ngDialog, geoLocationManager) {
        var ctrl = this;
        ctrl.isChecked = SETUP.isChecked;
        ctrl.productPricesExist = true;
        ctrl.showAR = SETUP.showAR;
        ctrl.showOnlyAR = false;
        ctrl.hidePack = false;
        ctrl.curState = $state.current.parent;
        ctrl.stateName = $state.current.name;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.currency = buyblockService.getCurrency(ctrl);
        ctrl.$id = $scope.$id || Math.random().toString(36).substring(7); // backup for cases where $scope.$id is 0 and falsey
        ctrl.buyLink = 'no data received yet';
        ctrl.currentValue = {
            'price': 'no data',
            'eStore': '/store'
        };
        ctrl.registerOnce = registerOnce;
        ctrl.showARPopup = showARPopup;
        ctrl.getPriceList = getPriceList;
        ctrl.setSelectedOption = setSelectedOption;
        ctrl.applyOption = applyOption;
        ctrl.radioFilter = radioFilter;
        ctrl.sendToBuyUrl = sendToBuyUrl;
        ctrl.addSalesTrackingParameters = addSalesTrackingParameters;
        ctrl.getPromoline = getPromoline;
        ctrl.hasTrialButton = hasTrialButton;
        ctrl.moreDevicesPopup = moreDevicesPopup;
        ctrl.accountDescPopup = accountDescPopup;
        ctrl.handleBundleChange = handleBundleChange;
        ctrl.getSavings = getSavings;
        ctrl.isActive = isActive;
        ctrl.switchTerm = switchTerm;
        ctrl.productPageName = $state.params.jsonName;

        // $rootScope destroy events begin
        var currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange),
            productSelected = void 0,
            arPopupCheck = $rootScope.$on('arPopupCheck', function (event, value) {
            if (value && ctrl.showAR) {
                ctrl.autorenew = value;
            } else {
                ctrl.autorenew = false;
            }
            applyOption();
        }),
            orderBy = {
            'TERM': 'term',
            'TERM_PACK': 'term then pack',
            'PACK': 'pack',
            'PACK_TERM': 'pack then term'
        };

        // $rootScope destroy events end

        function setUnavailableText() {
            ctrl.buyblockUnavailableText = ctrl.isProductBlocked && isProductKSC() ? ctrl.buyblockData.kscUnavailableText : ctrl.buyblockData.buyblock_not_available_msg;
            if (!ctrl.buyblockUnavailableText) ctrl.buyblockUnavailableText = '<p>This product is currently unavailable in your region. Please <a href="/about/contact">contact us</a> for further details.</p>';
        }

        /**
         * Handler for when an option is selected in another buyblock with the same product.
         * @param  {Object} event
         * @param  {Object} optionObj   The object of the active option
         */
        function handleProductSelected(event, optionObj) {
            if (optionObj.scope === ctrl.$id) return;
            ctrl.autorenew = optionObj.autoRenewal;
            ctrl.priceList = optionObj.priceList;
            setSelectedOption(optionObj.optionID);
            if (ctrl.selectedID !== optionObj.optionID) updateSelectedID(optionObj.optionID);
        }

        /**
         * Updates the radio checkbox with the active option
         * @param  {Number} id The ID of the active option
         */
        function updateSelectedID(id) {
            if (angular.isUndefined(id)) return;
            ctrl.selectedID = id;
        }

        ctrl.$onInit = activate;

        function activate() {
            ctrl.defaults = {
                'term': ctrl.selectedTerm,
                'pack': ctrl.selectedPack
            };
            ctrl.locale = ctrl.locale || ENV.locale;
            var productData = getProductData(),
                buyBlockSetup = buyblockSetup(),
                promises = [productData, buyBlockSetup];
            $q.all(promises).then(setUnavailableText);
            $scope.$on('$destroy', handleScopeDestroyed);
        }

        function hasTrialButton() {
            return buyblockService.hasTrialButton(ctrl.product) && !ctrl.hideTrialButton;
        }

        function addSalesTrackingParameters(event) {
            if (event) event.preventDefault();
            sendToBuyUrl();
        }

        function getPriceList() {
            if (angular.isUndefined(ctrl.productName) || ctrl.stateName === 'home-downloads') return;
            setEStore();
            return priceData.getPrice(ctrl.productName, ctrl.purchaseType, ctrl.currency, ctrl.newEstore || '').then(handlePriceSuccess, handlePriceError);
        }

        function registerOnce(checked) {
            buyblockService.registerOnce(checked, ctrl.isChecked);
        }

        function radioFilter(input) {
            if (!input || input.autorenew !== ctrl.autorenew) {
                return;
            }
            if (ctrl.itemOffersGroupLimit && input.outOfGroupVisibleLimit) {
                return;
            }
            if (ctrl.priceList.length <= ctrl.limitTo || ctrl.showEvenDevices === 'Yes') {
                return true;
            }

            var isUSLocale = ENV.locale === 'en-us';

            if (isUSLocale && $state.includes('lrc-verdict') && ctrl.defaults.pack) {
                if (parseInt(input.pack) % ctrl.defaults.pack === 0) {
                    return true;
                }
            } else if (isUSLocale && ctrl.productShortName === 'ktsmd') {
                if (parseInt(input.pack) % 5 === 0) {
                    return true;
                }
            } else {
                if (parseInt(input.pack) % 2 !== 0) {
                    return true;
                }
            }
        }

        function getPromoline() {
            // GWP-31338 home-security page has a specific promoline
            var isHomeSec = ctrl.stateName === 'home-security';
            return ctrl.buyblockData ? ctrl.buyblockData[isHomeSec ? 'promolineHomeSecurity' : 'promoline'] : ctrl.promoline;
        }

        function showARPopup() {
            buyblockService.showARPopup(ctrl.showAR);
        }

        function getBuyButtonText() {
            var isExtendedButtonText = angular.isString(ctrl.updateButtonText) ? ctrl.updateButtonText !== 'false' : ctrl.updateButtonText;
            if (ENV.locale === 'ru-ru' && isExtendedButtonText) {
                ctrl.updatedBuyButtonText = ctrl.buyblockData.extendButtonText;
            } else if (ENV.locale === 'en-us' && ctrl.upgradeButton) {
                ctrl.updatedBuyButtonText = ctrl.buyblockData.upgradeText;
            } else if (ENV.locale === 'en-us' && !ctrl.upgradeButton && ctrl.purchaseType !== 'Purchase') {
                ctrl.updatedBuyButtonText = ctrl.buyblockData.renewText;
            } else {
                ctrl.updatedBuyButtonText = ctrl.buyButtonText || ctrl.buyblockData.buyText;
            }
        }

        function sendToBuyUrl() {
            buyblockService.sendToBuyUrl(ctrl.buyLink, ctrl.purchaseType);
        }

        function hidePack() {
            if (ctrl.locale === 'ru-ru' && (ctrl.productShortName === 'ksc-family' || ctrl.product && ctrl.product.shortName === 'ksc-family')) {
                ctrl.hidePack = true;
            }
        }

        // Private methods
        function buyblockSetup() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockData = response.data.fields;
                var isB2B = $state.current.parent ? Boolean($state.current.parent.match(/(smb|vsb)/ig)) : false;
                checkDisclaimer(isB2B);
                getBuyButtonText();
                hidePack();
            });
        }

        function doScreenshotsSeo() {
            var newScreenshotsArr = [],
                seoAltTexts = SEO[ENV.locale] || SEO['default'],
                screenshots = ctrl.productInfo ? ctrl.productInfo.screenshots : [];
            for (var i = 0, len = screenshots.length; i < len; i++) {
                var obj = {},
                    ss = screenshots[i];
                if (angular.isString(ss)) {
                    var name = ss.split('/').pop().split('.')[0];
                    obj.path = ss;
                    obj.name = name;
                    obj.altText = seoAltTexts && seoAltTexts[name] ? seoAltTexts[name] : name;
                    newScreenshotsArr.push(obj);
                }
            }
            ctrl.productInfo.screenshots = newScreenshotsArr; // replace array of string, with array of object
        }

        function checkDisclaimer(isB2B) {
            var b2bDisclaimer = ctrl.buyblockData.disclaimer || ctrl.buyblockData.smbDisclaimer;
            ctrl.disclaimerObj = ctrl.hidePriceDisclaimer === 'true' && $rootScope.kaspersky.verdictSite !== 'ATT' ? false : ctrl.product && ctrl.product.bbDisclaimer ? { 'disclaimer': ctrl.product.bbDisclaimer, 'asterisk': '*' } : buyblockService.checkDisclaimer(isB2B, ctrl.buyblockData.b2cDisclaimer, b2bDisclaimer);
        }

        function resetPricingObjectsToDefault() {
            ctrl.priceList = [];
            ctrl.selectedOption = {
                'price': ''
            };
            ctrl.selectedPack = ctrl.defaults.pack;
            ctrl.selectedTerm = ctrl.defaults.term;
            ctrl.buyLink = 'no data received yet';
            ctrl.autorenew = ctrl.isChecked === 'true';
            ctrl.productPricesExist = true;
            ctrl.isBBReady = false;
        }

        function handleCurrencyChange() {
            if (ctrl.currency === $rootScope.currency) return;
            ctrl.isBBReady = false;
            ctrl.currency = $rootScope.currency;
            if (ctrl.product.bbSettings.purchaseType !== 'Free' && !ctrl.isProductBlocked) getPriceList();
        }

        function handleBundleChange() {
            if (!ctrl.isBundleActive) ctrl.productNameBackup = ctrl.productName;

            ctrl.isBundleActive = !ctrl.isBundleActive;
            ctrl.productName = ctrl.isBundleActive ? ctrl.product.bundleProductName : ctrl.productNameBackup;

            getPriceList();
        }

        function handleScopeDestroyed() {
            if (angular.isFunction(productSelected)) productSelected();
            currencyChange();
            arPopupCheck();
            $rootScope.mainProductAlreadySelected = false;
        }

        /**
         * ctrl.product.bbSettings.eStore pulls data from Tridion component, ctrl.estore takes it from parameter passed in
         * this conditional is probably used to target buyblocks outside of LRC, added lrc state detection to make it work for ATT verdicts - AFedotov
         */
        function setEStore() {
            if (ctrl.estore || $state.includes('lrc-verdict')) {
                ctrl.newEstore = ctrl.estore;
            } else {
                ctrl.newEstore = ctrl.product && ctrl.product.bbSettings ? ctrl.product.bbSettings.eStore : '';
            }
        }

        /**
         * Get the default option either from Product settings or template override
         */
        function getDefaultOption() {
            var option = void 0,
                hasTemplateOverride = void 0,
                hasProductOverride = void 0;
            hasTemplateOverride = ctrl.defaults.term || ctrl.defaults.pack;

            hasProductOverride = ctrl.product.bbSettings && ctrl.product.bbSettings.selectedTerm && ctrl.product.bbSettings.selectedPack;
            if (hasTemplateOverride) option = findOptionByKeys(ctrl.defaults.term, ctrl.defaults.pack);
            if (!option && hasProductOverride) option = findOptionByKeys(ctrl.product.bbSettings.selectedTerm, ctrl.product.bbSettings.selectedPack);
            if (!option) option = findFirstAvailableOption();
            return option;
        }

        function findFirstAvailableOption() {
            var filteredPriceList = ctrl.priceList.filter(radioFilter),
                options = ctrl.showTerm && ctrl.monthlyAvailable ? ['subscription', ctrl.showTerm] : ['autorenew', ctrl.autorenew];
            return _.find(filteredPriceList, options);
        }

        /**
         * Get the default options either from Product settings or template override
         */
        function findOptionByKeys(term, pack) {
            var isSelectedTerm = void 0,
                filteredPriceList = ctrl.priceList.filter(radioFilter);

            if (!filteredPriceList.length) filteredPriceList = ctrl.priceList;

            term = term || ctrl.selectedOption.term || filteredPriceList[0].term;
            pack = pack || ctrl.selectedOption.pack || filteredPriceList[0].pack;
            return _.find(filteredPriceList, function (obj) {
                isSelectedTerm = term.length > 2 ? obj.term === term : parseInt(obj.term) === parseInt(term);
                return isSelectedTerm && parseInt(obj.pack) === parseInt(pack) && obj.autorenew === ctrl.autorenew;
            });
        }

        /**
         * Get the default options either from Product settings or template override
         */
        function findOptionById() {
            var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ctrl.selectedID;

            return _.find(ctrl.priceList, ['id', parseInt(id)]);
        }

        function setupPriceList(listOrderBy) {
            var productHasAutoRenewal = ctrl.priceList.some(function (item) {
                return ctrl.priceList[0].autorenew !== item.autorenew;
            });

            // if we have only one autorenew and it doesn't match the default one

            if (ctrl.disableAutoRenew === 'true') {
                ctrl.showAR = false;
                ctrl.autorenew = false;
            } else {
                if (!productHasAutoRenewal) {
                    ctrl.showAR = false;
                    ctrl.autorenew = ctrl.priceList[0].autorenew;
                } else {
                    ctrl.showAR = SETUP.showAR;
                }
            }

            // apply default for RU if not overridden
            if (ENV.locale === 'ru-ru') listOrderBy = !listOrderBy ? orderBy.TERM_PACK : listOrderBy;

            var orderByFunc = getOrderByFunction(listOrderBy) || getOrderByFunction(orderBy.PACK_TERM);
            ctrl.priceList.sort(orderByFunc);

            if (ctrl.itemOffersGroupLimit) {
                _.values(_.groupBy(ctrl.priceList, 'autorenew')).forEach(function (arGroup) {
                    var itemsByTerm = _.values(_.groupBy(arGroup, 'term'));

                    if (itemsByTerm.length > 1) {
                        itemsByTerm.forEach(function (groupedList) {
                            groupedList.slice(ctrl.itemOffersGroupLimit).forEach(function (item) {
                                return item.outOfGroupVisibleLimit = true;
                            });
                        });
                    }
                });
            }

            ctrl.selectedOption = getDefaultOption();

            if (ctrl.selectedOption) updateSelectedID(ctrl.selectedOption.id);

            checkMonthlyOptions();

            // Emit Buyblock ready event to currency selector
            $rootScope.buyBlockReady();
            getBuyLink();
            getFirstProductMaxAndMinPrices(ctrl.priceList);
            ctrl.showMoreDevices = hasMoreDevices();
        }

        /**
         * Returns the matching sort function or undefined if not matched to one of orderBy constants
         * @param key
         * @return {function|undefined}
         */
        function getOrderByFunction(key) {
            switch (key) {
                case orderBy.TERM:
                    return buildOrderByFunction('term');
                case orderBy.TERM_PACK:
                    return buildOrderByFunction('term', buildOrderByFunction('pack'));
                case orderBy.PACK:
                    return buildOrderByFunction('pack');
                case orderBy.PACK_TERM:
                    return buildOrderByFunction('pack', buildOrderByFunction('term'));
            }
        }

        /**
         * Builds and returns an int based ordering function for prop
         * @param {String} prop name of prop to sort on
         * @param {function?} equalSort equal case callback
         * @return {function(a, b): number}
         */
        function buildOrderByFunction(prop, equalSort) {
            return function (a, b) {
                var propA = parseInt(a[prop]),
                    propB = parseInt(b[prop]);
                return equalSort && propA === propB ? equalSort(a, b) : propA - propB;
            };
        }

        function checkMonthlyOptions() {
            ctrl.monthlyAvailable = false;
            ctrl.priceList.forEach(function (item) {
                if (parseFloat(item.term) % 1 !== 0) {
                    ctrl.monthlyAvailable = true;
                    ctrl.showTerm = ctrl.product.bbSettings.selectedTab;
                    var dec = Math.round(item.term.match(/\d+(.|,)\d+/g) * 12);
                    item.term = item.term.replace(/\d+(.|,)\d+/g, dec);
                    item.subscription = 'Month';
                } else item.subscription = 'Year';
            });
            switchArCheckbox();
        }

        function isActive(name) {
            return ctrl.showTerm === name;
        }

        function switchTerm(showTerm) {
            ctrl.showTerm = showTerm;
            switchArCheckbox();
        }

        function updateOptions() {
            ctrl.selectedOption = findFirstAvailableOption();
            updateSelectedID(ctrl.selectedOption.id);
            $scope.$emit('productSelected-' + ctrl.productShortName, {
                'scope': ctrl.$id,
                'optionID': ctrl.selectedOption.id,
                'autoRenewal': ctrl.autorenew,
                'priceList': ctrl.priceList
            });
            getBuyLink();
        }

        function switchArCheckbox() {
            ctrl.priceList.some(function (item) {
                if (item.subscription && ctrl.showTerm) {
                    if (ctrl.showTerm === 'Month') {
                        showHideTabs('false', true);
                    } else {
                        showHideTabs('true', false);
                    }
                    ctrl.autorenew = item.autorenew;
                    updateOptions();
                    return true;
                } else {
                    showHideTabs('true', false);
                    return true;
                }
            });
        }

        function showHideTabs(showAR, showOnlyAR) {
            if (ctrl.monthlyAvailable) {
                ctrl.showAR = showAR;
                ctrl.showOnlyAR = showOnlyAR;
            } else ctrl.showTerm = 'Year';
        }

        /**
         * Override buyblock settings with ones from Tridion. Needs to run even if they're set to false.
         */
        function overrideBuyblockSettings() {
            // if we have overridden values come from Tridion - needs to run even if false
            var bbSettings = ctrl.product.bbSettings;

            ['isChecked', 'showAR', 'itemOffersOrderBy', 'itemOffersGroupLimit'].filter(function (key) {
                return angular.isDefined(bbSettings[key]);
            }).forEach(function (key) {
                return ctrl[key] = bbSettings[key];
            });

            if (angular.isDefined(bbSettings.hideArCheckbox) && bbSettings.hideArCheckbox[0]) ctrl.hideArCheckbox = bbSettings.hideArCheckbox[0];
        }

        /**
         * Preparation for pricelist.
         * @param  {Object} response The pricelist object
         */
        function handlePriceSuccess(response) {
            overrideBuyblockSettings();
            resetPricingObjectsToDefault();

            ctrl.priceList = response.data;
            if (!angular.isArray(ctrl.priceList) || !ctrl.priceList.length) {
                return handlePriceError('API not available');
            }
            setupPriceList(ctrl.product.bbSettings.itemOffersOrderBy);
        }

        /**
         * Handles product not found, prices or service not available
         * @param  {String} response
         */
        function handlePriceError(response) {
            ctrl.productPricesExist = false;
            ctrl.isBBReady = true;
            errorService.warn(response);
            return false;
        }

        function setProductPageLink() {
            ctrl.product.prodPageLink = ctrl.hideProductLinks ? '' : ctrl.product.prodPageLink;
        }

        /**
         * Sets the number of options to show in radio list to 6.
         * For US LRC verdicts this is meant to be 3 (except KSC)
         */
        function setOptionsLimit() {
            ctrl.limitTo = ctrl.locale === 'en-us' && $state.includes('lrc-verdict') && !isProductKSC() ? 3 : 6;
        }

        /**
         * Get the product data when we already have the product short name available
         */
        function getProductByName() {
            return productData.getb2c(ctrl.productShortName).then(function (response) {
                handleProductData(response.data.fields);
            });
        }

        /**
         * Checks whether we need to listen for the product data to come from another component
         */
        function getProductData() {
            if (ctrl.productShortName) return getProductByName();

            var productInfo = $scope.$watch('$ctrl.productInfo', function (newV) {
                if (!newV) return;
                handleProductData(ctrl.productInfo);
                productInfo();
            });
        }

        function isProductKSC() {
            return ctrl.productShortName.indexOf('ksc') > -1;
        }
        /**
         * Set up product data bindings
         * @param  {Object} product Product data
         */
        function handleProductData(product) {
            ctrl.product = ctrl.productInfo = product;
            if (!ctrl.productShortName) ctrl.productShortName = product.shortName;
            ctrl.productName = product.title;
            ctrl.showEvenDevices = product.bbSettings.showEvenDevices;
            productSelected = $rootScope.$on('productSelected-' + ctrl.productShortName, handleProductSelected);

            if (ctrl.locale === 'en\-global' && isProductKSC()) blockProhibitedCountries();
            if (ctrl.product.bbSettings.purchaseType !== 'Free' && !ctrl.isProductBlocked) getPriceList();
            doScreenshotsSeo();
            setProductPageLink();
            setOptionsLimit();
            ctrl.hasBundle = $state.params.bundle && ctrl.product.enableBundle && ctrl.product.enableBundle[0] === 'True' && ctrl.product.bundleProductName;
        }

        function blockProhibitedCountries() {
            if (geoLocationManager.isKscProhibitedCountry()) {
                ctrl.isProductBlocked = true;
                handlePriceError('Product not available in this country');
            }
        }

        /**
         * Whether to show the button 'Show more devices' or not
         * @return {Boolean}
         */
        function hasMoreDevices() {
            var checkAutoRenewal = _.countBy(ctrl.priceList, 'autorenew');
            return checkAutoRenewal.false ? checkAutoRenewal.false > ctrl.limitTo : checkAutoRenewal.true > ctrl.limitTo;
        }

        /**
         * Set an option from the radio checkbox or from another buyblock. If ID is present, it's internal.
         * @param {String|Number} id The ID of the option to select
         */
        function setSelectedOption(id) {
            if (angular.isUndefined(id)) {
                $scope.$emit('productSelected-' + ctrl.productShortName, {
                    'scope': ctrl.$id,
                    'optionID': ctrl.selectedID,
                    'autoRenewal': ctrl.autorenew,
                    'priceList': ctrl.priceList
                });
            }

            if (angular.isArray(ctrl.priceList)) ctrl.selectedOption = findOptionById(id) || findFirstAvailableOption();
            getBuyLink();
        }

        /**
         * Reapply an existing option (e.g. if switching from AR to non-AR)
         */
        function applyOption() {
            ctrl.selectedOption = findOptionByKeys() || findFirstAvailableOption();
            updateSelectedID(ctrl.selectedOption.id);
            $scope.$emit('productSelected-' + ctrl.productShortName, {
                'scope': ctrl.$id,
                'optionID': ctrl.selectedOption.id,
                'autoRenewal': ctrl.autorenew,
                'priceList': ctrl.priceList
            });
            getBuyLink();
        }

        /**
         * Get the buy link for the current selected option
         */
        function getBuyLink() {
            ctrl.isBBReady = false;
            if (angular.isUndefined(ctrl.selectedOption)) return false;
            return priceData.getCartLink(ctrl.selectedOption.product_id, ctrl.selectedOption.id, ctrl.purchaseType, ctrl.productName, ctrl.resellerOverride).then(handleBuyLinkSuccess, handleBuyLinkError).then(function () {
                ctrl.isBBReady = true;
            });
        }

        /**
         * Prepare checkout link for tracking
         * @param  {Object} response The checkout link object
         */
        function handleBuyLinkSuccess(response) {
            ctrl.buyLink = response.data;
        }

        /**
         * Handle link not found
         * @param  {Object|String} response
         */
        function handleBuyLinkError(response) {
            errorService.warn(response);
            ctrl.buyLink = 'Oops! Something went wrong';
        }

        function moreDevicesPopup() {
            ngDialog.open(buyblockService.ngDialogSettings(ctrl, $scope, {
                'className': 'ngdialog-no-bg',
                'template': '/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-more-devices-popup.html'
            }));
        }

        function accountDescPopup() {
            ngDialog.open(buyblockService.ngDialogSettings(ctrl, $scope, {
                'className': 'ngdialog-plain ngdialog-narrow',
                'template': '/resources/template/html/modules/b2c/components/kscloud-disclaimers/templates/account-description.html'
            }));
        }

        function getFirstProductMaxAndMinPrices(priceList) {
            if (!angular.isArray(priceList)) return;
            if (!$rootScope.mainProductAlreadySelected) {
                var filteredPriceList = priceList.filter(function (x) {
                    return ctrl.radioFilter(x);
                });
                ctrl.minValue = filteredPriceList[0].price;
                ctrl.maxValue = filteredPriceList[filteredPriceList.length - 1].price;
                $rootScope.mainProductAlreadySelected = true;
            }
        }

        /**
         * Get savings messaging and value (either custom or default)
         */
        function getSavings(messageType) {
            if (angular.isUndefined(ctrl.product) || angular.isUndefined(ctrl.buyblockData) || angular.isUndefined(ctrl.selectedOption)) return;

            var overrideText = ctrl.hasBundle && ctrl.isBundleActive ? 'Save Now!' : null;

            return buyblockService.getSavings(messageType, ctrl.selectedOption, ctrl.product.bbSettings, ctrl.buyblockData, overrideText || ctrl.saveRateText, ctrl.savingsPriceType, ctrl.component);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.buyblocks').component('buyblockVsbDropdown', {
        'bindings': {
            'productShortName': '@productName', //for cases when we only know the name of the product
            'productInfo': '<', //for cases when we have all product data available
            'purchaseType': '@',
            'selectedPack': '@',
            'selectedTerm': '@',
            'selectedAutorenew': '@',
            'estore': '@',
            'template': '@',
            'overrideTrialButtonText': '@',
            'overrideTrialButtonLink': '@',
            'hideProductLinks': '@',
            'promoline': '@',
            'hideTrialButton': '@',
            'saveRateText': '@',
            'savingsPriceType': '@',
            'disableAutoRenew': '@',
            'setCustomLocale': '@'
        },
        'controller': 'buyblockVsbDropdownController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'vsb-dropdown';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/buyblock/templates/buyblock-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    buyblockVsbDropdownController.$inject = ["$rootScope", "$scope", "$state", "ENV", "SETUP", "buyBlockHelperService", "directiveData", "priceData", "productData", "tracking", "windowHelperService", "buyblockService", "appHelperService", "errorService"];
    angular.module('kappGlobal.buyblocks').controller('buyblockVsbDropdownController', buyblockVsbDropdownController);

    function buyblockVsbDropdownController($rootScope, $scope, $state, ENV, SETUP, buyBlockHelperService, directiveData, priceData, productData, tracking, windowHelperService, buyblockService, appHelperService, errorService) {
        var ctrl = this;
        ctrl.isChecked = '' + SETUP.isChecked;
        ctrl.showAR = '' + SETUP.showAR;
        ctrl.productPricesExist = true;
        ctrl.currency = buyblockService.getCurrency(ctrl);
        ctrl.currentValue = {
            'price': 'no data',
            'eStore': '/store'
        };
        if (!ctrl.isCustomLocale) ctrl.curState = $state.current.parent;
        ctrl.termArr = [];
        ctrl.buyLink = 'no data received yet';
        ctrl.defaultAutorenew = ctrl.isChecked === 'true';
        ctrl.selectedPackString = '';
        ctrl.selectedTermString = '';
        ctrl.showARPopup = showARPopup;
        ctrl.registerOnce = registerOnce;
        ctrl.getPriceList = getPriceList;
        ctrl.setCurrentValue = setCurrentValue;
        ctrl.sendToBuyUrl = sendToBuyUrl;
        ctrl.addSalesTrackingParameters = addSalesTrackingParameters;
        ctrl.getPromoline = getPromoline;
        ctrl.getSavings = getSavings;
        ctrl.isTotal = appHelperService.assertStateByName('smb-product-total');

        // $rootScope destroy events begin
        var arPopupCheck = $rootScope.$on('arPopupCheck', function (event, value) {
            ctrl.autorenew = value;
            setCurrentValue();
        }),
            disableAR = $rootScope.$on('disableAR', function () {
            ctrl.autorenew = false;
            setCurrentValue();
        }),
            currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange);
        // $rootScope destroy events end
        ctrl.$onInit = activate;
        ctrl.hasTrialButton = hasTrialButton;

        function activate() {
            ctrl.locale = ctrl.locale || ENV.locale;
            ctrl.isCustomLocale = checkCustomLocale();

            getProductData();

            $scope.$on('$destroy', handleScopeDestroyed);
        }

        function addSalesTrackingParameters(event) {
            if (event) event.preventDefault();
            if (!ctrl.error) ctrl.sendToBuyUrl();
        }

        function getPromoline() {
            return ctrl.promoline ? ctrl.promoline : ctrl.buyblockData ? ctrl.buyblockData.promoline : undefined;
        }

        function isTotalOrHybridCloud() {
            var name = ctrl.productName;
            return name === 'Kaspersky Total Security for Business' || name.indexOf('Kaspersky Hybrid Cloud') !== -1;
        }

        function getPriceList() {
            if (angular.isUndefined(ctrl.productName)) return;
            setEStore();
            return priceData.getPrice(ctrl.productName, ctrl.purchaseType, ctrl.currency, ctrl.newEstore || '').then(handlePriceSuccess, handlePriceError);
        }

        function registerOnce(checked) {
            if (ctrl.modalDisplayedOnce) return;

            ctrl.modalDisplayedOnce = true;
            buyblockService.registerOnce(checked, ctrl.defaultAutorenew, true);
        }

        function sendToBuyUrl() {
            windowHelperService.goToUrl(tracking.formatQueryString(ctrl.buyLink, buyBlockHelperService.hasPurchaseAsPurchaseType(ctrl.purchaseType)));
        }

        function setPackArr() {
            var packListMatchingSelectedTerm = ctrl.priceList.filter(function (i) {
                return i.term === ctrl.termValue;
            }).map(function (i) {
                return i.pack;
            });

            ctrl.packArr = _.uniq(packListMatchingSelectedTerm).sort(function (a, b) {
                return parseInt(a) - parseInt(b);
            });
        }

        function setCurrentValue() {
            // A check for proper text input begin
            var packNumber = parseInt(ctrl.packValue, 10);
            ctrl.error = false;

            if (ctrl.isCustomLocale) {
                if (isNaN(packNumber)) ctrl.packValue = ctrl.minValue; // for IE which allows symbols in the number input

                if (angular.isUndefined(ctrl.packValue) || packNumber > 0 && packNumber < ctrl.minValue) {
                    ctrl.error = true; // the value is incorrect but user could continue his input to get a valid number, triggers red border
                    return false;
                }

                ctrl.error = false;

                if (packNumber <= 0) ctrl.packValue = ctrl.minValue;
            }

            if (packNumber > ctrl.maxValue) ctrl.packValue = ctrl.maxValue;

            if (ctrl.packValue === undefined) {
                ctrl.error = true;
                return;
            }

            findMatch();
            ctrl.renewalAvailable = buyblockService.checkRenewal(ctrl.priceList, ctrl.packValue, ctrl.termValue, mustParsePackValue());
            return priceData.getCartLink(ctrl.currentValue.product_id, ctrl.currentValue.id, ctrl.purchaseType).then(function (response) {
                ctrl.buyLink = response.data;
            }, function (rejection) {
                errorService.warn(rejection);
                ctrl.buyLink = 'Oops! Something went wrong';
            });
        }

        function showARPopup() {
            buyblockService.showARPopup();
        }

        // Private methods
        function buyblockSetup() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                var isB2B = $state.current.parent ? Boolean($state.current.parent.match(/(smb|vsb)/ig)) : false;
                ctrl.buyblockData = response.data.fields;
                ctrl.buyblockData.unavailableMsgType = '';
                if (ctrl.buyblockData.buyblock_not_available_msg) ctrl.buyblockData.unavailableMsgType = 'b2c';
                if (ctrl.buyblockData.buyblock_not_available_b2b_msg) ctrl.buyblockData.unavailableMsgType = 'b2b';
                checkDisclaimer(isB2B);
                checkMetaCountries();
            });
        }

        function checkCustomLocale() {
            var customLocales = ['da-dk', 'en-us', 'es-es', 'fr-fr', 'it-it', 'ja-jp', 'nb-no', 'nl-nl', 'ru-ru', 'sv-se'];
            return ctrl.setCustomLocale || customLocales.indexOf(ctrl.locale) > -1;
        }

        function checkMetaCountries() {
            var metaCountries = ['en-za', 'en-ae', 'ar-ae', 'tr-tr'];
            if (metaCountries.indexOf(ctrl.locale) > -1) ctrl.buyblockData.needMore = ctrl.buyblockData.or;
        }

        function checkDisclaimer(isB2B) {
            var b2bDisclaimer = ctrl.buyblockData.disclaimer || ctrl.buyblockData.smbDisclaimer,
                hideAsteriskOnB2B = ctrl.product && ctrl.product.hideAsterisk && ctrl.product.hideAsterisk[0] === 'true' && isB2B;

            if (ctrl.locale === 'en-us' && $rootScope.kaspersky.verdictSite === 'LRC') return ctrl.disclaimerObj = {};

            ctrl.disclaimerObj = ctrl.product && ctrl.product.bbDisclaimer ? { 'disclaimer': ctrl.product.bbDisclaimer, 'asterisk': hideAsteriskOnB2B ? '' : '*' } : buyblockService.checkDisclaimer(isB2B, ctrl.buyblockData.b2cDisclaimer, b2bDisclaimer, hideAsteriskOnB2B);
        }

        function setProductPageLink() {
            ctrl.product.prodPageLink = ctrl.hideProductLinks ? '' : ctrl.product.prodPageLink;
        }

        function getProductData() {
            if (ctrl.productShortName) {
                // for cases when we only know the name of the product
                return getCustomProduct();
            } else {
                // for cases when we have all product data available
                $scope.$watch('$ctrl.productInfo', function (newV) {
                    if (newV && angular.isObject(newV)) {
                        ctrl.product = ctrl.productInfo;
                        ctrl.productName = ctrl.productInfo.title;
                        ctrl.getPriceList();
                        setProductPageLink();
                        buyblockSetup();
                    }
                });
            }
        }

        function handleCurrencyChange() {
            ctrl.currency = $rootScope.currency || '';
            ctrl.getPriceList();
            ctrl.packValue = ctrl.minValue;
        }

        function handleScopeDestroyed() {
            arPopupCheck();
            disableAR();
            currencyChange();
        }

        /**
         * ctrl.product.bbSettings.eStore pulls data from Tridion component, ctrl.estore takes it from parameter passed in
         * this conditional is probably used to target buyblocks outside of LRC, added lrc state detection to make it work for ATT verdicts - AFedotov
         */
        function setEStore() {
            if (ctrl.estore || $state.includes('lrc-verdict')) {
                ctrl.newEstore = ctrl.estore;
            } else {
                ctrl.newEstore = ctrl.product && ctrl.product.bbSettings ? ctrl.product.bbSettings.eStore : '';
            }
        }

        function setupPriceList() {
            var hasAutoRenewal = ctrl.priceList.some(function (item) {
                return ctrl.showAR !== false && ctrl.priceList[0].autorenew !== item.autorenew;
            });

            ctrl.termArr = _.uniq(ctrl.priceList.map(function (i) {
                return i.term;
            }));

            if (ctrl.disableAutoRenew === 'true') {
                ctrl.showAR = false;
                ctrl.autorenew = false;
            } else {
                if (!hasAutoRenewal) {
                    ctrl.showAR = false;
                    if (!ctrl.isCustomLocale) ctrl.defaultAutorenew = ctrl.priceList[0].autorenew;
                } else {
                    ctrl.showAR = '' + SETUP.showAR;
                }
            }

            function setCustomSelectedTerm() {
                _.forEach(ctrl.termArr, function (value) {
                    if (parseInt(value) === parseInt(ctrl.selectedTerm || ctrl.product.bbSettings.selectedTerm)) {
                        ctrl.selectedTermString = value;
                    }
                });
            }

            if (ctrl.product.bbSettings && (ctrl.selectedTerm || ctrl.product.bbSettings.selectedTerm)) setCustomSelectedTerm();
            ctrl.termValue = ctrl.selectedTermString || ctrl.termArr[0];
            ctrl.autorenew = ctrl.defaultAutorenew;

            setPackArr();

            // Min and max value search
            findMinMax();

            function findMinMax() {
                var mappedPackArr = _.map(ctrl.packArr, function (obj) {
                    return parseInt(obj);
                });
                ctrl.maxValue = Math.max.apply(Math, mappedPackArr);
                ctrl.minValue = Math.min.apply(Math, mappedPackArr);
            }

            function setCustomSelectedPack() {
                var x = parseInt(ctrl.selectedPack || ctrl.product.bbSettings.selectedPack);
                ctrl.selectedPackString = ctrl.packArr.sort(function (a, b) {
                    return Math.abs(x - parseInt(a)) - Math.abs(x - parseInt(b));
                })[0];
                ctrl.showMinMaxDisclaimer = x > parseInt(ctrl.selectedPackString) || x < parseInt(ctrl.selectedPackString);
            }

            // let packValueInt = (ctrl.template === 'smb-prod' && !ctrl.isCustomLocale) ? parseInt(ctrl.packArr[0]) : ctrl.packArr[0];
            if (ctrl.product.bbSettings && (ctrl.selectedPack || ctrl.product.bbSettings.selectedPack)) setCustomSelectedPack();
            if (!ctrl.isCustomLocale) ctrl.packValue = parseInt(ctrl.selectedPackString) || parseInt(ctrl.packArr[0]);
            if (ctrl.isCustomLocale) ctrl.packValue = ctrl.selectedPackString || ctrl.packArr[0];
            // ctrl.packValue = ctrl.selectedPackString || packValueInt;

            // Emit Buyblock ready event to currency selector
            $rootScope.buyBlockReady();
            setCurrentValue();
        }

        function handlePriceError(response) {
            ctrl.productPricesExist = false;
            ctrl.isTotalOrHybridCloud = isTotalOrHybridCloud();
            errorService.warn(response);
        }

        function handlePriceSuccess(response) {
            if (ctrl.product.bbSettings.isChecked) ctrl.isChecked = ctrl.product.bbSettings.isChecked;
            if (ctrl.product.bbSettings.showAR) ctrl.showAR = ctrl.product.bbSettings.showAR;

            ctrl.priceList = response.data;
            if (!angular.isObject(ctrl.priceList) || !ctrl.priceList.length) {
                errorService.warn('API not available');
                ctrl.productPricesExist = false;
                ctrl.isTotalOrHybridCloud = isTotalOrHybridCloud();
                return false;
            }
            setupPriceList();
            ctrl.productPricesExist = true;
        }

        function getCustomProduct() {
            var promiseFn = productData.getsmb;
            if (ctrl.productShortName === 'ksos') promiseFn = productData.getvsb;
            return promiseFn(ctrl.productShortName).then(function (response) {
                ctrl.product = ctrl.productInfo = response.data.fields;
                ctrl.productName = response.data.fields.title;
                setProductPageLink();
                buyblockSetup();
            }).then(function () {
                ctrl.getPriceList();
            });
        }

        function findMatch() {
            var matchConfig = {
                'pack': ctrl.packValue,
                'term': ctrl.termValue,
                'autorenew': ctrl.autorenew
            },
                matchIndex = buyblockService.findPriceMatch(ctrl.priceList, matchConfig, mustParsePackValue());

            if (matchIndex < 0) {
                matchConfig.autorenew = !matchConfig.autorenew;

                matchIndex = buyblockService.findPriceMatch(ctrl.priceList, matchConfig, mustParsePackValue());
            }

            if (matchIndex > -1) {
                ctrl.currentValue = ctrl.priceList[matchIndex];
                ctrl.currentValuePack = ctrl.currentValue.pack.split(' + ');
                ctrl.packValue = ctrl.isCustomLocale ? ctrl.currentValue.pack : parseInt(ctrl.currentValuePack[0]);
            }
        }

        function mustParsePackValue() {
            return ctrl.locale !== 'ru-ru' && ctrl.locale !== 'ja-jp';
        }

        function hasTrialButton() {
            return buyblockService.hasTrialButton(ctrl.product) && !ctrl.hideTrialButton;
        }

        /**
         * Get savings messaging and value (either custom or default)
         */
        function getSavings(messageType) {
            if (ctrl.product) return buyblockService.getSavings(messageType, ctrl.currentValue, ctrl.product.bbSettings, ctrl.buyblockData, ctrl.saveRateText, ctrl.savingsPriceType);
        }
    }
})();
'use strict';

(function () {
    buyblockService.$inject = ["$rootScope", "currencyManager", "windowHelperService", "sessionStorageService", "appHelperService", "$filter", "SETUP"];
    angular.module('kappGlobal.buyblocks').factory('buyblockService', buyblockService);

    function buyblockService($rootScope, currencyManager, windowHelperService, sessionStorageService, appHelperService, $filter, SETUP) {
        return {
            'sendToBuyUrl': sendToBuyUrl,
            'hasPurchaseAsPurchaseType': hasPurchaseAsPurchaseType,
            'getCurrency': getCurrency,
            'checkDisclaimer': checkDisclaimer,
            'registerOnce': registerOnce,
            'showARPopup': showARPopup,
            'checkRenewal': checkRenewal,
            'ngDialogSettings': ngDialogSettings,
            'findPriceMatch': findPriceMatch,
            'hasTrialButton': hasTrialButton,
            'getSavings': getSavings
        };

        function sendToBuyUrl(buyLink) {
            return windowHelperService.goToUrl(buyLink);
        }

        function hasPurchaseAsPurchaseType(purchaseType) {
            return purchaseType && purchaseType === 'purchase';
        }

        function ngDialogSettings(ctrl, scope, settings) {
            var defaultSettings = {
                'data': ctrl,
                'scope': scope
            };

            if (settings) for (var attr in settings) {
                defaultSettings[attr] = settings[attr];
            }return defaultSettings;
        }

        function getCurrency(value) {
            currencyManager.getCurrencies();
            if (!value.currency) return $rootScope.currency || '';
            $rootScope.populateCurrency({
                'currency': value.currency,
                'symbol': value.symbol,
                'locale': value.locale
            });
            return value;
        }

        function checkDisclaimer(isB2B, b2cDisclaimer, b2bDisclaimer, hideAsteriskOnB2B) {
            var disclaimerObj = {};

            if (!isB2B && b2cDisclaimer) {
                disclaimerObj.asterisk = '*';
                disclaimerObj.disclaimer = b2cDisclaimer;
            }

            if (isB2B && b2bDisclaimer) {
                disclaimerObj.asterisk = hideAsteriskOnB2B ? '' : '*';
                disclaimerObj.disclaimer = b2bDisclaimer;
            }

            return disclaimerObj;
        }

        function registerOnce(checked, defaultAutoRenew) {
            var canClickTwice = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (!defaultAutoRenew) return;
            var isRegistered = sessionStorageService.get('unchecked');
            if (isRegistered && canClickTwice) {
                $rootScope.$emit('clickedTwice');
                return;
            }
            if (isRegistered) return;
            sessionStorageService.set('unchecked', 'true');
            $rootScope.$emit('onceUnchecked');
            if (checked) {
                $rootScope.$emit('checkboxClicked', true);
            }
        }

        function showARPopup() {
            var arPopupButtons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'true';

            $rootScope.$emit('toggleARPopup', arPopupButtons);
            $rootScope.$emit('onceUnchecked');
        }

        /**
         * Given a list of price configurations, check if there are two different
         * configurations for the same pack and term values, one with autorenew enabled
         * and another one with no autorenew.
         * @param {object[]} priceList - List containing all the price configurations
         * @param {string | number} packValue - Provided pack value
         * @param {string} termValue - Provided term value
         * @param {boolean} parsePack - If provided and true, the value of the field
         *                              'pack' will be parsed to int before comparing
         * @returns {boolean} True if both configurations are found; false otherwise
         */
        function checkRenewal(priceList, packValue, termValue, parsePack) {
            var manualConfig = {
                'pack': packValue,
                'term': termValue,
                'autorenew': false
            },
                autoConfig = {
                'pack': packValue,
                'term': termValue,
                'autorenew': true
            };

            return findPriceMatch(priceList, manualConfig, parsePack) > -1 && findPriceMatch(priceList, autoConfig, parsePack) > -1;
        }

        /**
         * Find a matching price config on a provided price list.
         * @param {object[]} priceList - List containing all the price configurations
         * @param {object} matchConfig - Target config to be found in the price list
         * @param {boolean} parsePack - If provided and true, the value of the field
         *                              'pack' will be parsed to int before comparing
         * @returns {number} The index of the first appearance of a matching config, if any; -1 otherwise
         */
        function findPriceMatch(priceList, matchConfig, parsePack) {
            var comparator = parsePack ? function (config) {
                return parseInt(config.pack) === parseInt(matchConfig.pack) && config.term === matchConfig.term && config.autorenew === matchConfig.autorenew;
            } : matchConfig;

            return _.findIndex(priceList, comparator);
        }

        /**
         * Check if the trial button must be shown or hidden
         * @param {object} productData - Product data from Tridion
         * @returns {boolean} True if trial button must be shown, false otherwise
         */
        function hasTrialButton(productData) {
            if (!productData) return true;
            if (!productData.freeTrialLink) return false;

            var hideInB2c = _.first(productData.hideTrialFromB2C) === 'True';
            var isB2cPage = appHelperService.assertStateByName('home-security');
            if (isB2cPage && hideInB2c) return false;

            var hideInSmb = _.first(productData.hideTrialFromSMB) === 'True';
            var isSmbPage = appHelperService.assertStateByName('vsb-home');
            if (isSmbPage && hideInSmb) return false;

            var hideInVsb = _.first(productData.hideTrialFromVSB) === 'True';
            var isVsbPage = appHelperService.assertStateByName('vsb-home');
            if (isVsbPage && hideInVsb) return false;

            var hideInLrc = SETUP.trialButtonsInsideLrc === 'false' || _.first(productData.hideTrialFromLRC) === 'True';
            var isLrcPage = appHelperService.assertStateByName(['lrc-verdict', 'lrc-serial', 'lrc-b2b', 'lrc-b2b-att', 'lrc-b2c', 'lrc-b2c-att', 'lrc-fallback', 'vsb-lrc-closed']);
            if (isLrcPage && hideInLrc) return false;

            var hideInProductPage = _.first(productData.hideTrialFromProductPage) === 'True';
            var isProductPage = false;
            switch (productData.shortName) {
                case 'kac':
                    isProductPage = appHelperService.assertStateByName('product-adcleaner');
                    break;
                case 'kbls':
                    isProductPage = appHelperService.assertStateByName('product-battery-life-saver');
                    break;
                case 'kcp':
                    isProductPage = appHelperService.assertStateByName('product-cleaner');
                    break;
                case 'kfa':
                    isProductPage = appHelperService.assertStateByName('product-kfa');
                    break;
                case 'kisa-free':
                    isProductPage = appHelperService.assertStateByName('product-kisa-free');
                    break;
                case 'kpm':
                    isProductPage = appHelperService.assertStateByName('home-product-kpm');
                    break;
                case 'kqs':
                    isProductPage = appHelperService.assertStateByName('product-qr-scanner');
                    break;
                case 'ksc':
                    isProductPage = appHelperService.assertStateByName('product-system-checker');
                    break;
                case 'kscloud':
                    isProductPage = appHelperService.assertStateByName('home-product-kscloud');
                    break;
                case 'ksec':
                    isProductPage = appHelperService.assertStateByName('product-ksec');
                    break;
                case 'ksk':
                    isProductPage = appHelperService.assertStateByName('product-ksk');
                    break;
                case 'kss':
                    isProductPage = appHelperService.assertStateByName('product-kss');
                    break;
                case 'kwc': // Fall-through
                case 'ksu':
                    isProductPage = appHelperService.assertStateByName('product-ksu');
                    break;
                case 'kvs':
                    isProductPage = appHelperService.assertStateByName('product-kvs');
                    break;
                case 'kvspro':
                    isProductPage = appHelperService.assertStateByName('product-kvspro');
                    break;
                case 'kav': // Fall-through
                case 'kis': // Fall-through
                case 'kisa': // Fall-through
                case 'kismac': // Fall-through
                case 'ktsmd':
                    isProductPage = appHelperService.assertStateByName('home-product');
                    break;
                case 'kcpc': // Fall-through
                case 'kcpcs': // Fall-through
                case 'kpctu': // Fall-through
                case 'kpis': // Fall-through
                case 'kwbsc':
                    isProductPage = appHelperService.assertStateByName('premium-service');
                    break;
                case 'ksc-family':
                case 'ksc-personal':
                    isProductPage = appHelperService.assertStateByName('home-product-kscloud');
                    break;
                case 'kps': // Fall-through
                case 'ksos':
                    isProductPage = appHelperService.assertStateByName('vsb-product');
                    break;
                case 'kseb-core': // Fall-through
                case 'cloud':
                    isProductPage = appHelperService.assertStateByName('smb-product-cloud');
                    break;
                case 'kseb-advanced':
                    isProductPage = appHelperService.assertStateByName('smb-product-advanced');
                    break;
                case 'kseb-select':
                    isProductPage = appHelperService.assertStateByName('smb-product-select');
                    break;
                case 'total':
                    isProductPage = appHelperService.assertStateByName('smb-product-total');
                    break;
            }
            return !(isProductPage && hideInProductPage);
        }

        function roundPricingPercentage(num) {
            return Math.floor(num / 5) * 5;
        }

        function getSavings(messageType, selectedOption, bbSettings) {
            var buyblockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var customSaveText = arguments[4];
            var customSavingsPriceType = arguments[5];
            var component = arguments[6];

            var savingsPrice = '',
                currentPrice = selectedOption.price,
                priceStriked = selectedOption.price_striked,
                savingsPriceType = customSavingsPriceType || bbSettings && bbSettings.savingsPriceType,
                savingsText = customSaveText || bbSettings && bbSettings.saveRateText || (messageType === 'rate' ? buyblockData.saveRate : buyblockData.saveText);

            if (angular.isDefined(component) && angular.isDefined(bbSettings.saveMsgOverride)) {
                for (var i = 0; i < bbSettings.saveMsgOverride.length; i++) {
                    if (bbSettings.saveMsgOverride[i].component === component) {
                        savingsText = bbSettings.saveMsgOverride[i].savingsMsgOverride;
                        savingsPriceType = bbSettings.saveMsgOverride[i].savingsPriceType;
                    }
                }
            }

            if (!savingsPriceType) {
                return savingsText;
            }

            if (savingsPriceType && savingsText) {
                if (savingsPriceType === 'difference') {
                    savingsPrice = $filter('customCurrency')(priceStriked - currentPrice);
                }

                if (savingsPriceType === 'percentage') {
                    savingsPrice = Math.round(roundPricingPercentage((priceStriked - currentPrice) / priceStriked * 100)) + '%';
                }

                if (savingsPriceType === 'exact') {
                    savingsPrice = Math.round((priceStriked - currentPrice) / priceStriked * 100) + '%';
                }
            }

            savingsText = _.replace(savingsText, '((savings))', savingsPrice) || false;

            return savingsText;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.buyblocks').component('buyblockUserAccount', {
        'bindings': {
            'label': '@',
            'count': '<',
            'accountInfoOverride': '@',
            'descriptionPopup': '@',
            'productName': '@'
        },
        'controller': 'buyblockUserAccountController',
        'templateUrl': '/resources/template/html/modules/_shared/components/buyblock-user-account/templates/buyblock-user-accounts.html'
    });
})();
'use strict';

(function () {
    'use strict';

    buyblockUserAccountController.$inject = ["$scope", "ngDialog", "buyblockService", "messageFormatService"];
    angular.module('kappGlobal.buyblocks').controller('buyblockUserAccountController', buyblockUserAccountController);

    function buyblockUserAccountController($scope, ngDialog, buyblockService, messageFormatService) {
        var ctrl = this;
        ctrl.$id = $scope.$id || Math.random().toString(36).substring(7);

        ctrl.$onChanges = function () {
            ctrl.setShowFlags();

            if (ctrl.showAccountLabel && ctrl.label) {
                ctrl.setPluralizedLabel();
            }
        };

        ctrl.openDescriptionPopup = function () {
            ngDialog.open(buyblockService.ngDialogSettings(ctrl, $scope, {
                'className': 'ngdialog-plain ngdialog-narrow',
                'template': '/resources/template/html/modules/b2c/components/kscloud-disclaimers/templates/account-description.html'
            }));
        };

        ctrl.setShowFlags = function () {
            ctrl.showAccountOverride = ctrl.hasAccountOverride();
            ctrl.showAccountLabel = !ctrl.hasAccountOverride() && ctrl.hasLabel() && ctrl.hasCount();
            ctrl.showPopupIcon = ctrl.hasDescriptionPopup() && (ctrl.showAccountOverride || ctrl.showAccountLabel);
        };

        ctrl.setPluralizedLabel = function () {
            if (!ctrl._mfFormatter || ctrl._mfFormatterLabel !== ctrl.label) {
                ctrl._mfFormatterLabel = ctrl.label;
                // userAccounts: name of the resulting formatter
                ctrl._mfFormatter = messageFormatService.compile({ 'userAccounts': ctrl.label });
            }

            ctrl._mfFormatter.then(function (formatter) {
                // USER_ACCOUNTS: name of the param passed
                ctrl.pluralizedLabel = formatter.userAccounts({ 'USER_ACCOUNTS': ctrl.count });
            });
        };

        ctrl.hasAccountOverride = function () {
            return isStringNonEmpty(ctrl.accountInfoOverride);
        };

        ctrl.hasLabel = function () {
            return isStringNonEmpty(ctrl.label);
        };

        ctrl.hasDescriptionPopup = function () {
            return isStringNonEmpty(ctrl.descriptionPopup);
        };

        ctrl.hasCount = function () {
            return angular.isDefined(ctrl.count) && ctrl.count > 0;
        };

        function isStringNonEmpty(str) {
            return angular.isDefined(str) && str.trim() !== '';
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.callbackForm').component('callbackForm', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/callback-form/templates/callback-form-button.html',
        'controller': 'callbackFormController'
    });
})();
'use strict';

(function () {
    'use strict';

    callbackFormController.$inject = ["directiveData", "$scope", "errorService", "ENV", "ngDialog", "$http", "$timeout", "$document"];
    angular.module('kappGlobal.callbackForm').controller('callbackFormController', callbackFormController);

    function callbackFormController(directiveData, $scope, errorService, ENV, ngDialog, $http, $timeout, $document) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.$onInit = activate;
        ctrl.requestCallbackForm = requestCallbackForm;
        ctrl.setCallbackBtnWidth = {};
        ctrl.callbackIsEnabled = false;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('page-header').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.callbackIsEnabled = ctrl.data.enableCallbackWidget && ctrl.data.enableCallbackWidget[0] === 'true';

                if (ctrl.callbackIsEnabled) {
                    return $http.get('/content/' + ctrl.env + '/site-header/callback-widget.json').then(function (response) {
                        ctrl.callbackPopup = response.data.fields;

                        $timeout(function () {
                            ctrl.setCallbackBtnWidth = {
                                'width': $document.find('#callback-button').outerWidth(true) + 1
                            };
                        });
                    }).catch(handleRejection);
                }
            }).catch(handleRejection);
        }

        function requestCallbackForm(munchkinId, formId) {
            ngDialog.open({
                'template': '/resources/template/html/modules/_shared/components/callback-form/templates/callback-form.html',
                'className': 'ngdialog-flyout ngdialog-callback-form',
                'data': ctrl,
                'showClose': false,
                'controller': ['marketoHelperService', function (marketoHelperService) {
                    marketoHelperService.loadMarketo(munchkinId, formId, $scope);
                }]
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.compareTable').component('compareTable', {
        'bindings': {
            'resource': '@',
            'hideProductLinks': '@',
            'component': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/compare-table/templates/compare-table.html',
        'controller': 'compareTableController'
    });
})();
'use strict';

(function () {
    'use strict';

    compareTableController.$inject = ["$http", "$element", "$scope", "directiveData", "osDetectService", "appHelperService", "$rootScope", "errorService", "ENV"];
    angular.module('kappGlobal.compareTable').controller('compareTableController', compareTableController);

    function compareTableController($http, $element, $scope, directiveData, osDetectService, appHelperService, $rootScope, errorService, ENV) {
        var ctrl = this;
        ctrl.bbData = {};
        ctrl.locale = ENV.locale;
        ctrl.setBuyblockValueByProduct = setBuyblockValueByProduct;
        ctrl.$onInit = activate;
        ctrl.checkForHomeSecurityState = checkForHomeSecurityState;
        ctrl.term = ctrl.locale === 'en-us' && appHelperService.stateIncludes('lrc-b2c') ? 2 : '';

        var ngRender = $rootScope.$on('ngRender', function () {
            return ctrl.data ? runScripts() : ngRender();
        });

        function activate() {
            getData();
            setPromoline();
        }

        function setBuyblockValueByProduct(product, term, pack, autorenew) {
            ctrl.bbData[product] = { 'term': term, 'pack': pack, 'autorenew': autorenew };
        }

        function checkForHomeSecurityState() {
            return appHelperService.assertStateByName(['home-security', 'home-product']);
        }

        function setPromoline() {
            directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                var buyblockData = response.data.fields;
                ctrl.promoline = buyblockData.promoline;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        // Helper Methods
        function getData() {
            var featuredProducts = getFeaturedProducts();
            return directiveData.getByUrl(featuredProducts).then(function (response) {
                ctrl.featureSet = []; //Contains objects of every unique feature
                if (!response.data.fields) return false;
                ctrl.header = response.data.fields;
                ctrl.data = response.data.fields.products;
                ctrl.featuresResponse = response.data.fields.featuresOverride;
                var uniqueFeaturedArray = [];
                var counter = 0;
                ctrl.data.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item, { 'cache': true }).then(function (response) {
                            var featuresArray = Object.keys(response.data.fields.productFeatures).map(function (key) {
                                return response.data.fields.productFeatures[key];
                            });
                            ctrl.data[index] = response.data.fields;
                            for (var i in featuresArray) {
                                var featured = featuresArray[i];
                                if (angular.isDefined(featured.name) && featured.name !== '' && uniqueFeaturedArray.indexOf(featured.name) === -1) {
                                    uniqueFeaturedArray.push(featured.name);
                                    ctrl.featureSet.push(featured);
                                }
                            }

                            if (ctrl.featuresResponse && counter === 0) {
                                counter++;
                                return $http.get(ctrl.featuresResponse).then(function (response) {
                                    ctrl.data.features = response.data.fields.Body;
                                }, function (rejection) {
                                    errorService.warn(rejection);
                                });
                            }
                        }, function (rejection) {
                            errorService.warn(rejection);
                        });
                    }
                });
            }, function (rejection) {
                errorService.warn(rejection);
                $element.hide();
            });
        }

        function getFeaturedProducts() {
            var osList = getOsList(),
                featuredProducts = osList[0].data,
                hash = appHelperService.getLocationHash(),
                osDetected = osDetectService.getCurrentOs(hash),
                osProducts = [];
            if (appHelperService.assertStateByName('home-security')) {
                if (osDetected.device !== 'undefined') {
                    osProducts = osList.filter(function (obj) {
                        return JSON.stringify(obj.os) === JSON.stringify(osDetected.device.type);
                    })[0];
                }
                if (osProducts) {
                    featuredProducts = osProducts.data;
                    return featuredProducts;
                }
            }
            return featuredProducts;
        }

        function getOsList() {
            return [{ 'os': 'pc', 'data': ctrl.resource || 'comparison-table' }, { 'os': 'mac', 'data': 'comparison-table-mac' }, {
                'os': 'mobile', 'data': 'comparison-table-mobile'
            }];
        }

        function runScripts() {
            ngRender();
            angular.element(document).ready(function () {
                var mobileDefault = void 0;
                // Check if current page has comparison charts on it
                if ($element.find('.comparison-chart').length) {
                    // Loop through each comparison chart and set the default column
                    mobileDefault = $element.find('.comparison-chart').data('comparison-default');
                    $element.find('.comparison-chart .' + mobileDefault).addClass('currently-active');
                }
                $element.find('.comparison-nav li a').on('click', function (e) {
                    e.preventDefault();
                    var $this = $(this),

                    // Get navigation direction
                    direction = $this.data('comparison-nav-direction'),

                    // Get chart ID from the data attribute
                    chartID = $this.closest('.comparison-nav').data('comparison-chart'),

                    // Get comparison chart using that ID
                    $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),

                    // Get comparison chart mobile nav
                    $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]'),

                    // Get current column
                    $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                        currentTitle = $currentColumn.find('h2.product-title a').clone(),
                        currentID = parseInt($currentColumn.data('column')),
                        nextID = parseInt(currentID + 1),
                        prevID = parseInt(currentID - 1),
                        nextNavID = parseInt(currentID + 2),
                        prevNavID = parseInt(currentID - 2);

                    // Remove featured style from the comparison chart mobile nav
                    $comparisonChartNav.find('li a.feat').removeClass('feat');
                    $comparisonChart.find('.row-header .column-product.column-' + ($scope.$ctrl.data.length + 1) + ' h2.product-title a').addClass('feat');

                    // Check direction and if prev/next column exists
                    if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                        $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                        $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                        var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').clone();

                        if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').hasClass('feat')) {
                            $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                        }

                        if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                            $comparisonChartNav.find('li.nav-next a').addClass('feat');
                        }

                        $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.children());
                        $comparisonChartNav.find('li.nav-next a').html(currentTitle.children());
                    } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                        $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                        $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                        var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').clone();

                        if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').hasClass('feat')) {
                            $comparisonChartNav.find('li.nav-next a').addClass('feat');
                        }

                        if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                            $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                        }
                        $comparisonChartNav.find('li.nav-next a').html(newNextTitle.children());
                        $comparisonChartNav.find('li.nav-prev a').html(currentTitle.children());
                    }
                });
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    contentRepoService.$inject = ["$window", "$rootScope", "$sce", "$http", "$stateParams", "$location", "repoMapperService", "imageManagerService", "SUBCATCONFIG", "CATEGORYCONFIG", "CERTIFICATESCONFIG", "AWARDSCONFIG", "ENV", "appHelperService", "windowHelperService"];
    angular.module('kappGlobal.contentRepo').factory('contentRepoService', contentRepoService);

    function contentRepoService($window, $rootScope, $sce, $http, $stateParams, $location, repoMapperService, imageManagerService, SUBCATCONFIG, CATEGORYCONFIG, CERTIFICATESCONFIG, AWARDSCONFIG, ENV, appHelperService, windowHelperService) {
        var config = {
            'serverUrl': ENV.apiServer,
            'searchUrl': ENV.apiServer + '/_svc/contentrepository.svc/docs/query',
            'headerUrl': 'content/' + ENV.locale + '/repository/headers/',
            'blogUrl': 'content/' + ENV.locale + '/repository/blogs/',
            'apiContentRepoPath': 'content/' + ENV.locale + '/repository/',
            'resourcesB2BUrl': ENV.apiServer + '/content/' + ENV.locale + '/repository/resources/b2b-resources.json',
            'resourcesB2CUrl': ENV.apiServer + '/content/' + ENV.locale + '/repository/resources/b2c-resources.json',
            'resourcesAboutUrl': ENV.apiServer + '/content/' + ENV.locale + '/repository/resources/about-resources.json',
            'defaultOrderBy': 'pub_start desc',
            'defaultYears': [1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]
        };

        return {
            'buildCategoryName': buildCategoryName,
            'buildSubCategoryName': buildSubCategoryName,
            'getCategories': getCategories,
            'getCategoryParams': getCategoryParams,
            'getLinkMediaByPath': getLinkMediaByPath,
            'getHeaderByName': getHeaderByName,
            'getPathFromUrl': getPathFromUrl,
            'getUserFriendlyUrl': getUserFriendlyUrl,
            'getStrippedString': getStrippedString,
            'getTrustAsHtml': getTrustAsHtml,
            'getRandomizedImage': getRandomizedImage,
            'getResources': getResources,
            'getCategoriesFromObject': getCategoriesFromObject,
            'getBlogByName': getBlogByName,
            'populateLinkFields': populateLinkFields,
            'populateRepositoryHeaderFields': populateRepositoryHeaderFields,
            'populateBlogFields': populateBlogFields,
            'populateBlogResourceFields': populateBlogResourceFields,
            'populateResourcesFields': populateResourcesFields,
            'setUrlToCorrectCategory': setUrlToCorrectCategory,
            'search': search,
            'getPageNumberFromUrl': getPageNumberFromUrl,
            'getSelectorFromUrl': getSelectorFromUrl,
            'getDateFromUrl': getDateFromUrl,
            'setPaginationUrlValue': setPaginationUrlValue,
            'setSelectorUrlValue': setSelectorUrlValue,
            'setDateUrlValue': setDateUrlValue,
            'formatSelectorForApp': formatSelectorForApp,
            'getDefaultYears': getDefaultYears,
            'setTrackPageView': setTrackPageView
        };

        function buildSubCategoryName(name, subCategories, repoType) {
            var config = void 0;
            switch (repoType) {
                case 'awards':
                    config = AWARDSCONFIG;
                    break;
                case 'certificates':
                    config = CERTIFICATESCONFIG;
                    break;
                default:
                    config = SUBCATCONFIG;
            }

            return buildConfigCategoryName(name, subCategories, config);
        }

        function buildCategoryName(name, categories) {
            return buildConfigCategoryName(name, categories, CATEGORYCONFIG);
        }

        function getCategories() {
            return $http.get(config.serverUrl + '/content/' + ENV.locale + '/resources/Categories.json');
        }

        function getCategoryParams() {
            return $stateParams.category;
        }

        function getLinkMediaByPath(path) {
            path = decodeURIComponent('' + config.serverUrl + path);
            return $http.get(path);
        }

        function getHeaderByName(headerName) {
            var path = decodeURIComponent('' + config.headerUrl + headerName + '.json');
            return $http.get(path);
        }

        function getPathFromUrl(fileName) {
            fileName = fileName || $stateParams.path.replace(/_/g, '/') + '.json';
            var path = '';
            if (isIscSection()) {
                path = '/' + config.apiContentRepoPath + 'isc/';
            }
            if (isSmbSection()) {
                path = '/' + config.apiContentRepoPath + 'smb/';
            }
            if (isPrSection()) {
                path = '/' + config.apiContentRepoPath + 'pr/';
                fileName = fileName.replace(/_/g, '/');
            }
            if (isAboutSection()) {
                path = '/' + config.apiContentRepoPath + 'about/';
            }
            return path + fileName;
        }

        function getUserFriendlyUrl(url) {
            var fileName = url.substr(url.lastIndexOf('/') + 1).replace(/.json/g, '').toLowerCase();
            if (isPrSection()) {
                var values = url.split('/'),
                    yearFolder = values[values.length - 2];
                return yearFolder + '_' + fileName;
            }
            return fileName;
        }

        function getStrippedString(str, length) {
            return str.substring(0, length);
        }

        function getTrustAsHtml(strHtml) {
            return $sce.trustAsHtml(strHtml);
        }

        function getRandomizedImage(image) {
            return imageManagerService.getRandomizedImage(image);
        }

        function getResources(repoType) {
            var path = '';
            if (repoType === 'smb' || repoType === 'vsb') {
                path = decodeURIComponent('' + config.resourcesB2BUrl);
            }
            if (repoType === 'about') {
                path = decodeURIComponent('' + config.resourcesAboutUrl);
            } else {
                path = decodeURIComponent('' + config.resourcesB2CUrl);
            }
            return $http.get(path);
        }

        function getCategoriesFromObject(obj, array, repoType) {
            var tempArray = [],
                filteredCategories = void 0;
            array = array || [];
            var categoriesWithSubCat = {};
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    categoriesWithSubCat[key] = obj[key];
                    tempArray.push(key);
                }
            }

            filteredCategories = removedUnusedCategories(tempArray, repoType);

            if (ENV.locale === 'ja-jp' && repoType === 'pr') filteredCategories = reorderJPCategories(filteredCategories);

            array = array.concat(filteredCategories ? filteredCategories : tempArray);

            return { 'categoriesList': array, 'categoriesWithSubCat': categoriesWithSubCat };
        }

        /**
         * Temporary function to reorder JP categories until they're done in Tridion
         * @param  {[Array]} array The categories to sort
         * @return {[Array]}       The sorted categories
         */
        function reorderJPCategories(array) {
            var order = ['製品ニュース', 'ウイルスニュース', 'スパムニュース', '比較テスト', 'ビジネスニュース', 'イベントカレンダー', 'お知らせ'];

            return array.sort(function (a, b) {
                return order.indexOf(a) - order.indexOf(b);
            });
        }

        function getBlogByName(blogName) {
            var path = decodeURIComponent('' + config.blogUrl + blogName + '.json');
            return $http.get(path);
        }

        function populateLinkFields(linkResponse, url) {
            return repoMapperService.mapRepositoryLinkFields(linkResponse, url);
        }

        function populateRepositoryHeaderFields(linkResponse) {
            return repoMapperService.mapRepositoryHeaderFields(linkResponse);
        }

        function populateBlogFields(linkResponse) {
            return repoMapperService.mapBlogFields(linkResponse);
        }

        function populateBlogResourceFields(resource) {
            return repoMapperService.mapBlogResourceFields(resource);
        }

        function populateResourcesFields(resource) {
            return repoMapperService.mapResourcesFields(resource);
        }

        function setUrlToCorrectCategory(category) {
            var url = $window.location.href;
            var lm = url.split('/').reverse()[1];
            var path = $window.location.pathname;
            if (lm !== category) {
                if (lm === '') {
                    lm = '//';
                    return $window.location.href = windowHelperService.getDomainName() + path.replace(lm, '/' + category + '/');
                }
                return $window.location.href = windowHelperService.getDomainName() + path.replace(lm, category);
            }
        }

        function search() {
            var pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
            var repoType = arguments[2];
            var contentTypes = arguments[3];
            var category = arguments[4];
            var subcategory = arguments[5];
            var startDate = arguments[6];

            var params = buildSearchParams(pageNumber, pageSize, repoType, contentTypes, category, subcategory, startDate);
            return $http.post(config.searchUrl, params);
        }

        function getPageNumberFromUrl() {
            return $stateParams.rel || 1;
        }

        function getSelectorFromUrl() {
            return formatSelectorForApp($stateParams.sel || '');
        }

        function getDateFromUrl() {
            return formatSelectorForApp($stateParams.date || '');
        }

        function setPaginationUrlValue(value) {
            $location.search('rel', value);
        }

        function setSelectorUrlValue(selector) {
            selector = selector.toLowerCase().indexOf('sort-by') === -1 ? selector.toLowerCase() : '';
            $location.search('sel', selector);
        }

        function setDateUrlValue(date) {
            $location.search('date', date);
        }

        function formatSelectorForApp(value) {
            return value ? value.replace(/-_/g, '**').replace(/-/g, ' ').replace('**', '-') : '';
        }

        // Local helper functions
        function buildSearchParams(pageNumber, pageSize) {
            var repoType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var contentTypes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
            var category = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
            var subcategory = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
            var startDate = arguments[6];

            contentTypes = contentTypes === '' ? contentTypes : contentTypes.split(',');

            var optionsObj = {
                'locale': '' + ENV.locale,
                'page_num': parseInt(pageNumber),
                'page_size': parseInt(pageSize),
                'repository_type': repoType,
                'contenttype': { 'select': 0, 'value': contentTypes },
                'category': { 'select': 0, 'value': splitAndFormatWithConfigNumbers(category, buildCategoryName) },
                'subcategory': { 'select': 0, 'value': splitAndFormatWithConfigNumbers(subcategory, buildSubCategoryName, repoType) },
                'order_by': config.defaultOrderBy
            };

            if (startDate) {
                var dateFrom = new Date('01/01/' + startDate).getTime(),
                    dateTo = new Date('12/31/' + startDate).getTime();
                optionsObj.publication_start = '/Date(' + dateFrom + '+0300)/';
                optionsObj.publication_end = '/Date(' + dateTo + '+0300)/';
            }

            return optionsObj;
        }

        function buildConfigCategoryName(name, array, config) {
            array = array || config[ENV.locale.split('-')[1]] || config['global'];
            if (array.length < 1) return name;
            for (var i = 0, length = array.length; i < length; i++) {
                var subCat = array[i],
                    splitByDoubleColon = subCat.split('::');
                if (splitByDoubleColon.length === 1) throw new Error('Array item is not in correct format');
                if (splitByDoubleColon[1] !== name) continue;
                name = subCat;
                break;
            }
            return name;
        }

        function removedUnusedCategories(categoriesArray, repoType) {
            var translatedCategories = [],
                locale = ENV.locale.split('-')[1];

            if (repoType === 'pr') translatedCategories = SUBCATCONFIG;

            if (translatedCategories[locale]) {
                var categoriesWithoutIds = _.map(translatedCategories[locale], function (category) {
                    return category.substr(4);
                });
                return _.intersection(categoriesArray, categoriesWithoutIds);
            }

            return false;
        }

        function splitAndFormatWithConfigNumbers(obj, callback, repoType) {
            obj = obj === '' ? obj : obj.split(',');
            var result = [];
            angular.forEach(obj, function (value) {
                result.push(callback(value, null, repoType));
            });
            return result;
        }

        function isPrSection() {
            var states = ['press-releases', 'press-releases.details', 'in-the-news', 'in-the-news.details', 'press-center', 'press-center.details', 'rss-feeds', 'rss-feeds.details', 'homepage'];
            return appHelperService.assertStateByName(states);
        }

        function isSmbSection() {
            var states = ['resources-category.details', 'resources-category', 'smb-resources-category.details', 'smb-resources-category'];
            return appHelperService.assertStateByName(states);
        }

        function isIscSection() {
            var states = ['b2c-resource-center.category', 'b2c-resource-center.category-details'];
            return appHelperService.assertStateByName(states);
        }

        function isAboutSection() {
            var states = ['policy-blog', 'policy-blog-category', 'policy-blog-category.details'];
            return appHelperService.assertStateByName(states);
        }

        function getDefaultYears() {
            return config.defaultYears;
        }

        function setTrackPageView() {
            if (angular.isFunction($window.trackPageView)) {
                $window.trackPageView($rootScope.kaspersky.pageName); // search tracking requirement
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.cookiesRequirement').component('cookiesRequirement', {
        'bindings': {
            'show': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/cookies-requirement/templates/cookies-requirement.html',
        'controller': 'cookiesRequirementController'
    });
})();
'use strict';

(function () {
    'use strict';

    cookiesRequirementController.$inject = ["$window", "cookieService", "cookiesRequirementService"];
    angular.module('kappGlobal.cookiesRequirement').controller('cookiesRequirementController', cookiesRequirementController);

    function cookiesRequirementController($window, cookieService, cookiesRequirementService) {
        var ctrl = this;
        ctrl.show = false;
        ctrl.$onInit = activate;
        ctrl.accept = acceptRequirements;

        function activate() {
            getData();
        }

        function getData() {
            ctrl.show = !cookieService.get('kl.c.p');
            if (!ctrl.show) return false;

            return cookiesRequirementService.getContent().then(function (response) {
                ctrl.data = response;
                if (!ctrl.data.cookieDesc && !ctrl.data.cookieBtn) ctrl.show = false;
            });
        }

        function acceptRequirements() {
            var domain = $window.location.host.replace(/^(https?:\/\/)?(www)?/, '');
            ctrl.show = false;
            cookieService.set('kl.c.p', false, 30, domain);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    cookiesRequirementService.$inject = ["$q", "sessionStorageService", "errorService", "directiveData"];
    angular.module('kappGlobal.cookiesRequirement').factory('cookiesRequirementService', cookiesRequirementService);

    function cookiesRequirementService($q, sessionStorageService, errorService, directiveData) {
        return {
            'getContent': getContent
        };

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getContent() {
            var cachedData = sessionStorageService.get('local[general-translations]'),
                deferred = $q.defer();

            if (cachedData) {
                deferred.resolve(cachedData);
                return deferred.promise.then(function (cachedData) {
                    return cachedData.fields;
                }, function (error) {
                    return deferred.reject(error);
                });
            }

            return directiveData.getLocal('general-translations').then(function (response) {
                return response.data.fields;
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.currencySelector').component('currencySelector', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/currency-selector/templates/currency-selector.html',
        'controller': 'currencySelectorController'
    });
})();
'use strict';

(function () {
    'use strict';

    currencySelectorController.$inject = ["$rootScope", "$scope", "currencyManager", "appHelperService"];
    angular.module('kappGlobal.currencySelector').controller('currencySelectorController', currencySelectorController);

    function currencySelectorController($rootScope, $scope, currencyManager, appHelperService) {
        var ctrl = this,
            currenciesCount = void 0;
        ctrl.openCurrencyMenu = false;
        ctrl.showCurrencyMenu = ctrl.showCurrencyMenu || true;
        ctrl.showCurrencySelector = ctrl.showCurrencySelector || false;
        ctrl.currencies = getCurrencies();
        ctrl.setCurrency = setCurrency;
        ctrl.onMenuBlur = onMenuBlur;
        ctrl.$onInit = activate;

        function activate() {
            currenciesCount = 1;
            if (appHelperService.assertLocaleByName('en-in')) {
                currenciesCount = 6;
            } else if (appHelperService.assertLocaleByName('ru-ru')) {
                currenciesCount = 11;
            }
            ctrl.showCurrencySelector = appHelperService.assertStateByName(['premium-service', 'premium-services']) && ctrl.currencies.length > currenciesCount;
        }

        function getCurrencies() {
            ctrl.currencies = currencyManager.getCurrencies();
            ctrl.currentCurrency = currencyManager.getCurrentCurrencyFromCache() || ctrl.currencies[0];
            return ctrl.currencies;
        }

        function setCurrency(item) {
            ctrl.currentCurrency = item;
            return currencyManager.setCurrency(item);
        }

        function onMenuBlur() {
            ctrl.openCurrencyMenu = false;
        }

        var buyBlockReady = $rootScope.$on('buyBlockReady', function () {
            ctrl.showCurrencySelector = ctrl.currencies.length > currenciesCount;
        });

        $scope.$on('$destroy', buyBlockReady);
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.customCarousel').component('customCarousel', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/custom-carousel/templates/custom-carousel.html',
        'controller': 'customCarouselController'
    });
})();
'use strict';

(function () {
    'use strict';

    customCarouselController.$inject = ["directiveData", "errorService", "$scope", "$element", "$rootScope"];
    angular.module('kappGlobal.customCarousel').controller('customCarouselController', customCarouselController);

    function customCarouselController(directiveData, errorService, $scope, $element, $rootScope) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;
        var slickConfig = {
            'infinite': true,
            'slidesToShow': 1,
            'slidesToScroll': 1,
            'dots': true,
            'accessibility': false,
            'draggable': false,
            'nextArrow': '<a type="button" href="" class="next-slide"></a>',
            'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
            'responsive': [{
                'breakpoint': 1023,
                'settings': {
                    'slidesToShow': 3,
                    'slidesToScroll': 3,
                    'infinite': true,
                    'dots': true,
                    'arrows': false
                }
            }, {
                'breakpoint': 769,
                'settings': {
                    'slidesToShow': 2,
                    'slidesToScroll': 2,
                    'dots': true,
                    'arrows': false
                }
            }, {
                'breakpoint': 480,
                'settings': {
                    'slidesToShow': 1,
                    'slidesToScroll': 1,
                    'dots': true,
                    'arrows': false
                }
            }]
        };

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'custom-carousel').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        var ngRender = $rootScope.$on('ngRender', function () {
            startSlick();
            ngRender();
        });

        $scope.$on('$destroy', function () {
            stopSlick();
        });

        function startSlick() {
            $element.find('.carousel-body').slick(slickConfig);
        }

        function stopSlick() {
            $element.find('.slick-initialized').slick('unslick');
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.customHtml').component('customHtml', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/custom-html/templates/custom-html.html',
        'controller': 'customHtmlController'
    });
})();
'use strict';

(function () {
    'use strict';

    customHtmlController.$inject = ["directiveData", "ENV", "errorService", "$timeout", "$element"];
    angular.module('kappGlobal.customHtml').controller('customHtmlController', customHtmlController);

    function customHtmlController(directiveData, ENV, errorService, $timeout, $element) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.env = ENV.locale;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            if (ctrl.resource && ctrl.resource.match(/\//)) {
                ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);
                return directiveData.get(ctrl.resource).then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            } else {
                return directiveData.getByUrl(ctrl.resource || 'custom-html').then(function (response) {
                    ctrl.data = response.data.fields;
                    $timeout(function () {
                        $element.find('.accordion-section > li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                            $(this).parent().toggleClass('open');
                            $(this).siblings().slideToggle();
                        });
                    });
                }, handleRejection);
            }
        }
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.doubleBanner').component('doubleBanner', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/double-banner/templates/double-banner.html',
        'controller': 'doubleBannerController'
    });
})();
'use strict';

(function () {
    'use strict';

    doubleBannerController.$inject = ["directiveData", "$element", "$rootScope", "errorService"];
    angular.module('kappGlobal.doubleBanner').controller('doubleBannerController', doubleBannerController);

    function doubleBannerController(directiveData, $element, $rootScope, errorService) {
        var ctrl = this,
            ngRender = $rootScope.$on('ngRender', runScripts);
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'double-banner').then(function (response) {
                ctrl.data = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runScripts() {
            var redHeight = $('.quick-menu .red-item').outerWidth(true);
            $element.find('.narrow-link a').css({ 'width': redHeight + 'px' });
            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.downloadBlock').component('downloadBlock', {
        'bindings': {
            'productName': '@',
            'productInfo': '<',
            'productData': '<'
        },
        // 'templateUrl': '/resources/template/html/modules/_shared/components/downloads/templates/downloads.html',
        // The change is intentionally made to enable proper children (download-block) appearence detection
        'template': '<div class="product-item product-small">\n    <header class="divider">\n        <figure>\n            <a ng-href="{{::$ctrl.productInfo.prodPageLink}}">\n                <img ng-src="{{$ctrl.productInfo.fullSizeImage | addLocalRoot}}" alt="{{::$ctrl.productInfo.title}}" title="{{::$ctrl.productInfo.title}}" />\n            </a>\n        </figure>\n        <div class="tagline"><p>{{::$ctrl.productInfo.summary}}</p></div>\n        <h2 class="product-title">\n            <a ng-href="{{::$ctrl.productInfo.prodPageLink}}">\n                <span class="surtitle" ng-bind-html="$ctrl.productInfo.prodKasperskyTitle"></span>\n                <span>{{::$ctrl.productInfo.prodMainTitle}}</span>\n                <span class="subtitle">{{::$ctrl.productInfo.prodAddTitle || \'&nbsp;\'}}</span>\n            </a>\n        </h2>\n    </header>\n    <footer>\n        <div class="desc">\n            <p ng-bind-html="$ctrl.productInfo.shortDesc | html"></p>\n            <bazaarvoice ng-if="$ctrl.productInfo.bvId" product-id="{{::$ctrl.productInfo.bvId}}"></bazaarvoice>\n            <div class="blank reviews" ng-if="!$ctrl.productInfo.bvId"></div>\n        </div>\n    </footer>\n        <div class="cta">\n          <a ng-show="$ctrl.objProductData.showBuyButton == \'Yes\'" ng-href="{{::$ctrl.productInfo.prodPageLink}}" target="{{::$ctrl.objProductData.buyButtonTarget}}"\n  \t\t   class="button {{::$ctrl.objProductData.buyButtonColour}} full-width">{{::$ctrl.productInfo.buyText || $ctrl.buyblockTranslations.buyText}}</a>\n          <a ng-show="$ctrl.objProductData.showTrialButton == \'Yes\'" ng-href="{{::$ctrl.productInfo.freeTrialLink}}" target="{{::$ctrl.objProductData.trialButtonTarget}}"\n  \t\t   class="button {{::$ctrl.objProductData.trialButtonColour}} full-width">{{::$ctrl.productInfo.freeTrialText}}</a>\n          <a ng-show="$ctrl.objProductData.showUpdateButton == \'Yes\'" ng-href="{{::$ctrl.productInfo.updateLink}}" target="{{::$ctrl.objProductData.updateButtonTarget}}"\n  \t\t   class="button {{::$ctrl.objProductData.updateButtonColour}} full-width">{{::$ctrl.productInfo.updateText}}</a>\n          <a ng-repeat="badge in $ctrl.objProductData.badges" target="_blank" class="button" style="min-width:11em;padding:0!important;"\n  \t\t   ng-href="{{::badge.link}}"><img ng-src="{{::badge.img}}" alt="{{::badge.type}}" title="{{::badge.type}}" /></a>\n       </div>\n</div>',
        'controller': 'downloadBlockController'
    });
})();
'use strict';

(function () {
    'use strict';

    downloadBlockController.$inject = ["productData", "errorService", "directiveData"];
    angular.module('kappGlobal.downloadBlock').controller('downloadBlockController', downloadBlockController);

    function downloadBlockController(productData, errorService, directiveData) {
        var ctrl = this;
        ctrl.objProductData = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
            getBuyblockTranslations();
        }

        function getData() {
            ctrl.objProductData = ctrl.productData;
            if (ctrl.productName) {
                productData.getb2c(ctrl.productName).then(function (response) {
                    ctrl.productInfo = response.data.fields;
                    getBadges(ctrl.objProductData.badges);
                }, function (rejection) {
                    errorService.warn(rejection);
                });
            }
            if (!ctrl.productName && ctrl.productInfo) {
                getBadges(ctrl.objProductData.badges);
            }
        }

        function getBuyblockTranslations() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockTranslations = response.data.fields;
            });
        }

        function getBadges(badges) {
            _.forEach(badges, function (obj) {
                switch (obj.type) {
                    case 'Google Play':
                        obj.link = ctrl.productInfo.bbSettings.downloadFromGplayLink;
                        break;
                    case 'App Store':
                        obj.link = ctrl.productInfo.bbSettings.downloadFromIstoreLink;
                        break;
                    case 'Microsoft':
                        obj.link = ctrl.productInfo.bbSettings.downloadFromMicrosoftLink;
                        break;
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.downloadBlockFeatured').component('downloadBlockFeatured', {
        'templateUrl': '/resources/template/html/modules/_shared/components/download-block-featured/templates/download-block-featured.html',
        'controller': 'sharedGetByNameController'
    });
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.eula').component('eula', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/eula/templates/eula.html',
        'controller': 'eulaController'
    });
})();
'use strict';

(function () {
    'use strict';

    eulaController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.eula').controller('eulaController', eulaController);

    function eulaController(directiveData, errorService) {
        var ctrl = this;

        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'eula').then(function (response) {
                ctrl.data = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.featureSection').component('featureSectionSec', {
        'templateUrl': '/resources/template/html/modules/_shared/components/feature-section/templates/feature-section-sec.html',
        'controller': 'featureSectionSecController',
        'bindings': {
            'resource': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    featureSectionSecController.$inject = ["directiveData", "ENV", "$element", "$rootScope", "$scope", "errorService"];
    angular.module('kappGlobal.featureSection').controller('featureSectionSecController', featureSectionSecController);

    function featureSectionSecController(directiveData, ENV, $element, $rootScope, $scope, errorService) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData().then(function () {
                if ($rootScope.isReady) $scope.$applyAsync(runScripts); // Ensure HTML is rendered
                else {
                        var ngRender = $rootScope.$on('ngRender', function () {
                            ngRender();
                            runScripts();
                        });
                    }
            });
        }

        function getData() {
            if (ctrl.resource && ctrl.resource.match(/\//)) {
                ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);
                return directiveData.get(ctrl.resource).then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            } else {
                return directiveData.getByUrl(ctrl.resource || 'feature-section-sec').then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            }
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runScripts() {
            $element.find('.tab-title a').on('click', function (e) {
                var $this = $(this),
                    $parent = $this.parent(),
                    current = $parent.closest('.tabs-title-wrapper').attr('data-tab'),
                    tab = void 0;
                e.preventDefault();
                // Get the name of tab content that should be controled
                // Remove selected class from all tab titles and add it to the one just clicked
                $element.find('.tabs-title-wrapper[data-tab=\'' + current + '\'] .tab-title').removeClass('selected');
                $parent.addClass('selected');
                // Check clicked link href and show matching tab content
                tab = $this.attr('href');
                $element.find('.tab-content-wrapper[data-tab=\'' + current + '\'] .tab-content-single').not(tab).removeClass('tab-show');
                $(tab).addClass('tab-show');
            });
            var SelectedName = $element.find('.tab-nav').parent().find('ul.tabs li.selected a').first().text();
            $element.find('.tab-nav').append('<div class="tab-label">' + SelectedName + '</div>');
            $element.find('.tab-nav').click(function (e) {
                e.stopPropagation();
                $(this).toggleClass('active');
            });
            // Close it if user clicks outside
            $('body').click(function () {
                $element.find('.tab-nav').removeClass('active');
            });
            $element.find('.tab-nav .tabs').click(function (e) {
                e.stopPropagation();
            });
            // Check when item is clicked and update active tab label
            $element.find('.tab-nav .tabs li').click(function (e) {
                e.preventDefault();
                var $this = $(this);
                $this.parent().siblings().remove();
                $this.closest('.tab-nav').append('<div class=tab-label></div>');
                $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                $this.parent().parent().toggleClass('active');
            });
            $element.find('.toggle-button').click(function (e) {
                var $this = $(this);
                e.preventDefault();

                $this.closest('.toggle-container').find('.toggle-content').slideToggle();
                $this.closest('.toggle-container').toggleClass('open');
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.featureSection').component('featureSection', {
        'templateUrl': '/resources/template/html/modules/_shared/components/feature-section/templates/feature-section.html',
        'controller': 'sharedGetByNameController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.featuredProducts').component('featuredProducts', {
        'bindings': {
            'resource': '@',
            'component': '@'
        },
        'controller': 'featuredProductsController',
        'templateUrl': '/resources/template/html/modules/_shared/components/featured-products/templates/featured-products.html'
    });
})();
'use strict';

(function () {
    'use strict';

    featuredProductsController.$inject = ["osDetectService", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.featuredProducts').controller('featuredProductsController', featuredProductsController);

    function featuredProductsController(osDetectService, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.products = '';
        ctrl.highlighted = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var hash = appHelperService.getLocationHash(),
                osDetected = osDetectService.getCurrentOs(hash),
                osList = getOsList(),
                featuredProducts = getFeaturedProducts(osList, osDetected);
            return directiveData.getByUrl(featuredProducts || 'featured-products').then(function (response) {
                ctrl.products = response.data.fields.productShortName;
                ctrl.highlighted = response.data.fields.highlighted;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function getFeaturedProducts(dataList, osDetect) {
            var product = dataList[0].data;
            if (!osDetect.device) return product;
            if (appHelperService.assertStateByName('home-security')) {
                var osProducts = dataList.filter(function (obj) {
                    return JSON.stringify(obj.os) === JSON.stringify(osDetect.device.type);
                })[0];
                if (!osProducts) return product;
                product = osProducts.data;
            }
            return product;
        }

        function getOsList() {
            return [{
                'os': 'pc',
                'data': 'featured-products'
            }, {
                'os': 'mac',
                'data': 'featured-products-mac'
            }, {
                'os': 'mobile',
                'data': 'featured-products-mobile'
            }];
        }

        if (appHelperService.stateIncludes('home-security-section')) {
            ctrl.state = 'b2c';
        }

        if (appHelperService.stateIncludes('vsb')) {
            ctrl.state = 'vsb';
        }

        if (appHelperService.stateIncludes('home-downloads')) {
            ctrl.state = 'hd';
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.featuresGrid').component('featuresGrid', {
        'bindings': {
            'resource': '@',
            'addClass': '@'
        },
        'controller': 'featuresGridController',
        'templateUrl': '/resources/template/html/modules/_shared/components/features-grid/templates/features-grid.html'
    });
})();
'use strict';

(function () {
    'use strict';

    featuresGridController.$inject = ["directiveData", "ENV", "errorService"];
    angular.module('kappGlobal.featuresGrid').controller('featuresGridController', featuresGridController);

    function featuresGridController(directiveData, ENV, errorService) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {

            if (ctrl.resource && ctrl.resource.match(/\//)) {
                ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);
                return directiveData.get(ctrl.resource).then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            } else {
                return directiveData.getByUrl(ctrl.resource || 'features-grid').then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            }
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.filters').filter('html', ["$sce", "ENV", function ($sce, ENV) {
        return function (arg) {
            if (arg) {
                arg = arg.replace(/content\/\w+\-\w+\//ig, 'content/' + ENV.locale + '/');
                arg = '<content>' + (arg || '') + '</content>'; // for search markup
            }

            return $sce.trustAsHtml(arg);
        };
    }]).filter('trustUrl', ["$sce", function ($sce) {
        return function (url) {
            return $sce.trustAsResourceUrl(url);
        };
    }]).filter('xpm', ["$sce", function ($sce) {
        return function (input, rootEl, name, index) {
            var fieldMarkup = void 0;
            if (name && name.match(/cnt/)) name = name.replace(/cnt/, index);
            fieldMarkup = '<!-- Start Component Field: {"XPath" : "tcm:Content/custom:' + rootEl + '/custom:' + name + '"} -->' + input;
            return $sce.trustAsHtml(fieldMarkup);
        };
    }]).filter('stripHtmlTags', function () {
        return function (string) {

            return angular.isString(string) || string instanceof String ? string.replace(/<\S[^><]*>/g, '') : string;
        };
    }).filter('capitalizeFirstLetter', function () {
        return function (input) {
            var retVal = input ? input.charAt(0).toUpperCase() + input.substring(1).toLowerCase() : '';
            return retVal;
        };
    }).filter('dashify', function () {
        return function (input) {
            var retVal = input ? input.replace(/\s+/g, '-').toLowerCase() : '';
            return retVal;
        };
    }).filter('customCurrency', ["currencyManager", "$filter", "$locale", function (currencyManager, $filter, $locale) {
        function customCurrency(input) {
            var currencyObj = currencyManager.getCurrentCurrency();
            if (!currencyObj) return input;
            var currencyTemplate = currencyObj.template || '$1',
                tempVal = void 0,
                decimals = angular.isNumber(currencyObj.decimalCount) ? currencyObj.decimalCount : 2;

            // set the number of decimals for the number, based on config
            tempVal = $filter('number')(input, decimals);

            // match the template (e.g. $ 1) by replacing $ with the currency symbol and 1 with the number.
            currencyTemplate = currencyTemplate.replace('$', currencyObj.symbol || $locale.NUMBER_FORMATS.CURRENCY_SYM).replace('1', tempVal);
            return currencyTemplate;
        }
        customCurrency.$stateful = true;
        return customCurrency;
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.gdprReady', []).component('gdprReady', {
        'bindings': {
            'gdprImg': '@'
        },
        'controller': function controller() {},
        'template': '<div class="gdpr-ready" ng-if="$ctrl.gdprImg"><img class="gdpr-logo" ng-src="{{::$ctrl.gdprImg | addLocalRoot}}"/></div>'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('hmcHomeSecurity', {
        'bindings': {
            'resource': '@',
            'component': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/hmc/templates/hmc-b2c-homepage.html',
        'controller': 'hmcController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('hmcEmbedded', {
        'bindings': {
            'resource': '@',
            'component': '@'
        },
        'controller': 'hmcController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('hmcHomepage', {
        'bindings': {
            'resource': '@',
            'component': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/hmc/templates/hmc-homepage.html',
        'controller': 'hmcController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('hmcPromo2up', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/hmc/templates/hmc-promo-2up.html',
        'controller': ["$rootScope", "$scope", "directiveData", "ENV", "errorService", function controller($rootScope, $scope, directiveData, ENV, errorService) {
            var ctrl = this;
            ctrl.$onInit = activate;

            function activate() {
                getData();
            }

            function getData() {
                return directiveData.get('/content/' + ENV.locale + '/hmc/hmc-promo-2up.json').then(function (response) {
                    ctrl.data = response.data.fields.Body;
                }, function (rejection) {
                    errorService.warn(rejection);
                });
            }
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('hmcReviews', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/hmc/templates/hmc-reviews.html',
        'controller': ["$rootScope", "$scope", "directiveData", "ENV", "errorService", function controller($rootScope, $scope, directiveData, ENV, errorService) {
            var ctrl = this;
            ctrl.$onInit = activate;

            function activate() {
                getData();
            }

            function getData() {
                return directiveData.get('/content/' + ENV.locale + '/hmc/hmc-reviews.json').then(function (response) {
                    ctrl.data = response.data.fields.Body;
                }, function (rejection) {
                    errorService.warn(rejection);
                });
            }
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmc').component('helpMeChoose', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'hmcController'
    });
})();
'use strict';

(function () {
    'use strict';

    hmcController.$inject = ["$rootScope", "$http", "$q", "$location", "$anchorScroll", "currencyManager", "ngDialog", "$window", "cookieService", "$state", "$timeout", "ENV", "windowHelperService", "errorService"];
    angular.module('kappGlobal.hmc').controller('hmcController', hmcController);

    function hmcController($rootScope, $http, $q, $location, $anchorScroll, currencyManager, ngDialog, $window, cookieService, $state, $timeout, ENV, windowHelperService, errorService) {
        var ctrl = this,
            finalSelectionFilter = {},
            storeResults = null,
            currentName = '',
            $dialog = ngDialog;

        ctrl.hmcData = [{ 'currentStep': 'step-1', 'stateClass': 'hmc-modal-step1' }, { 'currentStep': 'step-2', 'stateClass': 'hmc-modal-step2' }, { 'currentStep': 'results', 'stateClass': 'hmc-modal-results' }, { 'currentStep': 'autoPopup', 'stateClass': 'hmc-modal-auto-popup' }];
        ctrl.QuestionSelected = [];
        ctrl.stateClass = [];
        ctrl.hmcVerdict = [];
        ctrl.isPopupOpen = false;
        ctrl.bannerPopupActive = false;
        ctrl.requiredOptionActive = false;
        ctrl.allSelected = false;
        ctrl.step = ctrl.hmcData[0];
        ctrl.kscAvailable = false;
        ctrl.template = 'default';
        ctrl.getSelectedOS = getSelectedOS;
        ctrl.backBtn = backBtn;
        ctrl.loadHMC = loadHMC;
        ctrl.closePromoBanner = closePromoBanner;
        ctrl.selectCheckbox = selectCheckbox;
        ctrl.checkQuestions = checkQuestions;
        ctrl.progressBar = progressBar;
        ctrl.selectAll = selectAll;
        ctrl.isMobile = windowHelperService.isMobile();
        ctrl.$onInit = activate;

        function closeDialog() {
            $dialog.close();
        }

        function activate() {
            getData();
            currencyManager.getCurrencies();
        }

        function getData() {
            var promises = [$http.get('/content/' + ENV.locale + '/hmc/hmc-ui-fields.json', { 'cache': true }), $http.get('/content/' + ENV.locale + '/hmc/hmc-step-1.json', { 'cache': true }), $http.get('/content/' + ENV.locale + '/hmc/hmc-step-2.json', { 'cache': true }), $http.get('/content/' + ENV.locale + '/hmc/hmc-logic.json', { 'cache': true })];

            $q.all(promises).then(function (response) {
                ctrl.hmcUI = response[0].data.fields;
                ctrl.step1 = response[1].data.fields;
                ctrl.step2 = response[2].data.fields;
                ctrl.settings = response[3].data.fields;

                // check for ksc toggle in the CMS component

                if (ctrl.settings.hmc_ksc_enable && ctrl.settings.hmc_ksc_enable[0] === 'true') ctrl.kscAvailable = true;

                // template check

                if (ctrl.settings.hmc_template && ctrl.settings.hmc_template === 'v2') ctrl.template = 'v2';

                // check for popup option in the CMS component

                if (ctrl.settings.hmc_popup && ctrl.settings.hmc_popup[0]) autoPopup(ctrl.settings.hmc_popup[0]);

                currentName = $rootScope.kaspersky.pageName;
            });
        }

        function stepsDialog() {
            return $dialog.open({
                'template': '/resources/template/html/modules/_shared/components/hmc/templates/hmc-steps-' + ctrl.template + '.html',
                'className': 'hmc-modal-wrapper-' + ctrl.template + ' ngdialog-flyout',
                'showClose': false,
                'name': 'default-popup',
                'data': ctrl,
                'closeByNavigation': true,
                'onOpenCallback': function onOpenCallback() {
                    ctrl.isPopupOpen = true;

                    $timeout(function () {
                        ctrl.currentPopup = angular.element(document).find('#hmc-modal');
                    }, 200);
                },
                'preCloseCallback': function preCloseCallback() {
                    $timeout(function () {
                        ctrl.QuestionSelected.length = 0;
                        ctrl.hmcVerdict.length = 0;
                        ctrl.stateClass = [];
                        ctrl.step = '';
                        ctrl.isPopupOpen = false;
                        ctrl.requiredOptionActive = false;
                        ctrl.allSelected = false;
                        ctrl.bannerPopupActive = true;
                        ctrl.autoPopupActive = false;

                        if (ctrl.hmcData && ctrl.hmcData[0].autoPopup) ctrl.hmcData[0].autoPopup = false;

                        angular.element(document).find('#hmc-os-selection').children().removeClass('selected');

                        $timeout(function () {
                            angular.element(document).find('html').removeClass('hmc-mobile-banner-active-' + ctrl.template);
                        }, 400);
                    });
                }
            });
        }

        function loadHMC($event) {
            $event.stopPropagation();
            $event.preventDefault();

            $dialog.closeAll();

            $timeout(function () {
                ctrl.stateClass.push('hmc-embedded');
                ctrl.step = ctrl.hmcData[0];
                ctrl.autoPopupActive = false;
                angular.element(document).find('html').removeClass('hmc-mobile-banner-active-' + ctrl.template);

                stepsDialog();
            }, 600);
        }

        function getSelectedOS($event) {
            $event.preventDefault();

            ctrl.OSSelected = [];
            var OSCollection = angular.element(document).find('#hmc-os-selection .form-element.checkbox.selected').parent().children();

            if (angular.element(document).find('#hmc-os-selection .form-element.checkbox.selected').length > 0) {

                // gather user-selected OS data

                _.forEach(angular.element(document).find('#hmc-os-selection .form-element.checkbox.selected'), function (value) {
                    ctrl.OSSelected.push(_.findIndex(OSCollection, value));
                });
            }

            function skipStep2() {
                processData();

                if (!ctrl.isPopupOpen) {
                    stepsDialog();
                }

                ctrl.stateClass.push('hmc-step2-skipped');
                ctrl.step = ctrl.hmcData[2];
            }

            function goToStep2() {
                ctrl.hmcData[1];
                ctrl.step = ctrl.hmcData[1];

                if (!ctrl.isPopupOpen) {
                    stepsDialog();
                }

                $timeout(function () {
                    $window.trackPageView(currentName + ' > HMC > Choose Your Needs');
                }, 100);
            }

            if (ctrl.kscAvailable) {
                goToStep2();
            } else {
                if (ctrl.OSSelected.indexOf(0)) {
                    skipStep2();
                } else {
                    goToStep2();
                }
            }
        }

        function selectAll($event) {
            if ($event) $event.preventDefault();

            ctrl.allSelected = !ctrl.allSelected;

            if (ctrl.allSelected === true) {
                ctrl.requiredOptionActive = true;
                angular.element(document).find('#hmc-questions-selection, form.narrow-wrapper > .row').children().addClass('selected');
            } else {
                ctrl.requiredOptionActive = false;
                angular.element(document).find('#hmc-questions-selection, form.narrow-wrapper > .row').children().removeClass('selected');
            }
        }

        function selectCheckbox($event) {
            if (angular.element(document).find($event.currentTarget).hasClass('select-all')) {
                selectAll();
            } else {
                angular.element(document).find($event.currentTarget).toggleClass('selected');
            }

            if (angular.element(document).find($event.currentTarget).parent().children().hasClass('selected')) {
                ctrl.requiredOptionActive = true;
            } else {
                ctrl.requiredOptionActive = false;
            }

            $event.stopPropagation();
            $event.preventDefault();
        }

        var mediaQuery = $window.matchMedia('(min-width: 769px)');
        mediaQuery.addListener(mqBreakPoint);

        function mqBreakPoint(mediaQuery) {
            if (mediaQuery.matches) {
                ctrl.isMobile = false;
                angular.element(document).find('html').removeClass('hmc-mobile-banner-active-' + ctrl.template);
            } else {
                ctrl.isMobile = true;
                if (ctrl.autoPopupActive) angular.element(document).find('html').addClass('hmc-mobile-banner-active-' + ctrl.template);
            }
        }

        function closePromoBanner() {
            ctrl.stateClass = ctrl.stateClass.filter(function (e) {
                return e !== 'hmc-promo-popup-v2';
            });

            $timeout(function () {
                $window.trackPageView(currentName + ' > HMC > Select Platform');
            }, 100);
        }

        var ngRender = $rootScope.$on('ngRender', function () {
            embeddedBtn();
            ngRender();
        });

        function autoPopup(trigger) {
            function triggerHMCPopup() {
                cookieService.set('hmc_auto_open', 'true', 1);
                ctrl.isPopupOpen = true;
                ctrl.hmcData[0].autoPopup = true;
                ctrl.stateClass.push('hmc-auto-popup');
                ctrl.autoPopupActive = true;

                if (ctrl.template === 'v2') ctrl.stateClass.push('hmc-promo-popup-v2');

                var bannerOmnitureValue = $rootScope.$on('ngRender', function () {
                    $window.trackPageView(currentName + ' > HMC > Start');
                    bannerOmnitureValue();
                });

                mqBreakPoint(mediaQuery);

                $timeout(function () {
                    stepsDialog();
                }, trigger.hmc_popup_trigger_time || 0);
            }

            if (trigger && trigger.hmc_enable_popup[0]) {
                ctrl.popup = trigger;

                var currentState = $state.current.name,
                    hmcPopupLocation = '';

                switch (trigger.hmc_location) {
                    case 'homepage':
                        hmcPopupLocation = 'homepage';
                        break;
                    case 'Product pages':
                        hmcPopupLocation = 'home-product';
                        break;
                    case 'Home Security Homepage':
                        hmcPopupLocation = 'home-security';
                        break;
                }

                if (ctrl.popup.hmc_enable_popup[0] === 'true' && !cookieService.get('hmc_auto_open')) {
                    if (currentState === hmcPopupLocation) {
                        triggerHMCPopup();
                    } else if (!hmcPopupLocation.length) {
                        triggerHMCPopup();
                    }
                }
            }
        }

        function checkQuestions($event) {
            $event.preventDefault();

            // gather user-selected questions data

            var checkboxes = angular.element(document).find('#hmc-questions-selection .form-element.checkbox');
            _.forEach(checkboxes, function (el, i) {
                if (!angular.element(el).hasClass('select-all')) {
                    if (angular.element(el).hasClass('selected')) {
                        ctrl.QuestionSelected.push(i);
                    }
                }
            });

            ctrl.step = ctrl.hmcData[2];

            $location.hash('hmc-modal');
            $anchorScroll();
            processData();
        }

        function backBtn(event) {
            event.stopPropagation();
            event.preventDefault();

            ctrl.QuestionSelected.length = 0;
            ctrl.hmcVerdict.length = 0;

            if (ctrl.currentPopup.hasClass('hmc-modal-results')) {
                ctrl.step = ctrl.hmcData[1];
            }

            if (ctrl.currentPopup.hasClass('hmc-embedded') || ctrl.currentPopup.hasClass('hmc-auto-popup')) {
                if (ctrl.currentPopup.hasClass('hmc-step2-skipped') && ctrl.currentPopup.hasClass('hmc-modal-results') || ctrl.currentPopup.hasClass('hmc-modal-step2')) {
                    ctrl.step = ctrl.hmcData[0];
                    ctrl.stateClass.splice(1, 1);
                    ctrl.requiredOptionActive = false;
                } else if (ctrl.currentPopup.hasClass('hmc-modal-results')) {
                    ctrl.step = ctrl.hmcData[1];
                }
            } else {
                if (ctrl.currentPopup.hasClass('hmc-modal-step1') || ctrl.currentPopup.hasClass('hmc-modal-step2') || ctrl.currentPopup.hasClass('hmc-modal-results') && ctrl.currentPopup.hasClass('hmc-step2-skipped')) {
                    closeDialog();
                }

                if (ctrl.currentPopup.hasClass('hmc-step2-skipped')) {
                    ctrl.stateClass.splice(0, 1);
                } else {
                    ctrl.step = ctrl.hmcData[1];
                }
            }
        }

        function progressBar(current) {
            if (current.currentStep === 'step-1' || current.currentStep === 'autoPopup') {
                return { 'width': '0' };
            }

            if (current.currentStep === 'step-2') {
                return { 'width': '50%' };
            }

            if (current.currentStep === 'results') {
                return { 'width': '100%' };
            }
        }

        function filterMatch(dataSet, secondDimensionDataSet, relevancy, isOs) {
            var filtered = dataSet;
            var selection = !isOs ? 'hmcQuestionIndex' : 'hmcOsIndex';

            if (!secondDimensionDataSet.length) {
                filtered = filtered.filter(function (elem) {
                    return !elem[selection].length;
                });
            } else {
                for (var i = 0; i < secondDimensionDataSet.length; i++) {
                    filtered = filtered.filter(function (elem) {
                        var diff = elem[selection].length - secondDimensionDataSet.length;
                        return $.inArray(secondDimensionDataSet[i], elem[selection]) !== -1 && 0 <= diff && diff <= relevancy;
                    });
                }
            }

            return filtered;
        }

        function truncateByIndex(questionsSelected, relevancyIndex) {
            if (!questionsSelected) questionsSelected = [];

            var filtered = questionsSelected,
                truncate = false;

            questionsSelected.forEach(function (val) {
                if (val >= relevancyIndex) {
                    truncate = true;
                    return false;
                }
            });
            if (truncate) {
                for (var j = 0; j < relevancyIndex; j++) {
                    filtered = filtered.filter(function (val) {
                        return val !== j;
                    });
                }
            }

            return filtered;
        }

        function findByPriority(priorityCheck) {
            var max = 0;

            for (var i = 1; i < priorityCheck.length; i++) {
                if (priorityCheck[i].priority > priorityCheck[i - 1].priority) {
                    max = i;
                }
            }

            return priorityCheck[max];
        }

        function getHMCResult(selection) {
            if (!selection || selection.length === 'undefined') {
                selection = {
                    'hmcResultComponents': ['content/' + ENV.locale + '/home-security/products/ktsmd/ktsmd.json']
                };

                if (ctrl.kscAvailable) {
                    selection = {
                        'hmcResultComponents': ['content/' + ENV.locale + '/home-security/products/ksc-personal/ksc-personal.json', 'content/' + ENV.locale + '/home-security/products/ksc-family/ksc-family.json']
                    };
                }
            }

            storeResults = selection.hmcResultComponents;
            return selection.hmcResultComponents;
        }

        function getSvar64(os, questions, verdicts, version) {
            var sVar64 = [],
                versionId = version || 'acq';

            sVar64.push(versionId);

            function getValues(item) {
                var holder = [];

                _.forEach(item, function (value) {
                    holder.push(value);
                });

                return holder.length > 0 ? holder : 'na';
            }

            // add selected os indexes to array

            sVar64.push(getValues(os));

            // add selected questions to array
            // if non selected then add 'na'

            sVar64.push(getValues(questions) || 'na');

            // set verdict data

            var verdictData = [],
                recommendedVerdict = void 0;

            _.forEach(verdicts, function (value, index) {
                verdictData.push(value.shortName);

                if (index === verdicts.length - 1) {
                    recommendedVerdict = value.shortName;
                }
            });

            sVar64.push(verdictData);

            // set final recommended verdict value

            sVar64.push(recommendedVerdict);

            return sVar64.join(':');
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function processData() {
            var osRelevancy = 0,
                questionsRelevancy = 3,
                questionSelectionFilter = void 0,
                osSelectionFilter = void 0,
                selectedQuestions = ctrl.QuestionSelected;

            if (ctrl.kscAvailable) {
                questionsRelevancy = 5;
            }

            selectedQuestions = truncateByIndex(selectedQuestions, 3);
            osSelectionFilter = filterMatch(ctrl.settings.hmcLogicBlock, ctrl.OSSelected, osRelevancy, true);
            questionSelectionFilter = filterMatch(osSelectionFilter, selectedQuestions, questionsRelevancy, false);
            finalSelectionFilter = findByPriority(questionSelectionFilter);
            getHMCResult(finalSelectionFilter);

            // get resource element

            storeResults.forEach(function (item, index) {
                if (item.match(/\.json/)) {
                    return $http.get(item).then(function (response) {
                        ctrl.hmcVerdict[index] = response.data.fields;
                        ctrl.hmcVerdict[index].selectedDevices = 3;

                        if (ENV.locale === 'en-us' && ctrl.hmcVerdict[index].shortName === 'ktsmd') {
                            ctrl.hmcVerdict[index].selectedDevices = 5;
                        }

                        if ((ENV.locale === 'zh-cn' || ENV.locale === 'en-us') && ctrl.hmcVerdict[index].shortName === 'ktsmd') {
                            ctrl.hmcVerdict[index].selectedDevices = 5;
                        }

                        if (ENV.locale === 'zh-cn' && ctrl.hmcVerdict[index].shortName === 'kis') {
                            ctrl.hmcVerdict[index].selectedDevices = 1;
                        }

                        if (index === storeResults.length - 1) {
                            $timeout(function () {
                                $window.kaspersky.hmcTool = getSvar64(ctrl.OSSelected, ctrl.QuestionSelected, ctrl.hmcVerdict);
                                if (angular.isDefined($window.s)) $window.s.eVar64 = $window.kaspersky.hmcTool;
                                $window.trackPageView(currentName + ' > HMC > We recommend > ' + response.data.fields.title);
                            }, 100);
                        }
                    }, handleRejection);
                }
            });
        }

        function runEmbeddedHMC() {
            ctrl.stateClass.push('hmc-embedded');
            ctrl.step = ctrl.hmcData[0];
            stepsDialog();

            $timeout(function () {
                $window.trackPageView(currentName + ' > HMC > Select Platform');
            }, 100);
        }

        function embeddedBtn() {
            angular.element(document).find('.hmc-open.hmc-show-start-screen').on('click', function ($event) {
                $event.stopPropagation();
                $event.preventDefault();

                if ($event.handled !== true) {
                    $event.handled = true;
                    runEmbeddedHMC();
                }
            });
        }
    } // controller end
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.hmcUniversal').component('hmcUniversalView', {
        'bindings': {
            'resource': '@',
            'hmcType': '@'
        },
        'controller': 'hmcUniversalViewController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var hmcType = $attrs.hmcType || 'smb';

            return '/resources/template/html/modules/_shared/components/hmc-universal/templates/' + hmcType + '/init.html';
        }]
    });
})();
'use strict';

(function () {
    hmcUniversalViewController.$inject = ["directiveData", "$element", "ENV", "hmcConfig", "ngDialog", "errorService", "$http", "$scope"];
    angular.module('kappGlobal.hmcUniversal').controller('hmcUniversalViewController', hmcUniversalViewController);

    function hmcUniversalViewController(directiveData, $element, ENV, hmcConfig, ngDialog, errorService, $http, $scope) {
        var ctrl = this;
        ctrl.step = 'init';
        ctrl.products = {};
        ctrl.locale = ENV.locale;
        ctrl.templatePath = '/resources/template/html/modules/_shared/components/hmc-universal/templates';
        ctrl.stepHistory = new Array(ctrl.step);
        ctrl.checkAndChangeStep = checkAndChangeStep;
        ctrl.checkCustomLocale = checkCustomLocale;
        ctrl.backOneStep = backOneStep;
        ctrl.closePopup = closePopup;
        ctrl.$onInit = activate;

        var preventSubmit = $element.find('form').on('submit', function (ev) {
            ev.preventDefault();
        });

        $scope.$on('$destroy', preventSubmit);

        function activate() {
            setVars();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function setVars() {
            ctrl.template = ctrl.templatePath + '/' + ctrl.hmcType + '/' + ctrl.step + '.html';
            ctrl.contentPath = '/content/' + ctrl.locale + '/hmc-universal/' + ctrl.resource + '/' + ctrl.step + '.json';

            return getData();
        }

        function getData() {
            return directiveData.get('' + ctrl.contentPath).then(function (response) {
                if (ctrl.step === 'init') ctrl.init = response.data.fields;else ctrl.data = response.data.fields;

                if (ctrl.data) {
                    setMinMax();

                    if (ctrl.data.products) {
                        updateTemplate();
                        getProductData();
                    }
                }
            }, handleRejection);
        }

        /**
         * Check if value from Tridion isn't 0
         * Will be 0 if field is empty as Tridion converts it
         * Only needed in specific steps
         */
        function setMinMax() {
            if (ctrl.step === 'area_mailboxes' || ctrl.step === 'area_patch') {
                ctrl.data.minOne = ctrl.data.minOne !== 0 ? ctrl.data.minOne : 1;
                ctrl.data.maxOne = ctrl.data.maxOne !== 0 ? ctrl.data.maxOne : 999;
                ctrl.data.incOne = ctrl.data.incOne !== 0 ? ctrl.data.incOne : 1;
                ctrl.data.minTwo = ctrl.data.minTwo !== 0 ? ctrl.data.minTwo : 1;
                ctrl.data.maxTwo = ctrl.data.maxTwo !== 0 ? ctrl.data.maxTwo : 999;
                ctrl.data.incTwo = ctrl.data.incTwo !== 0 ? ctrl.data.incTwo : 1;

                if (checkCustomLocale()) customLocale(ctrl.data.incOne, ctrl.data.incTwo);else watchInputsForMaxValue();
            }
        }

        /**
         * Watch group of inputs for max value entered by user
         * Set to max value from Tridion if user enters bigger than allowed
         */
        function watchInputsForMaxValue() {
            ctrl.watchInputs = ctrl.step === 'area_mailboxes' ? ['$ctrl.area_mailboxes.devices', '$ctrl.area_mailboxes.nodes'] : ['$ctrl.area_patch.devices', '$ctrl.area_patch.nodes'];

            $scope.$watchGroup(ctrl.watchInputs, function (newV) {
                if (newV[0] && newV[0] > ctrl.data.maxOne) ctrl[ctrl.step].devices = ctrl.data.maxOne;
                if (newV[1] && newV[1] > ctrl.data.maxTwo) ctrl[ctrl.step].nodes = ctrl.data.maxTwo;
            });
        }

        /**
         * Get product data for each product
         *
         * @return (object)
         */
        function getProductData() {
            ctrl.data.products.forEach(function (item, index) {
                if (item.match(/\.json/)) {
                    return $http.get(item).then(function (response) {
                        ctrl.products[index] = response.data.fields;
                    }, handleRejection);
                }
            });
        }

        /**
         * Update template with either single or double product template
         *
         * @returns {string}
         */
        function updateTemplate() {
            ctrl.template = ctrl.templatePath + '/' + ctrl.hmcType + '/' + (ctrl.data.products.length === 1 ? 'product' : 'product_combo') + '.html';
            return ctrl.template;
        }

        /**
         * Check keys and values exist and add correct one
         * Each one is for different steps
         * Check for undefined and replace with null in order to compare
         */
        function setPack() {
            if (ctrl.area_mailboxes && (ctrl.area_mailboxes.devices || ctrl.area_mailboxes.nodes)) {
                ctrl.area_mailboxes.devices = angular.isDefined(ctrl.area_mailboxes.devices) ? ctrl.area_mailboxes.devices : null;
                ctrl.area_mailboxes.nodes = angular.isDefined(ctrl.area_mailboxes.nodes) ? ctrl.area_mailboxes.nodes : null;

                ctrl.selectedPack = ctrl.area_mailboxes.devices > ctrl.area_mailboxes.nodes ? ctrl.area_mailboxes.devices : ctrl.area_mailboxes.nodes;
            }

            if (ctrl.area_patch && (ctrl.area_patch.devices || ctrl.area_patch.nodes)) {
                ctrl.area_patch.devices = angular.isDefined(ctrl.area_patch.devices) ? ctrl.area_patch.devices : null;
                ctrl.area_patch.nodes = angular.isDefined(ctrl.area_patch.nodes) ? ctrl.area_patch.nodes : null;

                ctrl.selectedPack = ctrl.area_patch.devices > ctrl.area_patch.nodes ? ctrl.area_patch.devices : ctrl.area_patch.nodes;
            }
        }

        /**
         * Executes the comparison function which tells which step to change to
         * Fetches and update the view and data
         *
         * @param firstStep (string) sets the first step before the checks happen
         * @param step (string) specifies the name of the step you want to navigate back to
         * @returns {boolean}
         */
        function checkAndChangeStep(firstStep, step) {
            var updateHistory = true;

            if (firstStep) ctrl[ctrl.step]['resources'] = firstStep;

            if (step) {
                updateHistory = false;
            } else {
                step = hmcConfig[ctrl.hmcType][ctrl.step](ctrl);
            }

            if (step) {
                ctrl.step = step;
            } else {
                return false;
            }

            if (updateHistory) ctrl.stepHistory.push(ctrl.step);

            setVars().then(function () {
                setPack();
                stepsDialog();
            });
        }

        /**
         * Close and open a new ngDialog with correct template and data
         *
         * @returns {object}
         */
        function stepsDialog() {
            ngDialog.closeAll();
            return ngDialog.open({
                'template': ctrl.template,
                'className': 'hmc-modal-wrapper-' + ctrl.hmcType + '-' + ctrl.step + ' ngdialog-flyout',
                'showClose': false,
                'closeByEscape': false,
                'closeByDocument': false,
                'name': 'default-popup',
                'data': ctrl
            });
        }

        /**
         * Close all ngDialog popups and reset everything
         */
        function closePopup() {
            ngDialog.closeAll();
            reset();
        }

        /**
         * Delete all keys and reset all values
         * Needed when the popup is closed and want to start over
         * Not been called when using back button in popup
         */
        function reset() {
            for (var i = 0; i <= ctrl.stepHistory.length; i++) {
                for (var key in ctrl) {
                    if (ctrl.stepHistory[i] === key) delete ctrl[key];
                }
            }
            ctrl.step = 'init';
            ctrl.selectedPack = null;
            ctrl.stepHistory = new Array(ctrl.step);
            setVars();
        }

        /**
         * Used for the back button, navigates using stepHistory
         * @returns {boolean}
         */
        function backOneStep() {
            if (ctrl.stepHistory.length > 1) {
                ctrl.stepHistory.pop();
                checkAndChangeStep(null, ctrl.stepHistory[ctrl.stepHistory.length - 1]);
            }
            return false;
        }

        /**
         * Check for custom locales to show dropdowns instead of inputs
         * Same locales are used here as for buyblocks
         *
         * @returns {boolean}
         */
        function checkCustomLocale() {
            var customLocales = ['da-dk', 'en-us', 'es-es', 'fr-fr', 'it-it', 'ja-jp', 'nb-no', 'nl-nl', 'ru-ru', 'sv-se'];
            return customLocales.indexOf(ctrl.locale) > -1;
        }

        /**
         * Set the range for the dropdowns as specified in Tridion
         */
        function customLocale(incOne, incTwo) {
            ctrl.selectRangeOne = {};
            ctrl.selectRangeTwo = {};

            if (!ctrl.data) return;
            if (ctrl.data.minOne && ctrl.data.maxOne) {
                for (var i = ctrl.data.minOne; i <= ctrl.data.maxOne; i += incOne) {
                    ctrl.selectRangeOne[i] = i;
                }
            }
            if (ctrl.data.minTwo && ctrl.data.maxTwo) {
                for (var _i = ctrl.data.minTwo; _i <= ctrl.data.maxTwo; _i += incTwo) {
                    ctrl.selectRangeTwo[_i] = _i;
                }
            }
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.hmcUniversal').constant('hmcConfig', {
        'smb': {
            'init': function init(ctrl) {
                if (!ctrl.init) return;
                return ctrl.init.resources === 'Yes' ? 'console_type' : 'license_number_detection';
            },
            'license_number_detection': function license_number_detection(ctrl) {
                if (!ctrl.license_number_detection) return;
                return ctrl.license_number_detection.license_number > ctrl.data.number ? 'area_mailboxes' : 'ksos_verdict';
            },
            'console_type': function console_type(ctrl) {
                if (!ctrl.console_type) return;
                return ctrl.console_type.console_type === 'Cloud' || ctrl.console_type.console_type === 'Doesn\'t matter' ? 'area_mailboxes' : 'area_patch';
            },
            'area_mailboxes': function area_mailboxes(ctrl) {
                if (!ctrl.area_mailboxes) return;
                var step = ctrl.area_mailboxes;
                if (step.devices && !step.nodes) {
                    return 'kes_cloud_verdict';
                } else if (!step.devices && step.nodes) {
                    return 'ks_o365_verdict';
                } else if (step.devices && step.nodes) {
                    return 'ks_o365_plus_kes_cloud_verdict';
                }
            },
            'area_patch': function area_patch(ctrl) {
                if (!ctrl.area_patch) return;
                var step = ctrl.area_patch;
                if (step.nodes) {
                    return 'kesb_advanced_verdict';
                } else if (step.devices && !step.nodes) {
                    return 'kesb_select_verdict';
                }
            }
        }
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.homepageBanner').component('homepageBanner', {
        'templateUrl': '/resources/template/html/modules/_shared/components/homepage-banner/templates/homepage-banner.html',
        'controller': 'homepageBannerController'
    });
})();
'use strict';

(function () {
    'use strict';

    homepageBannerController.$inject = ["$timeout", "$element", "$state", "$scope", "directiveData", "searchService", "appHelperService", "windowHelperService", "errorService", "angularLoad", "$q", "ENV", "ngDialog", "$rootScope", "$window"];
    angular.module('kappGlobal.homepageBanner').controller('homepageBannerController', homepageBannerController);

    function homepageBannerController($timeout, $element, $state, $scope, directiveData, searchService, appHelperService, windowHelperService, errorService, angularLoad, $q, ENV, ngDialog, $rootScope, $window) {
        var ctrl = this,
            searchFormVisible = false,
            mobileSetup = void 0,
            desktopSetup = void 0,
            animations = {},
            pendingAnimations = {
            'searchForm': null,
            'ctas': null,
            'ctaElements': null
        };

        ctrl.data = {};
        ctrl.locale = ENV.locale;
        ctrl.businessNames = ['small', 'medium', 'enterprise'];
        ctrl.search = search;
        ctrl.goToSearchPage = goToSearchPage;
        ctrl.displaySearch = displaySearch;
        ctrl.$onInit = activate;
        ctrl.$onDestroy = destroyGlobalListeners;
        ctrl.isMobile = windowHelperService.isMobile();
        ctrl.handleBusinessHoverIn = handleBusinessHoverIn;
        ctrl.handleBusinessHoverOut = handleBusinessHoverOut;
        ctrl.handleHomeHoverIn = handleHomeHoverIn;
        ctrl.handleHomeHoverOut = handleHomeHoverOut;
        ctrl.openLRCDialog = openLRCDialog;
        ctrl.getTabsOrder = getTabsOrder;

        angular.element(window).bind('resize.homepageBanner', function () {
            ctrl.isMobile = windowHelperService.isMobile();
            $scope.$digest();
        });

        $scope.$watch('$ctrl.isMobile', function (newV, oldV) {
            if (newV !== oldV) {
                if (ctrl.isMobile && !mobileSetup) {
                    setupMobileHeader();
                } else if (ctrl.isMobile) {
                    desktopSetup = false;
                } else if (!ctrl.isMobile && !desktopSetup) {
                    runScript();
                }
            }
        });

        function activate() {
            loadScripts();
        }

        function getTabsOrder(order) {
            if (ctrl.locale === 'ja-jp') return Math.abs(order - 1);
            return order;
        }

        function loadScripts() {

            var promises = [angularLoad.loadScript('/resources/template/js/TweenLite.min.js'), angularLoad.loadScript('/resources/template/js/CSSPlugin.min.js'), directiveData.getByUrl('homepage-banner').then(function (response) {
                $element.css({ 'transform': 'translate3d(0,0,0)' });
                return response;
            })];

            $q.all(promises).then(handlePromisesSuccess).catch(function (rejection) {
                errorService.warn(rejection);
            });
        }

        function handlePromisesSuccess(responses) {
            var response = _.find(responses, 'data');
            ctrl.data = response.data.fields;
            ctrl.data.bsnsCategory = _.first(ctrl.data.productCategories);
            ctrl.data.homeCategory = _.last(ctrl.data.productCategories);
            runScript();
        }

        var autoOff = $rootScope.$on('autocompleteCall', function (ev, val) {
            var reg = new RegExp(val.d[0].Value[0], 'ig'),
                searchString = val.d[0].Value[0];

            ctrl.autocompleteQ = val.d[0].Value;
            ctrl.autocompleteQhtml = ctrl.autocompleteQ.map(function (item) {
                return item.replace(reg, '<span>' + searchString + '</span>');
            });
        });

        function destroyGlobalListeners() {
            angular.element(window).off('resize.homepageBanner');
            autoOff();
            var autocompleteTag = $window.document.querySelector('#autocompleteElement');
            if (autocompleteTag) $window.document.querySelector('head').removeChild(autocompleteTag);
        }

        function search() {
            searchService.autocomplete(ctrl.searchBar, $element);
        }

        function displaySearch() {
            var animationName = searchFormVisible ? 'hideSearchForm' : 'showSearchForm';
            searchFormVisible = !searchFormVisible;
            executeAnimation('searchForm', animationName);
        }

        function handleBusinessHoverIn() {
            if (!ctrl.onHoverBusiness) executeAnimation('ctas', 'showBusinessCta');
            ctrl.onHoverBusiness = true;
        }

        function handleBusinessHoverOut() {
            if (ctrl.onHoverBusiness) executeAnimation('ctas', 'hideBusinessCta');
            ctrl.onHoverBusiness = false;
        }

        function handleHomeHoverIn() {
            if (!ctrl.onHoverHome) executeAnimation('ctas', 'showHomeCta');
            ctrl.onHoverHome = true;
        }

        function handleHomeHoverOut() {
            if (ctrl.onHoverHome) executeAnimation('ctas', 'hideHomeCta');
            ctrl.onHoverHome = false;
        }

        function executeAnimation(animationKey, animationName) {
            if (animations[animationName]) animations[animationName]();else pendingAnimations[animationKey] = animationName;
        }

        function registerAnimations(animationsMap) {
            _.extend(animations, animationsMap);
        }

        function flushAnimations(animationKey) {
            if (pendingAnimations[animationKey]) {
                animations[pendingAnimations[animationKey]]();
                pendingAnimations[animationKey] = null;
            }
        }

        function goToSearchPage(e) {
            var keyCode = void 0;
            if (e && e.type === 'keypress') {
                keyCode = e.which || e.keyCode;

                if (keyCode === 13) {
                    $state.go('search', {
                        'query': ctrl.searchBar
                    });
                }
            } else {
                $state.go('search', {
                    'query': ctrl.searchBar
                });
            }
        }

        function openLRCDialog($event) {
            $event.preventDefault();
            ngDialog.open({
                'template': '<div class="modal-header">\n                    \t\t<a class="modal-button modal-close" aria-label="Dismiss" ng-click="closeThisDialog(0)">\n                    \t\t\t<span class="font-icons icon-cancel"></span>\n                    \t\t</a>\n                    </div>\n                    <lrc-serial template="lrc-serial-dialog"></lrc-serial>',
                'plain': true,
                'className': 'ngdialog-flyout ngdialog--lrc-dialog',
                'data': ctrl,
                'showClose': false,
                'scope': $scope
            });
        }

        function runScript() {
            $timeout(ctrl.isMobile && !mobileSetup ? setupMobileHeader : setupDesktopHeader);
        }

        // desktop header
        function setupDesktopHeader() {
            var $header = $('.homepage-hero-header-desktop'),
                $body = $('body'),
                $headerInner = $header.find('.hero-header-inner'),
                $searchForm = $header.find('.top-nav-search-form'),
                $searchInputWrap = $searchForm.find('.search-input-wrap'),
                $searchInput = $header.find('#homepage-header-search-input'),
                $hideOnSearch = $header.find('.top-nav-hideonsearch'),
                $midCol = $header.find('.hero-mid-col'),
                $bsnsCol = $header.find('.hero-side-col.business'),
                $homeCol = $header.find('.hero-side-col.home'),
                $bsnsOverlay = $bsnsCol.find('.green-overlay'),
                $homeOverlay = $homeCol.find('.green-overlay'),
                $bsnsGrayOverlay = $bsnsCol.find('.gray-overlay'),
                $homeGrayOverlay = $homeCol.find('.gray-overlay'),
                $bsnsSideCtaBox = $bsnsCol.find('.side-cta-box'),
                $homeSideCtaBox = $homeCol.find('.side-cta-box'),
                $bsnsSideScreen = $bsnsCol.find('.side-screen'),
                $homeSideScreen = $homeCol.find('.side-screen'),
                $bsnsStateCtaBtns = $bsnsSideScreen.find('.cta-list > li > a'),
                $homeStateCtaBtns = $homeSideScreen.find('.cta-list > li > a'),
                $stateCtasWrap = $header.find('.cta-list'),
                $stateCtaWraps = $header.find('.cta-list > li'),
                $stateCtaBtns = $header.find('.cta-list > li > a'),
                $midScreenIntro = $header.find('.mid-screen-intro'),
                $midSmallLogo = $header.find('.mid-small-logo'),
                $midSmallLogoLine = $midSmallLogo.find('> span'),
                $selectProductType = $header.find('.select-product-type');

            desktopSetup = true;

            if (!$header.length) return;

            $bsnsSideCtaBox.find('a').click(function (e) {
                e.preventDefault();
            });
            $homeSideCtaBox.find('a').click(function (e) {
                e.preventDefault();
            });

            $(window).on('resize', function () {
                var bodyWidth = $body.width(),
                    midColWidth = $midCol.width();

                if (bodyWidth < 768) return;

                if (bodyWidth >= 768 && bodyWidth < 992) {
                    // since we're sliding the header in this pixel range we
                    // need to make it extra wide so the edges don't become
                    // visible when it finishes sliding
                    bodyWidth += 400;
                }

                $headerInner.css({
                    'width': bodyWidth + 'px',
                    'margin-left': '-' + bodyWidth / 2 + 'px'
                });
                $bsnsCol.width((bodyWidth - midColWidth) / 2);
                $homeCol.width((bodyWidth - midColWidth) / 2);
            });

            $(window).trigger('resize');

            // Search form

            registerAnimations({ showSearchForm: showSearchForm, hideSearchForm: hideSearchForm });
            flushAnimations('searchForm');

            function showSearchForm() {
                $searchForm.find('.search-bar').show();
                TweenLite.fromTo($hideOnSearch, 0.4, { 'x': 0, 'autoAlpha': 1 }, { 'x': '+=10', 'autoAlpha': 0 });
                TweenLite.fromTo($searchInputWrap, 0.4, { 'x': '-=10', 'opacity': 0 }, { 'x': 0, 'opacity': 1 });
                $searchInputWrap.css('z-index', '1');
                $searchForm.addClass('active');
                $searchInput[0].focus();
            }

            function hideSearchForm() {
                $searchForm.find('.search-bar').hide();
                TweenLite.fromTo($hideOnSearch, 0.4, { 'x': '+=10', 'autoAlpha': 0 }, { 'x': 0, 'autoAlpha': 1 });
                TweenLite.fromTo($searchInputWrap, 0.4, { 'x': 0, 'opacity': 1 }, { 'x': '-=10', 'opacity': 0 });
                $searchInputWrap.css('z-index', '-1');
                $searchForm.removeClass('active');
            }

            // CTAs

            $timeout(function () {
                TweenLite.fromTo($bsnsSideCtaBox, 1, { 'y': '+=20', 'autoAlpha': 0 }, { 'y': 0, 'autoAlpha': 1 });
                TweenLite.fromTo($homeSideCtaBox, 1, { 'y': '+=20', 'autoAlpha': 0 }, { 'y': 0, 'autoAlpha': 1 });

                registerAnimations({
                    showBusinessCta: showBusinessCta,
                    hideBusinessCta: hideBusinessCta,
                    showHomeCta: showHomeCta,
                    hideHomeCta: hideHomeCta
                });
                flushAnimations('ctas');

                $stateCtaBtns.hover(handleCtaBtnHoverIn, handleCtaBtnHoverOut);
                $stateCtaWraps.hover(handleCtaWrapHoverIn);
                $stateCtasWrap.mouseleave(handleCtaWrapHoverOut);
            }, 1000);

            function showBusinessCta() {
                if ($body.width() < 992) applyOffset('right');
                TweenLite.to($bsnsSideCtaBox, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($bsnsOverlay, 0.4, { 'autoAlpha': 1 });
                TweenLite.to($homeGrayOverlay, 0.4, { 'autoAlpha': 0.77 });
                TweenLite.to($bsnsSideScreen, 0.4, { 'autoAlpha': 1 });
                // let tl = new TimelineLite();
                // tl.staggerFromTo($bsnsStateCtaBtns, 0.4, {'x': '-=10'}, {'x': 0}, 0.01);
                TweenLite.fromTo($bsnsStateCtaBtns, 0.4, { 'x': '+=10' }, { 'x': 0 });
                TweenLite.to($selectProductType, 0.2, { 'autoAlpha': 0 });
            }

            function showHomeCta() {
                if ($body.width() < 992) applyOffset('left');
                TweenLite.to($homeSideCtaBox, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($homeOverlay, 0.4, { 'autoAlpha': 1 });
                TweenLite.to($bsnsGrayOverlay, 0.4, { 'autoAlpha': 0.77 });
                TweenLite.to($homeSideScreen, 0.4, { 'autoAlpha': 1 });
                // let tl = new TimelineLite();
                // tl.staggerFromTo($homeStateCtaBtns, 0.4, {'x': '+=10'}, {'x': 0}, 0.01);
                TweenLite.fromTo($homeStateCtaBtns, 0.4, { 'x': '+=10' }, { 'x': 0 });
                TweenLite.to($selectProductType, 0.2, { 'autoAlpha': 0 });
            }

            function hideBusinessCta() {
                if ($body.width() < 992) restoreOffset();
                TweenLite.to($bsnsSideCtaBox, 0.4, { 'autoAlpha': 1 });
                TweenLite.to($bsnsOverlay, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($homeGrayOverlay, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($bsnsSideScreen, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($selectProductType, 0.2, { 'autoAlpha': 1 });
            }

            function hideHomeCta() {
                if ($body.width() < 992) restoreOffset();
                TweenLite.to($homeSideCtaBox, 0.4, { 'autoAlpha': 1 });
                TweenLite.to($homeOverlay, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($bsnsGrayOverlay, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($homeSideScreen, 0.4, { 'autoAlpha': 0 });
                TweenLite.to($selectProductType, 0.2, { 'autoAlpha': 1 });
            }

            function applyOffset(direction) {
                var offset = calcOffset($body.width()),
                    animateDir = void 0;
                if (appHelperService.isPageDirectionRTL()) {
                    animateDir = direction === 'right' ? '-=' : '+=';
                } else {
                    animateDir = direction === 'right' ? '+=' : '-=';
                }
                TweenLite.to($headerInner, 1.2, { 'ease': Power1.easeOut, 'x': animateDir + offset.x });
                TweenLite.to($midCol, 1.2, { 'ease': Power1.easeOut, 'width': offset.w });
            }

            function restoreOffset() {
                TweenLite.to($headerInner, 1.2, { 'ease': Power1.easeOut, 'x': 0 });
                TweenLite.to($midCol, 1.2, { 'ease': Power1.easeOut, 'width': 280 });
            }

            function calcOffset(windowWidth) {
                // 425px ~> minimum width of side col that's needed
                // at 768 resolution    ~> x:200/w:300
                // at 1200 resolution   ~> x:0/w:350
                var minSideWidth = 440,
                    maxMidWidth = 280,
                    offset = void 0,
                    x = void 0,
                    w = void 0;
                offset = minSideWidth - (windowWidth - maxMidWidth) / 2;
                if (offset < 0) return { 'x': 0, 'w': maxMidWidth };
                x = offset * 0.85;
                w = maxMidWidth - offset * 0.15;
                return { 'x': x, 'w': w };
            }

            function handleCtaBtnHoverIn() {
                TweenLite.to(this, 0.3, { 'opacity': 1 });
            }

            function handleCtaBtnHoverOut() {
                TweenLite.to(this, 0.3, { 'opacity': 0.7 });
            }

            function handleCtaWrapHoverIn() {
                var $activeScreen = $header.find('.mid-screen.active'),
                    $targetScreen = $header.find('.mid-screen.' + $(this).data('screen'));

                $activeScreen.removeClass('active');
                $targetScreen.addClass('active');

                TweenLite.to($activeScreen, 0.5, { 'autoAlpha': 0 });
                TweenLite.to($midScreenIntro, 0.2, { 'autoAlpha': 0 });

                if ($activeScreen.hasClass('mid-screen-intro')) {
                    TweenLite.set($midSmallLogo, { 'top': $targetScreen.height() + 22 });
                    TweenLite.to($midSmallLogo, 0.5, { 'autoAlpha': 1 });
                } else {
                    TweenLite.to($midSmallLogo, 0.5, { 'autoAlpha': 1, 'top': $targetScreen.height() + 22 });
                }

                TweenLite.fromTo($midSmallLogoLine, 0.8, { 'width': 2 }, { 'ease': Power1.easeInOut, 'width': 170 });
                TweenLite.to($targetScreen, 0.5, { 'autoAlpha': 1 });
            }

            function handleCtaWrapHoverOut() {
                var $activeScreen = $header.find('.mid-screen.active');
                TweenLite.to($activeScreen, 0.5, { 'autoAlpha': 0 });
                TweenLite.to($midSmallLogo, 0.2, { 'autoAlpha': 0 });
                TweenLite.to($midScreenIntro, 0.5, { 'autoAlpha': 1 });
                $activeScreen.removeClass('active');
                $midScreenIntro.addClass('active');
            }
        }

        // mobile header
        function setupMobileHeader() {
            var $header = $('.homepage-hero-header-mobile'),
                $allScreens = $header.find('.screen'),
                $introScreen = $header.find('.screen-intro'),
                $bsnsScreen = $header.find('.screen-business'),
                $homeScreen = $header.find('.screen-home'),
                $bsnsCta = $introScreen.find('.cta-list .cta.business'),
                $homeCta = $introScreen.find('.cta-list .cta.home'),
                $backBtn = $header.find('.back-btn');

            mobileSetup = true;
            desktopSetup = false;

            if (!$header.length) return;

            $bsnsCta.click(function (event) {
                event.preventDefault();
                TweenLite.fromTo($bsnsScreen, 0.5, { 'x': '+=20', 'autoAlpha': 0 }, { 'x': 0, 'autoAlpha': 1 });
                $allScreens.removeClass('active');
                $bsnsScreen.addClass('active');
            });

            $homeCta.click(function (event) {
                event.preventDefault();
                TweenLite.fromTo($homeScreen, 0.5, { 'x': '+=20', 'autoAlpha': 0 }, { 'x': 0, 'autoAlpha': 1 });
                $allScreens.removeClass('active');
                $homeScreen.addClass('active');
            });

            $backBtn.click(function () {
                var $activeScreen = $header.find('.screen.active');
                TweenLite.fromTo($activeScreen, 0.5, { 'x': 0, 'autoAlpha': 1 }, { 'x': '-=10', 'autoAlpha': 0 });
                $allScreens.removeClass('active');
                $introScreen.addClass('active');
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.kssVerdictHeader').component('kssVerdictHeader', {
        'templateUrl': '/resources/template/html/modules/_shared/components/kss-verdict-header/templates/kss-verdict-header.html',
        'controller': 'sharedGetByNameController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcDisclaimers').component('lrcDisclaimers', {
        'bindings': {
            'disclaimer': '='
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/lrc-disclaimers/templates/lrc-disclaimers.html',
        'controller': 'lrcDisclaimersController'
    });
})();
'use strict';

(function () {
    'use strict';

    lrcDisclaimersController.$inject = ["$location", "$anchorScroll"];
    angular.module('kappGlobal.lrcDisclaimers').controller('lrcDisclaimersController', lrcDisclaimersController);

    function lrcDisclaimersController($location, $anchorScroll) {
        var ctrl = this;
        ctrl.$onInit = activate;
        $anchorScroll.yOffset = 100;

        function activate() {
            var id = $location.hash();
            $location.hash('disclaimer');
            $anchorScroll();
            $location.hash(id);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcSerial').component('lrcSerial', {
        'bindings': {
            'lostDaysDisclaimerFullText': '=',
            'kfaDisclaimer': '=',
            'template': '@'
        },
        'controller': 'lrcSerialController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'lrc-serial';

            if ($attrs.template) template = $attrs.template;
            return '/resources/template/html/modules/_shared/components/lrc-serial/templates/' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    lrcSerialController.$inject = ["$scope", "$state", "sessionStorageService", "directiveData", "lrcService", "$q", "errorService", "windowHelperService", "ngDialog"];
    angular.module('kappGlobal.lrcSerial').controller('lrcSerialController', lrcSerialController);

    function lrcSerialController($scope, $state, sessionStorageService, directiveData, lrcService, $q, errorService, windowHelperService, ngDialog) {
        var ctrl = this;
        ctrl.sendSerial = sendSerial;
        ctrl.editInput = editInput;
        ctrl.$onInit = activate;
        ctrl.openScreenshotDialog = openScreenshotDialog;
        var opts = { 'location': false, 'inherit': true };

        function activate() {
            ctrl.isPartner = ctrl.template === 'lrc-serial-dialog';
            var promises = [getLrcSerial(), getTranslation()];
            $q.all(promises);
        }

        function getLrcSerial() {
            return directiveData.getByUrl('lrc-serial').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.hideSidebar = ctrl.data.hideSidebar && ctrl.data.hideSidebar[0] === 'True';
            }, handleRejection);
        }

        function getTranslation() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function openScreenshotDialog($event) {
            $event.preventDefault();
            ngDialog.open({
                'template': '<div class="modal-header">\n                    \t\t<a class="modal-button modal-close" aria-label="Dismiss" ng-click="closeThisDialog(0)">\n                    \t\t\t<span class="font-icons icon-cancel"></span>\n                    \t\t</a>\n                    </div>\n                    <div class="text-center">\n                      <img ng-src="{{ngDialogData.data.infoImg}}" />\n                    </div>',
                'plain': true,
                'className': 'ngdialog-flyout ngdialog--lrc-dialog',
                'data': ctrl,
                'showClose': false,
                'scope': $scope,
                'width': 772
            });
        }

        function sendSerial() {
            if (ctrl.serial) {
                if (ctrl.serial.length === 18) {
                    var serialArr = ctrl.serial.split('');
                    serialArr.splice(4, 0, '-');
                    serialArr.splice(11, 0, '-');
                    ctrl.serial = serialArr.join('');
                }
                if (ctrl.serial.length === 32) {
                    var _serialArr = ctrl.serial.split('');
                    _serialArr.splice(8, 0, '-');
                    _serialArr.splice(13, 0, '-');
                    _serialArr.splice(18, 0, '-');
                    _serialArr.splice(23, 0, '-');
                    ctrl.serial = _serialArr.join('');
                }
                if (!$scope.serialForm.$invalid) {
                    lrcService.searchLicense(ctrl.serial, {}).then(function (response) {
                        ctrl.license = response;
                        if (ctrl.isPartner) return handlePartnerSuccess();

                        handleLRCSuccess();
                    }, function (rejection) {
                        ctrl.error = ctrl.translations.lrcInvalidSerial || 'You may have made a mistake when entering your License information. Please try entering it again.';
                        errorService.warn(rejection);
                    });
                } else {
                    $scope.serialForm.serial.$dirty = true;
                }
            } else {
                $scope.serialForm.serial.$dirty = true;
            }
        }

        function handleLRCSuccess() {
            ctrl.license.data.verdictSerial = ctrl.serial;

            setLostDaysLeft(ctrl.license.data.days_left);
            // Check if the verdict is LOSTDAYS problem related and save partner name and link
            if (ctrl.license.data.verdict.match(/LOSTDAYS_FALLBACK/)) {
                ctrl.lostDaysDisclaimer = {
                    'partner': ctrl.license.data.verdict.match(/LOSTDAYS_FALLBACK_(.*)/)[1],
                    'link': ctrl.license.data.provider_url
                };
                ctrl.lostDaysDisclaimerFullText = replaceAll(ctrl.translations[ctrl.lostDaysDisclaimer.partner], /href="#"/, 'href="' + ctrl.lostDaysDisclaimer.link + '"');
            } else if (ctrl.license.data.verdict.match(/KSC_FAM_UNKNOWN/)) {
                ctrl.lostDaysDisclaimerFullText = ctrl.translations[ctrl.license.data.verdict];
            } else {
                $state.go('lrc-verdict', {
                    'verdict': ctrl.license.data.verdict,
                    'verdictData': ctrl.license.data
                }, opts);
            }
        }

        function handlePartnerSuccess() {
            if (!ctrl.license.data.partnerid) return ctrl.noPartner = true;
            getPartnerData();
        }

        function getPartnerData() {
            directiveData.getByUrl('/lrc/partner-mapping.json').then(function (response) {
                var partnerObj = _.find(response.data.fields.map, ['id', String(ctrl.license.data.partnerid)]);

                if (!partnerObj) return ctrl.noPartner = true;
                windowHelperService.goToUrl(partnerObj.href);
            });
        }

        // Private Methods
        function replaceAll(lostDaysString, find, replace) {
            return lostDaysString.replace(find, replace);
        }

        function editInput(newV, oldV) {
            if (newV && oldV && newV.length < 21) {
                if (newV.length > oldV.length && (ctrl.serial.length === 4 || ctrl.serial.length === 11) && ctrl.serial[ctrl.serial.length - 1] !== '-') ctrl.serial += '-';
            } else if (newV && oldV && newV.length === 21) {
                var serialArr = ctrl.serial.replace(/-/g, '').split('');
                serialArr.splice(8, 0, '-');
                serialArr.splice(13, 0, '-');
                serialArr.splice(18, 0, '-');
                ctrl.serial = serialArr.join('');
                if (newV.length > oldV.length && ctrl.serial.length === 23 && ctrl.serial[ctrl.serial.length - 1] !== '-') ctrl.serial += '-';
            } else if (newV && oldV && newV.length > 21) {
                if (newV.length > oldV.length && ctrl.serial.length === 23 && ctrl.serial[ctrl.serial.length - 1] !== '-') ctrl.serial += '-';
            }
        }

        function setLostDaysLeft(daysLeft) {
            sessionStorageService.set('lrc-daysLeft', daysLeft);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcStepsSec').component('lrcStepsSec', {
        'bindings': {},
        'templateUrl': '/resources/template/html/modules/_shared/components/lrc-steps/templates/lrc-steps-sec.html',
        'controller': 'lrcStepsSecController'
    });
})();
'use strict';

(function () {
    'use strict';

    lrcStepsSecController.$inject = ["$scope", "$timeout", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.lrcStepsSec').controller('lrcStepsSecController', lrcStepsSecController);

    function lrcStepsSecController($scope, $timeout, directiveData, appHelperService, errorService) {
        var ctrl = this,
            gallerySlider2Config = {
            'infinite': true,
            'slidesToShow': 2,
            'dots': false,
            'draggable': false,
            'centerMode': true,
            'nextArrow': '<a type="button" href="" class="next-slide"></a>',
            'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
            'rtl': appHelperService.isPageDirectionRTL(),
            'responsive': [{
                'breakpoint': 480,
                'settings': {
                    'slidesToShow': 1
                }
            }]
        },
            magnificPopupConfig = {
            'delegate': 'a',
            'type': 'image',
            'closeOnContentClick': false,
            'closeBtnInside': false,
            'mainClass': 'mfp-with-zoom mfp-img-mobile',
            'image': {
                'verticalFit': true
            },
            'gallery': {
                'enabled': true
            },
            'zoom': {
                'enabled': true,
                'duration': 300,
                'opener': function opener(element) {
                    return element.find('img');
                }
            }
        };
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('lrc-steps-sec').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        ctrl.tab = 0;
        ctrl.setTab = function (event, newTab) {
            event.preventDefault();
            ctrl.tab = newTab;
        };
        ctrl.isSet = function (tabNum) {
            return $scope.tab === tabNum;
        };

        function runScript() {
            $timeout(function () {
                var SelectedName = void 0;

                //////////////////////////////////////////////////////
                // Tabs
                //////////////////////////////////////////////////////

                $('.tab-title.sec a').on('click', function (e) {
                    var $this = $(this),
                        $parent = $this.parent(),
                        current = void 0,
                        tab = void 0;
                    e.preventDefault();

                    // Get the name of tab content that should be controled
                    current = $parent.closest('.tabs-title-wrapper').attr('data-tab');

                    // Remove selected class from all tab titles and add it to the one just clicked
                    $('.tabs-title-wrapper.sec[data-tab=\'' + current + '\'] .tab-title').removeClass('selected');
                    $parent.addClass('selected');

                    // Check clicked link href and show matching tab content
                    tab = $this.attr('href');
                    $('.tab-content-wrapper.sec[data-tab=\'' + current + '\'] .tab-content-single').not(tab).removeClass('tab-show');
                    $(tab).addClass('tab-show');
                });

                //////////////////////////////////////////
                // Tabs desktop -> Dropdown mobile
                //////////////////////////////////////////

                // Get the name of currently active tab for mobile list
                SelectedName = $('.tab-nav.sec').parent().find('ul.tabs li.selected a').text();

                if ($scope.$ctrl.data.steps.length > 1) {
                    $('.tab-nav.sec').append('<div class="tab-label">' + SelectedName + '</div>');
                }

                $('.tab-nav.sec').click(function (e) {
                    e.stopPropagation();
                    $(this).toggleClass('active');
                });

                // Close it if user clicks outside
                $('body').click(function () {
                    $('.tab-nav.sec').removeClass('active');
                });

                $('.tab-nav.sec .tabs').click(function (e) {
                    e.stopPropagation();
                });

                // Check when item is clicked and update active tab label
                $('.tab-nav.sec .tabs li').click(function (e) {
                    var $this = $(this);
                    e.preventDefault();
                    $this.parent().siblings().remove();
                    $this.closest('.tab-nav').append('<div class=tab-label></div>');
                    $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                    $this.parent().parent().toggleClass('active');
                });

                function initGallerySlider2() {
                    return gallerySlider2Config;
                }

                $('.gallery-slider-2.sec').slick(initGallerySlider2());

                $('.reinit-slick.sec .tab-title a').on('click', function (e) {
                    e.preventDefault();
                    $('.gallery-slider-2.sec').slick('unslick').slick(initGallerySlider2());
                });

                $('.popup-gallery.sec div').magnificPopup(magnificPopupConfig);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.lrcSteps').component('lrcSteps', {
        'bindings': {},
        'templateUrl': '/resources/template/html/modules/_shared/components/lrc-steps/templates/lrc-steps.html',
        'controller': 'lrcStepsController'
    });
})();
'use strict';

(function () {
    'use strict';

    lrcStepsController.$inject = ["$scope", "$timeout", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.lrcSteps').controller('lrcStepsController', lrcStepsController);

    function lrcStepsController($scope, $timeout, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.tab = 0;
        ctrl.setTab = setTab;
        ctrl.isSet = isSet;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('lrc-steps').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function setTab(event, newTab) {
            event.preventDefault();
            ctrl.tab = newTab;
        }

        function isSet(tabNum) {
            return $scope.tab === tabNum;
        }

        function runScript() {
            $timeout(function () {
                var SelectedName = void 0;

                //////////////////////////////////////////////////////
                // Tabs
                //////////////////////////////////////////////////////

                $('.tab-title:not(.sec) a').on('click', function (e) {
                    var $this = $(this),
                        $parent = $this.parent(),
                        current = void 0,
                        tab = void 0;

                    e.preventDefault();
                    // Get the name of tab content that should be controled
                    current = $parent.closest('.tabs-title-wrapper').attr('data-tab');

                    // Remove selected class from all tab titles and add it to the one just clicked
                    $('.tabs-title-wrapper[data-tab=\'' + current + '\'] .tab-title').removeClass('selected');
                    $parent.addClass('selected');

                    // Check clicked link href and show matching tab content
                    tab = $this.attr('href');
                    $('.tab-content-wrapper[data-tab=\'' + current + '\'] .tab-content-single').not(tab).removeClass('tab-show');
                    $(tab).addClass('tab-show');
                });

                //////////////////////////////////////////
                // Tabs desktop -> Dropdown mobile
                //////////////////////////////////////////

                // Get the name of currently active tab for mobile list
                SelectedName = $('.tab-nav:not(.sec)').parent().find('ul.tabs li.selected a').text();

                if ($scope.$ctrl.data.steps.length > 1) {
                    $('.tab-nav:not(.sec)').append('<div class="tab-label">' + SelectedName + '</div>');
                }

                $('.tab-nav:not(.sec)').click(function (e) {
                    e.stopPropagation();
                    $(this).toggleClass('active');
                });

                // Close it if user clicks outside
                $('body').click(function () {
                    $('.tab-nav:not(.sec)').removeClass('active');
                });

                $('.tab-nav:not(.sec) .tabs').click(function (e) {
                    e.stopPropagation();
                });

                // Check when item is clicked and update active tab label
                $('.tab-nav:not(.sec) .tabs li').click(function (e) {
                    var $this = $(this);
                    e.preventDefault();
                    $this.parent().siblings().remove();
                    $this.closest('.tab-nav').append('<div class=tab-label></div>');
                    $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                    $this.parent().parent().toggleClass('active');
                });

                function initGallerySlider() {
                    return {
                        'infinite': true,
                        'slidesToShow': 2,
                        'dots': false,
                        'draggable': false,
                        'centerMode': true,
                        'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                        'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                        'rtl': appHelperService.isPageDirectionRTL(),
                        'responsive': [{
                            'breakpoint': 480,
                            'settings': {
                                'slidesToShow': 1
                            }
                        }]
                    };
                }

                $('.gallery-slider-2:not(.sec)').slick(initGallerySlider());

                $('.reinit-slick:not(.sec) .tab-title a').on('click', function (e) {
                    e.preventDefault();
                    $('.gallery-slider-2:not(.sec)').slick('unslick').slick(initGallerySlider());
                });

                $('.popup-gallery:not(.sec) div').magnificPopup({
                    'delegate': 'a',
                    'type': 'image',
                    'closeOnContentClick': false,
                    'closeBtnInside': false,
                    'mainClass': 'mfp-with-zoom mfp-img-mobile',
                    'image': {
                        'verticalFit': true
                    },
                    'gallery': {
                        'enabled': true
                    },
                    'zoom': {
                        'enabled': true,
                        'duration': 300,
                        'opener': function opener(element) {
                            return element.find('img');
                        }
                    }
                });
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.lrcVerdictPage').component('lrcVerdictPage', {
        'bindings': {
            'verdict': '@',
            'verdictData': '<',
            //loc variable sending requests to en-ca depending on query parameter
            'loc': '<'
        },
        'template': '<ng-include src="\'/resources/template/html/pages/lrc/\'+$ctrl.template+\'.template.html\'">',
        'controller': 'lrcVerdictPageController'
    });
})();
'use strict';

(function () {
    lrcVerdictController.$inject = ["appHelperService", "directiveData", "productData", "priceData", "rootScopeHelper", "$rootScope", "$q", "$anchorScroll", "$location", "errorService", "$state", "$scope", "$timeout", "$window", "maxymiser", "$http", "$element", "ENV", "windowHelperService", "$document", "seoHelperService", "templateVersion"];
    angular.module('kappGlobal.lrcVerdictPage').controller('lrcVerdictPageController', lrcVerdictController);

    function lrcVerdictController(appHelperService, directiveData, productData, priceData, rootScopeHelper, $rootScope, $q, $anchorScroll, $location, errorService, $state, $scope, $timeout, $window, maxymiser, $http, $element, ENV, windowHelperService, $document, seoHelperService, templateVersion) {

        var DAYS_LEFT_THRESHOLD = 30;

        // localization //
        var ctrl = this,
            viewLoadedUnsub = $rootScope.$on('$viewContentLoaded', function () {
            $timeout(function () {
                return scrollToKscSection();
            }, 2000);
        });

        $scope.$on('$destroy', function () {
            return viewLoadedUnsub();
        });

        ctrl.$onInit = activate;
        ctrl.handleBuyblockUpdated = handleBuyblockUpdated;
        ctrl.isBuyblockEnabled = isBuyblockEnabled;
        ctrl.checkIPCountry = checkIPCountry;
        ctrl.getPageHeadline = getPageHeadline;
        ctrl.locale = appHelperService.getLocale();

        function activate() {
            ctrl.folder = ctrl.verdict.match(/[a-z0-9]+/i);
            checkEStoreAvailibity();

            handleVerdict();
            if (ctrl.verdictData) handleVerdictData();
            ctrl.locale = ENV.locale;
            ctrl.isB2B = false;
            ctrl.ipCountry = windowHelperService.getIPCountry();

            getTranslations();
            $timeout(function () {
                checkLostdaysNoPricing();
            }, 3000);

            // TODO: add after promise
            addVerdictString();

            rootScopeHelper.on($scope, 'currencyChange', getPageHeadline($rootScope.currency));

            templateVersion.getVer('home-security', 'meta', 'products/kscloud/meta').then(function (response) {
                ctrl.templateVer = response.data.fields.template || '1.0';
            });
        }

        function checkIPCountry(currency) {
            var ipCountry = currency || $rootScope.currency ? currency || $rootScope.currency : ctrl.ipCountry;
            return [ipCountry !== 'DA', ipCountry !== 'DT', ipCountry !== 'DH'].every(function (condition) {
                return condition;
            });
        }

        function getPageHeadline(currency) {
            if (!ctrl.data) return;
            return ctrl.data.headline ? checkIPCountry(currency) ? ctrl.data.pageHeadline : ctrl.data.headline : ctrl.data.pageHeadline;
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function handleBuyblockUpdated(section, product, values) {
            var targetSection = section !== 'top' ? 'top' : 'bottom';
            if (!_.isEqual(ctrl.bbData[targetSection][product], values)) {
                ctrl.bbData[targetSection][product] = values;
            }
        }

        function isBuyblockEnabled() {
            return _.get(ctrl, 'data.buyblockDisabled[0]') !== 'True';
        }

        /**
         * This is to apply the correct grammar case for the word 'days' in Russian. Depending on the number, it will end in one of the 3 cases below.
         * The general rule is: from 5 to 20, always use дней; other than that, look at the last digit of the number:
         * 1 => день
         * 2 to 4 => дня
         * 5 to 9, or 0 => дней
         * @return {String} The correct grammar case for 'days' in Russian
         */
        function parseRUDays() {
            var days = ctrl.verdictData.days_left;
            if (days % 100 < 5 || days % 100 > 20) {
                if (days % 10 === 1) return 'день';
                if (days % 10 > 1 && days % 10 < 5) return 'дня';
                return 'дней';
            } else {
                return 'дней';
            }
        }

        // function to get all products information in a promise
        function productsFetcher(products) {
            return $q.all(products.map(function (product) {
                if (product.match(/cloud|total|365|server|mobile|systems|gateway/i) || ctrl.data.productList.match(/(kes|endpoint|core|advanced|select)/ig)) {
                    return productData.getsmb(product).then(function (response) {
                        return response.data.fields;
                    }, handleRejection);
                } else if (ctrl.data.productList.match(/ksos/ig)) {
                    return productData.getvsb(product).then(function (response) {
                        return response.data.fields;
                    }, handleRejection);
                } else {
                    return productData.getb2c(product).then(function (response) {
                        return response.data.fields;
                    }, handleRejection);
                }
            }));
        }

        function checkLostdaysNoPricing() {
            var buyblocksOnPage = maxymiser.readComponentData($('buyblock-radio, buyblock-dropdown'));

            if (buyblocksOnPage > 0 && buyblocksOnPage.every(function (element) {
                return element.priceList && element.priceList.length === 0;
            })) {
                $state.go('lrc-b2c', { 'lostDaysDisclaimerFullText': ctrl.translations['NO_PRICING_OPTIONS'] }, { 'location': false, 'inherit': true });
            }
        }

        function setRemainingDaysMetaTags() {
            var remainingDaysMetaObj = {
                'RemainingDaysUntilExpiration': ctrl.verdictData.days_left,
                'DaysAfterExpiration': ctrl.verdictData.days_expired
            };

            if (ctrl.verdictData.days_left >= 0 || ctrl.verdictData.days_expired >= 0) seoHelperService.setMeta(remainingDaysMetaObj);
        }

        function overridePageTitle() {
            if (ctrl.data.overridePageTitle) windowHelperService.setWindowTitle(ctrl.data.overridePageTitle);
        }

        function scrollToKscSection() {
            if ((ctrl.verdictData.verdict.indexOf('KIS') > -1 || ctrl.verdictData.verdict.indexOf('KTS') > -1) && $location.hash() === 'ksc') {
                $location.hash('ksc');
                // $anchorScroll.yOffset = 200;
                $anchorScroll();
            }
        }

        function handleVerdictData() {
            //Tracking
            var verdictType = 'Home > Home Products > LRC > Verdict > ';

            if ($location.path() === '/renewal-center/vsb') {
                verdictType = 'Home > Small Business Security > LRC > Verdict > ';
            }

            $timeout(function () {
                $rootScope.kaspersky.pageName = verdictType + ctrl.verdict;
            }, 300);
            $rootScope.kaspersky.verdictSite = ctrl.verdictData.verdict.search(/^.+_T$/i) === -1 ? 'LRC' : 'ATT';
            $rootScope.kaspersky.verdictDevices = ctrl.verdictData.license_count;
            $rootScope.kaspersky.verdictTerm = Math.floor(ctrl.verdictData.license_days / 365);
            $rootScope.kaspersky.verdictLicenseStatus = ctrl.verdictData.expired;
            $rootScope.kaspersky.verdictLicenseProduct = ctrl.verdictData.verdict;
            $rootScope.kaspersky.verdictPartNumber = ctrl.verdictData.sales_tracking && ctrl.verdictData.sales_tracking.pnumber;
            $rootScope.kaspersky.verdictChannel = ctrl.verdictData.sales_tracking && ctrl.verdictData.sales_tracking.channel;
            $rootScope.kaspersky.verdictLicenseType = ctrl.verdictData.sales_tracking && ctrl.verdictData.sales_tracking.license_type;
            $rootScope.kaspersky.serialNumber = ctrl.verdictData.verdictSerial;
            $rootScope.kaspersky.regKey = ctrl.verdictData.sales_tracking.reg_key;
            $rootScope.kaspersky.kpc = ctrl.verdictData.kpc;
            $rootScope.kaspersky.edu = ctrl.verdictData.edu;
            $rootScope.kaspersky.verdictExpDate = ctrl.verdictData.expiration_date;
            $rootScope.kaspersky.verdictDaysRemaining = ctrl.verdictData.days_left;
            $rootScope.kaspersky.verdictDaysExpired = ctrl.verdictData.days_expired;
            setRemainingDaysMetaTags();

            if (angular.isFunction($window.trackPageView)) {
                $window.trackPageView(verdictType + ctrl.verdict);
            }
        }

        function setVerdictLicenseStatus() {
            return $rootScope.kaspersky.verdictLicenseStatus ? 'ACTIVE' : 'EXPIRED';
        }

        function addVerdictString() {
            var verdictRegion = $rootScope.verdictRegion || appHelperService.getISOLocale().id,
                verdictLicenseProduct = $rootScope.kaspersky.verdictLicenseProduct.split('_')[0] || '[NULL]',
                verdictPartner = $rootScope.verdictPartner || '[NULL]',
                licenseStatus = setVerdictLicenseStatus(),
                metaObj = {
                'verdictString': verdictRegion + '_' + $rootScope.kaspersky.verdictSite + '_' + verdictPartner + '_' + $rootScope.kaspersky.verdictChannel + '_' + verdictLicenseProduct + '_' + $rootScope.kaspersky.verdictDevices + '_' + $rootScope.kaspersky.verdictTerm + '_' + licenseStatus.toUpperCase()
            };

            seoHelperService.setMeta(metaObj);
        }

        function daysRemainingBanner() {
            var isDaysRemainingBanner = ctrl.verdictData.days_left && ctrl.verdictData.days_left <= DAYS_LEFT_THRESHOLD && !ctrl.verdict.match(/_b|_t|email+/ig),
                isExpiredBanner = ctrl.verdictData.days_expired > 0 && !ctrl.verdict.match(/_b|_t|email+/ig),
                isExpirationToday = ctrl.verdictData.days_left === 0 && ctrl.verdictData.days_expired === 0 && !ctrl.verdict.match(/_b|_t|email+/ig);

            if (isDaysRemainingBanner) {
                ctrl.daysRemainingText = ctrl.verdictData.days_left + ' ' + (ctrl.verdictData.days_left === 1 ? ctrl.data.daysLeftText.replace('days', 'day') : ctrl.data.daysLeftText);
                ctrl.daysRemainingNote = ctrl.data.daysLeftNote;
            } else if (isExpiredBanner) {
                ctrl.daysRemainingText = ctrl.data.expiredText || ctrl.translations.expiredText;
                ctrl.daysRemainingNote = ctrl.data.expiredNote || ctrl.translations.expiredNote;
            } else if (isExpirationToday) {
                ctrl.daysRemainingText = ctrl.data.expiresTodayText || ctrl.translations.expiresTodayText;
                ctrl.daysRemainingNote = ctrl.data.expiredNote || ctrl.translations.expiredNote;
            }

            return (isDaysRemainingBanner && ctrl.data.daysLeftNote || isExpiredBanner && ctrl.data.expiredText) && ctrl.locale === 'en-gb';
        }
        // fetch data specific for KSC pages
        function fetchSpecificData() {
            if (ctrl.data.productList.match(/(ksc|ksc-personal|ksc-family)/ig) && !ctrl.verdict.match(/(_T)/ig)) {
                // if kscloud product
                var productFolder = '';
                ctrl.data.productList.split(',').forEach(function (item) {
                    if (item === 'ksc-personal' || item === 'ksc-family') {
                        return productFolder = item;
                    }
                });

                directiveData.get('/home-security/products/' + productFolder + '/product-features.json').then(function (response) {
                    ctrl.features = response.data.fields;
                }, handleRejection);

                directiveData.get('/home-security/products/kscloud/kscloud.json').then(function (response) {
                    ctrl.kscloud = response.data.fields;
                }, handleRejection);
            }

            if (ctrl.verdict.match(/_uni/ig)) {
                // if uninstall verdict => show 1 up uni page
                directiveData.get('/lrc/verdicts/' + ctrl.folder[0] + '/' + ctrl.verdict + '-features.json').then(function (response) {
                    ctrl.features = response.data.fields;
                }, handleRejection);
            }
        }

        // rm when all verdicts will be switched to template
        function setTemplateType() {
            ctrl.type = ctrl.data.productList.split(',').length;
            if (ctrl.type === 1 && ctrl.data.productList.match(/(kes|endpoint|core|advanced|select|ksos|365|server|mobile|systems|gateway)/ig)) ctrl.type = 'vsb'; // if b2b product
            if (ctrl.data.productList.match(/(ksc|ksc-personal|ksc-family)/ig) && !ctrl.verdict.match(/(_T)/ig)) {
                // if kscloud product
                ctrl.type += '-ksc';
            }
            if (ctrl.verdict === 'ksc_hard') ctrl.type += '-ksc-hard'; // if kscloud hard upsell verdict
            if (ctrl.verdict === 'ksc_exp') ctrl.type += '-edu'; // if kscloud edu verdict => show ksc experience page
            if (ctrl.verdict.match(/_uni/ig)) {
                // if uninstall verdict => show 1 up uni page
                ctrl.type += '-uni';
            }

            if (ctrl.verdict.match(/kfa/ig)) ctrl.type += '-kfa';
            ctrl.template = 'v' + ctrl.type + '-up';
        }

        function handleVerdict() {
            if (ctrl.folder) {
                directiveData.get('/lrc/verdicts/' + ctrl.folder[0] + '/' + ctrl.verdict + '.json').then(function (response) {
                    ctrl.data = response.data.fields;
                    if (ctrl.locale === 'ru-ru' && ctrl.verdictData) {
                        ctrl.data.daysLeftText = ctrl.data.daysLeftText.replace('дней', parseRUDays());
                    }

                    if (ctrl.data.productList.match(/(kes|endpoint|core|advanced|select|ksos|365|server|mobile|systems|gateway)/ig)) ctrl.isB2B = true;

                    fetchSpecificData();

                    overridePageTitle();

                    if (ctrl.data.lrcTemplate && ctrl.data.lrcTemplate !== 'false') {
                        ctrl.template = ctrl.data.lrcTemplate;
                    } else setTemplateType();

                    ctrl.showDaysLeft = daysRemainingBanner();

                    productsFetcher(ctrl.data.productList.split(',')).then(function (res) {
                        ctrl.products = res;

                        $rootScope.kaspersky.verdictProduct = ctrl.products[0].title;
                        $rootScope.kaspersky.productName = ctrl.products[0].title;
                    });

                    if (ctrl.data.comparisonTableLink) {
                        directiveData.get(ctrl.data.comparisonTableLink).then(function (response) {
                            if (response.data.schemaName === 'Custom HTML') {
                                ctrl.data.comparisonTable = response.data.fields.Body;
                            } else {
                                //make it possible to insert standalone comparison tables
                                ctrl.data.comparisonTable = false;
                            }
                        }, handleRejection);
                    }
                    if (ctrl.data.upgradeDetails) {
                        directiveData.get(ctrl.data.upgradeDetails).then(function (response) {
                            ctrl.data.promoBlock = response.data.fields.text;
                        }, handleRejection);
                    }
                    if (ctrl.data.quickmenuButtons) {
                        ctrl.data.quickmenuButtons.forEach(function (item, index) {
                            if (item['product'] && item['product'].match(/\.json/)) {
                                return $http.get(item['product']).then(function (response) {
                                    return ctrl.data.quickmenuButtons[index].product = response.data.fields;
                                }, handleRejection);
                            }
                        });
                    }

                    // enable the scroll nav if data exists

                    if (ctrl.data.navScrollItems) {
                        $rootScope.$emit('scrollNav', ctrl.data.navScrollItems);
                    }
                }, function (rejection) {
                    errorService.warn('Verdict is not available', rejection);
                });
            } else {
                $state.go('lrc-b2c', {}, {
                    'location': false,
                    'inherit': true
                });
            }
        }

        ctrl.scrollTo = function (id, $event) {
            $event.preventDefault();
            $event.stopPropagation();

            $document[0].getElementById(id).scrollIntoView();
        };

        ctrl.navigateUserTo = windowHelperService.navigateUserTo;

        var initScriptsOnInclude = $rootScope.$on('$includeContentLoaded', function () {
            $($element).find('.image-link').magnificPopup({
                'type': 'image',
                'closeOnContentClick': false,
                'closeBtnInside': true
            });

            $timeout(function () {
                var mobileDefault = void 0;

                // Check if current page has comparison charts on it
                if ($('.comparison-chart').length) {
                    // Loop through each comparison chart and set the default column
                    mobileDefault = $('.comparison-chart').data('comparison-default');
                    $('.comparison-chart .' + mobileDefault).addClass('currently-active');
                }
            });

            $('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this),

                // Get navigation direction
                direction = $this.data('comparison-nav-direction'),

                // Get chart ID from the data attribute
                chartID = $this.closest('.comparison-nav').data('comparison-chart'),

                // Get comparison chart using that ID
                $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),

                // Get comparison chart mobile nav
                $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]'),

                // Get current column
                $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                    currentTitle = $currentColumn.find('h2.product-title a').clone(),
                    currentID = parseInt($currentColumn.data('column')),
                    nextID = parseInt(currentID + 1),
                    prevID = parseInt(currentID - 1),
                    nextNavID = parseInt(currentID + 2),
                    prevNavID = parseInt(currentID - 2);

                // Remove featured style from the comparison chart mobile nav
                $comparisonChartNav.find('li a.feat').removeClass('feat');
                $comparisonChart.find('.row-header .column-product.column-' + ($scope.$ctrl.data.length + 1) + ' h2.product-title a').addClass('feat');

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' .feat').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' .feat').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.children());
                    $comparisonChartNav.find('li.nav-next a').html(currentTitle.children());
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' .feat').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' .feat').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }
                    $comparisonChartNav.find('li.nav-next a').html(newNextTitle.children());
                    $comparisonChartNav.find('li.nav-prev a').html(currentTitle.children());
                }
            });

            initScriptsOnInclude();
        });

        ctrl.bbData = { 'top': {}, 'bottom': {} };

        ctrl.setBuyblockValueByProduct = function (product, term, pack, autorenew) {
            ctrl.bbData[product] = {
                'term': term,
                'pack': pack,
                'autorenew': autorenew
            };
        };

        function checkEStoreAvailibity() {
            priceData.estore().then(function (response) {
                if (response.data.length && response.data.indexOf(ctrl.verdictData.provider) === -1) {
                    ctrl.verdictData.provider = '';
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.malwareStats').component('malwareStats', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/malware-stats/templates/malware-stats.html',
        'controller': 'sharedGetByNameController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.mobileNav').component('mobileNav', {
        'templateUrl': '/resources/template/html/modules/_shared/components/mobile-nav/templates/mobile-nav.template.html',
        'controller': 'mobileNavController'
    });
})();
'use strict';

(function () {
    'use strict';

    mobileNavController.$inject = ["$rootScope", "$http", "$window", "directiveData", "currencyManager", "ENV", "$scope", "$timeout", "$element", "errorService"];
    angular.module('kappGlobal.mobileNav').controller('mobileNavController', mobileNavController);

    function mobileNavController($rootScope, $http, $window, directiveData, currencyManager, ENV, $scope, $timeout, $element, errorService) {
        var ctrl = this,
            hasRun = void 0,
            innerHasRun = {};

        ctrl.data = {};
        ctrl.currencies = getCurrencies();
        ctrl.openCurrencyMenu = false;
        ctrl.showCurrencyMenu = ctrl.showCurrencyMenu || true;
        ctrl.showCurrencySelector = ctrl.showCurrencySelector || false;
        ctrl.backBtnText = '';
        ctrl.setCurrency = setCurrency;
        ctrl.setupMobileNavigation = setupMobileNavigation;
        ctrl.$onInit = activate;
        ctrl.getInnerItems = getInnerItems;

        function activate() {
            setupMobileNavigation();
        }

        function getData() {
            getLocalizedText();
            return $http.get('/content/' + ENV.locale + '/site-header/mobile-nav.json', { 'cache': true }).then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data) ctrl.backBtnText = ctrl.data.nav_ui_back_btn;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getInnerItems(item) {
            if (innerHasRun[item.nav_panel_class]) return;
            innerHasRun[item.nav_panel_class] = true;
            if (item.nav_panel_component && item.nav_panel_component.match(/\.json/)) {
                return $http.get(item.nav_panel_component, { 'cache': true }).then(function (response) {
                    item.nav_panel_component = response.data.fields;

                    ctrl.innerMenu = item.nav_panel_component.mainNavItem.filter(function (obj) {
                        return angular.isDefined(obj.megaMenuItem) && obj.megaMenuItem.match(/\.json/);
                    });

                    ctrl.innerMenu.forEach(function (subItem) {
                        return $http.get(subItem.megaMenuItem, { 'cache': true }).then(function (response) {
                            subItem.megaMenuItem = response.data.fields;
                            subItem.megaMenuItem.product.forEach(function (product, idx2) {
                                return $http.get(product, { 'cache': true }).then(function (response) {
                                    return subItem.megaMenuItem.product[idx2] = response.data.fields;
                                }, handleRejection);
                            });
                            if (subItem.megaMenuItem.megaMenuGroups) {
                                subItem.megaMenuItem.megaMenuGroups.forEach(function (menuGroups, idx3) {
                                    subItem.megaMenuItem.megaMenuGroups[idx3].groupProduct.forEach(function (grpProduct, idx4) {
                                        if (grpProduct.match(/\.json/)) {
                                            return $http.get(grpProduct, { 'cache': true }).then(function (response) {
                                                return subItem.megaMenuItem.megaMenuGroups[idx3].groupProduct[idx4] = response.data.fields;
                                            }, handleRejection);
                                        }
                                    });
                                });
                            }
                        }, handleRejection);
                    });
                }, handleRejection);
            }
        }

        function getLocalizedText() {
            return directiveData.getLocal('buyblock/buyblock-texts', { 'cache': true }).then(function (response) {
                ctrl.localization = response.data.fields;
            }, handleRejection);
        }

        function getCurrencies() {
            ctrl.currencies = currencyManager.getCurrencies();
            ctrl.currentCurrency = currencyManager.getCurrentCurrencyFromCache() || ctrl.currencies[0];
            return ctrl.currencies;
        }

        function setCurrency(item) {
            ctrl.currentCurrency = item;
            return currencyManager.setCurrency(item);
        }

        var buyblockReady = $rootScope.$on('buyBlockReady', function () {
            ctrl.showCurrencySelector = ctrl.currencies.length > 1;
        });

        $scope.$on('$destroy', function () {
            buyblockReady();
            // When element is destroyed we need to clean up a class on html tag
            angular.element($window.document.querySelector('html')).removeClass('mobile-navigation-opened');
            $($element).parent().find('.menu-toggle.open').removeClass('open');
            $($window).off('scroll.home');
        });

        function setupMobileNavigation() {
            var mobileMenuWrapper = angular.element($window.document.querySelector('.mobile-menu-wrapper')),
                htmlTag = angular.element($window.document.querySelector('html'));

            $('a.menu-toggle').on('click.mobileNav', function (e) {
                e.preventDefault();
                if (!hasRun) {
                    getData();
                    hasRun = true;
                }
                $(this).toggleClass('open');
                htmlTag.toggleClass('mobile-navigation-opened');
                mobileMenuWrapper.toggleClass('show');
            });

            $element.on('click', 'ul.mobile-nav li.parent > a', function (e) {
                var $this = $(this),
                    parentTitle = $this.parent().attr('data-parent'),
                    parentIcon = $this.parent().attr('data-icon'),
                    parentURL = $this.parent().attr('data-url'),
                    $subMenu = $this.siblings('ul.submenu'),
                    hasIcon = void 0;

                e.preventDefault();
                e.stopImmediatePropagation();

                if (!$subMenu.hasClass('generated')) {
                    hasIcon = '';
                    if (parentIcon) hasIcon = ' has-icon';

                    if (parentURL) {
                        $this.siblings('ul.submenu').prepend('<li class="back"><a href="#">' + ctrl.backBtnText + '</a></li><li class="title has-link' + hasIcon + '"><a href="' + parentURL + '"><span><i class="' + parentIcon + '"></i>' + parentTitle + '</span></a></li>');
                    } else if (parentTitle) {
                        $this.siblings('ul.submenu').prepend('<li class="back"><a href="#">' + ctrl.backBtnText + '</a></li><li class="title' + hasIcon + '"><span><i class="' + parentIcon + '"></i>' + parentTitle + '</span></li>');
                    } else {
                        $this.siblings('ul.submenu').prepend('<li class="back"><a href="#">' + ctrl.backBtnText + '</a></li>');
                    }
                }

                $this.siblings('ul.submenu').addClass('show generated');
                $this.closest('ul.submenu').addClass('push-back');
            });

            $element.on('click', 'li.back > a', function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                $(this).closest('ul.submenu').removeClass('show');
                $(this).closest('ul.submenu.push-back').removeClass('push-back');
            });

            /*
            * Set a listener for all clicks on anchors within the element so that
            * we can close mobile navigation and control .menu-toggle icon.
            * Requires event propogation to be switched off on all submenus (which are anchors as well)
            * */
            $element.on('click', 'a', function () {
                angular.element($window.document.querySelector('html')).removeClass('mobile-navigation-opened');
                angular.element($window.document).find('.mobile-menu-wrapper').removeClass('show');
                $($element).parent().find('.menu-toggle.open').removeClass('open');
            });

            var windowResize = angular.element($window),
                windowResizeThrottle = void 0;

            windowResize.on('resize.mobileNav', function () {
                clearTimeout(windowResizeThrottle);
                windowResizeThrottle = $timeout(function () {
                    if ($window.innerWidth >= 769 && htmlTag.hasClass('mobile-navigation-opened')) {
                        $('a.menu-toggle').trigger('click');
                    }
                }, 200);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.newsLetterOptIn').component('newsLetterOptIn', {
        'bindings': {
            'resource': '@',
            'onDataLoaded': '&'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/news-letter-opt-in/templates/news-letter-opt-in.html',
        'controller': 'newsLetterOptInController'
    });
})();
'use strict';

(function () {
    'use strict';

    newsLetterOptInController.$inject = ["newsLetterOptInService", "errorService"];
    angular.module('kappGlobal.newsLetterOptIn').controller('newsLetterOptInController', newsLetterOptInController);

    function newsLetterOptInController(newsLetterOptInService, errorService) {
        var ctrl = this;
        ctrl.optedInComplete = false;
        ctrl.fieldIsValid = true;
        ctrl.enableComponent = true;
        ctrl.submitForm = submitForm;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return newsLetterOptInService.getData().then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.enableComponent = isEnabled(ctrl);
                ctrl.onDataLoaded({
                    'data': ctrl.data,
                    'componentEnabled': ctrl.enableComponent
                });
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function submitForm(form) {
            if (form.$submitted && form.$invalid || !ctrl.email.validateEmail()) {
                ctrl.fieldIsValid = false;
                ctrl.email = '';
                ctrl.data.inputPlaceHolderText = ctrl.data.errorMessageText;
                return;
            }
            return newsLetterOptInService.submitForm(ctrl.email).then(function () {
                ctrl.optedInComplete = true;
            }, handleRejection);
        }

        function isEnabled(ctrl) {
            if (angular.isUndefined(ctrl.data)) return false;
            var enableComponent = ctrl.data['enableComponent'];
            return enableComponent && enableComponent.length > 0;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    newsLetterOptInService.$inject = ["$http", "ENV"];
    angular.module('kappGlobal.newsLetterOptIn').factory('newsLetterOptInService', newsLetterOptInService);

    function newsLetterOptInService($http, ENV) {
        return {
            'getData': getData,
            'submitForm': submitForm
        };

        function getData() {
            return $http.get('/content/' + ENV.locale + '/home-security/news-letter-opt-in.json');
        }

        function submitForm(email) {
            return $http.post(getLocaleUrl(email));
        }

        function getLocaleUrl(email) {
            var envLocale = ENV.locale.toLowerCase(),
                isArabicEnglish = envLocale === 'en-ae',
                locale = isArabicEnglish ? envLocale : envLocale.split('-')[1],
                url = '';
            switch (locale) {
                case 'global':
                    url = constructTreUrl('780400033B882D61', 'fdc-gcTrj6k3_hxVsQ4D9b__UD7FccOamf1sNogyDNHRNhRVW0PorKWbewDMUX5s/ErocOmL9732ckHzumMNTaw', email, 'en_Global');
                    break;
                case 'us':
                    url = constructTreUrl('2AEBC020000C2EDE', 'FA7nTt85nq56Vwh7pdgIA_lMfDELGn9gHwBBo6cOzLsPH_7pCsbnISBAA7tG2H4o/TImyzLu8tvgKR1j7kHsUKQ', email, 'en_US');
                    break;
                case 'gb':
                    url = constructTreUrl('44516178040000B9', '5MogkJtmuUTTydpjh5YrzhyN8v44N7o25lBK0aXmVTdDM3eA1FPErDoXoXLbQVDN/_vbfLVw14vPo-DO_Ue8BVw', email, 'en_GB');
                    break;
                case 'ie':
                    url = constructTreUrl('44516178040000B9', '5MogkJtmuUTTydpjh5YrzhyN8v44N7o25lBK0aXmVTdDM3eA1FPErDoXoXLbQVDN/_vbfLVw14vPo-DO_Ue8BVw', email, 'en_GB');
                    break;
                case 'au':
                    url = constructP8Url('AC2F0080007EA98C', '14xYXmD7amAdedoEAwCadznCBfouX92TY66h99goXAQRRu9EiAURX7FF2-lfwvw7/V7_BhRO71A5kz1iDvBZU2A', email, 'en_AU');
                    break;
                case 'nz':
                    url = constructP8Url('AC2F0080007EA98C', '14xYXmD7amAdedoEAwCadznCBfouX92TY66h99goXAQRRu9EiAURX7FF2-lfwvw7/V7_BhRO71A5kz1iDvBZU2A', email, 'en_AU');
                    break;
                case 'in':
                    url = constructP9Url('8000448D0E2C2F00', '3YdbwyBvqBVd5fJ5mJYvima0yO8Drb6v09E7sAiDixWFqCgSUukecu0lLqH4Jbvh/qf5C_6YyrgrwzcEoVqsVAg', email, 'en_IN');
                    break;
                case 'ae':
                    url = constructP8Url('80003CD312AC2F80', 'EAvoTP3HMGu5e5fMijvvxLpBez-AvBO1uAO03TSP9p1t4NS8m1B9gbxMO2-RZJgV/mm0HB4RPL15PeEzC0Jxjvg', email, 'ar_AE');
                    break;
                case 'en-ae':
                    url = constructP8Url('40001729D4E8D780', 'UCvJiEZdG7OvaqTww-ZZ8RevTseZ-7OlKojAjcOE-zCzcgaieSJ9IqNcWZsFxZ6v/H7q55uNQMRb5Aq9zAMscBQ', email, 'en_AE');
                    break;
                case 'es':
                    url = constructP8Url('2C2F00800058D598', 'rqA84m1WnPEPNCdneyk_0umilFcl7AbY2MIOVRyLixvHKaBND-XthC2wnb3T0-Qk/Vk1rivWcC-qJwlX4kqDO3w', email, 'es_ES');
                    break;
                case 'br':
                    url = constructP8Url('2C2F00800058D598', 'rqA84m1WnPEPNCdneyk_0umilFcl7AbY2MIOVRyLixvHKaBND-XthC2wnb3T0-Qk/Vk1rivWcC-qJwlX4kqDO3w', email, 'pt_BR');
                    break;
                case 'fr':
                    url = constructP8Url('E01000000732E585', 'f7Kl9J4aJ_iBZjsNoRLTmSGpV5jD2VZhlOq3iEamrzrhyU2yDcdRKZC_Y7mNgur-/KV0itLyVbc_VJ8vcyLAIjQ', email, 'fr_FR');
                    break;
                case 'it':
                    url = constructP8Url('41E66B0BC020041E', 'Yj9zfqjQuP-oezav8ODulooprlsnF384aPuA6BuhqduhI-4cHNgaFZol_Scqk0nv/GI4XjXV8Nmx_yKLotkF4qA', email, 'it_IT');
                    break;
                case 'de':
                    url = constructTreUrl('1AAC2F0080000A4A', 'PUzO3oTxzn1b24JSdAdcNlVNdYsNY7YYUtbGrYAPQsZ4g1gaK3QfxwIhfJkcNYw1/TRHLsk6_yw9Tm15ya1H5VQ', email, 'de_DE');
                    break;
                case 'cn':
                    url = constructP8Url('3197D09617804031', 'gj6hEgHFcz_nNEwW7TFAPG6Pmfp_NGUc7peg63FIyLDpykAWxAhfR0a1qnpYjU5U/xYDwageJipmO1tIupzJAxQ', email, 'zh_CN');
                    break;
                case 'ru':
                    url = constructP8Url('2C2F00800007F922', '3x6ZYBMx25Voa5LRbupJoy-5HRXxQ1ytOI5SGrGF0H_p7xc48nrjutRyYmmATHJT/fexKE90kGqu_7j-fADsuNQ', email, 'ru_RU');
                    break;
                case 'jp':
                    url = constructP8Url('12AFD2161780412A', 'buqmlbpa2KSOrPpX7UPMgcyt9LRbKWsvHvSgQsb2VZa59TKnTA_WZXz04ImeVinA/OlS1FKc_yOtaDcdW0HHj5Q', email, 'ja_JP');
                    break;
                case 'za':
                    url = constructP8Url('80003CD312AC2F80', 'pRqDrK1tqjOW1G9T77iX4WeA333qCfmQqNUiUjcIZJnBjIslwqKzOr4Ify8arwvt/D3pGwqqAysOj8_XBwN9PRQ', email, 'en_ZA');
                    break;
                case 'nl':
                    url = constructTreUrl('D7804000055959A7', 'bhvlEBXhdR6GWsT5Z8pUV86nRwMi5oki-X9NLZJJp4aXwg6KYaTdjKXqL70Qp_Mu/YF572UoVXFxklUM3UxwAqg', email, 'nl_NL');
                    break;
                case 'tr':
                    url = constructP8Url('5627D78040001405', 'GhG2K6oRAHhgxo89n2xuJomdKpwrmYB015xAyfyMTNQiloSKGvNKaNN9K9RzQwL8/pz06Mvubk1r_buipm3z4BA', email, 'tr_TR');
                    break;
                case 'mx':
                    url = constructTreUrl('58304FAF0080005B', '-fQEORkP21MbpHxr6uQ2RZk1j00hH93Wz7Yxbldn165awVIhvDSlzuXMWOETlvgk/dbEyrXEcK1zAx5kr2FYH3w', email, 'es_MX');
                    break;
                case 'se':
                    url = constructTreUrl('5E010000410B4F58', 'qltB4yJ0UhNt6sfs1A6wkVcNU_vVOWfX3g934i7-nAHbPXIWOgppqEjR_WEX2Kn7/aFERbCTo7Ed72_fWW3yw1g', email, 'sv_SE');
                    break;
                case 'dk':
                    url = constructTreUrl('BD42927D78040BD4', '2zvGgsFkSrF0l_-0DL3K7hu5od0WiA-k50jwKiSUrS8-Ln8JeVPQtmBTXnf8pc61/nCwETjOskFbks0omp6UTsQ', email, 'da_DK');
                    break;
                case 'no':
                    url = constructTreUrl('3EBC020001C38F4F', 'cMW52FuwL_4c6vBKqiXvEZiqBLReu-nly1R5-W6PzdVerrvtkIo4YCMEjh2eTpqv/9N6uetd4SXprxZQG5PGfXQ', email, 'nb_NO');
                    break;
                case 'ny':
                case 'fi':
                case 'is':
                    url = constructTreUrl('5E010000410B4F58', '3-o5mXMqcnpwqIrbvfwvK-km7QwQRHTJSMYwFLNrpzyG2qtjx0hyO4TX7H5_aiF6/xYvjj_gw2DcD6NDKQj2Smg', email, 'Nordics');
                    break;
            }
            return url;
        }

        function constructTreUrl(emvTag, emvRef, email, locale) {
            return '//tre.emv3.com/D2UTF8?emv_tag=' + emvTag + '&emv_ref=' + emvRef + '&EMAIL_FIELD=' + email + '&LOCALE_FIELD=' + locale + '&SEGMENT_FIELD=NEWSLETTER&OPT_IN_EMAIL_IND_FIELD=1';
        }

        function constructP9Url(emvTag, emvRef, email, locale) {
            return '//p9tre.emv3.com/D2UTF8?emv_tag=' + emvTag + '&emv_ref=' + emvRef + '&EMAIL_FIELD=' + email + '&LOCALE_FIELD=' + locale + '&SEGMENT_FIELD=NEWSLETTER&OPT_IN_EMAIL_IND_FIELD=1';
        }

        function constructP8Url(emvTag, emvRef, email, locale) {
            return '//p8tre.emv3.com/D2UTF8?emv_tag=' + emvTag + '&emv_ref=' + emvRef + '&EMAIL_FIELD=' + email + '&LOCALE_FIELD=' + locale + '&SEGMENT_FIELD=NEWSLETTER&OPT_IN_EMAIL_IND_FIELD=1';
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.newsLetterPopup').component('newsLetterPopup', {
        'bindings': {},
        'controller': 'newsLetterPopupController',
        'templateUrl': '/resources/template/html/modules/_shared/components/news-letter-popup/templates/news-letter-popup.html'
    });
})();
'use strict';

(function () {
    'use strict';

    newsLetterPopupController.$inject = ["$scope", "$rootScope", "$q", "$element", "$timeout", "$window", "$document", "marketoHelperService", "newsLetterConfigService", "sessionStorageService"];
    angular.module('kappGlobal.newsLetterPopup').controller('newsLetterPopupController', newsLetterPopupController);

    function newsLetterPopupController($scope, $rootScope, $q, $element, $timeout, $window, $document, marketoHelperService, newsLetterConfigService, sessionStorageService) {
        var ctrl = this,
            storageKey = 'newsletter-popup-status';

        ctrl.formData = {};
        ctrl.show = false;

        ctrl.$onInit = function () {
            function loadPopupConfigForRoute() {
                newsLetterConfigService.getConfigForCurrentPage().then(ctrl.applyConfig);
            }

            $scope.$on('$locationChangeSuccess', function () {
                $element.find('.news-letter-popup form').empty();
                loadPopupConfigForRoute();
            });

            loadPopupConfigForRoute();
        };

        ctrl.$onDestroy = function () {
            ctrl.clearShowHideHandler();
        };

        ctrl.clearShowHideHandler = function () {
            if (ctrl.onWindowScroll) {
                angular.element($window).off('scroll', ctrl.onWindowScroll);
                delete ctrl.onWindowScroll;
            }
            if (ctrl.showHideTimeout) {
                $timeout.cancel(ctrl.showHideTimeout);
                delete ctrl.showHideTimeout;
            }
        };

        ctrl.applyConfig = function (config) {
            var hasValidConfig = config && config.formId && config.formNr;

            if (!hasValidConfig) {
                ctrl.show = false;
                return;
            }

            ctrl.show = true; // Marketo requires the element to be in the DOM
            ctrl.loaded = false;

            ctrl.header = config.header;
            ctrl.footer = config.footer;
            ctrl.formNr = config.formNr;
            ctrl.popupWidth = config.popupWidth;

            // because the formId is set in the current function
            // we need to wait for the digest to kick in before calling Marketo
            // as it requires the element with the ID to be in the DOM
            $timeout(function () {
                marketoHelperService.loadMarketo(config.formId, config.formNr, $scope).then(function () {
                    ctrl.loaded = true;
                }).then(function () {
                    return ctrl.evaluatePopupHeight();
                }).then(function () {
                    ctrl.setOpenStatus(config.status);
                });
            });
        };

        ctrl.evaluatePopupHeight = function () {
            var deferred = $q.defer();

            // force the popup to open in a hidden part of the screen
            ctrl.opened = true;
            $element.css({ 'visibility': 'hidden', 'bottom': -100000 });

            // give time for rendering
            requestAnimationFrame(function () {
                return requestAnimationFrame(function () {
                    // evaluate the height the popup should take at the end of the animation
                    ctrl.popupMaxHeight = Math.min($window.innerHeight - 25, $element.find('.news-letter-popup').outerHeight());

                    // reset the styles and opening status
                    $element.css({ 'visibility': '', 'bottom': '' });
                    delete ctrl.opened;
                    $scope.$apply();

                    deferred.resolve();
                });
            });

            return deferred.promise;
        };

        /**
         * "opened"/"closed" opened/closed on page load
         * "opened-25%"/"closed-25%" opened/closed after scrolling 25% of the page
         * "opened-15s"/"closed-15s" opened/closed after 15s
         *
         * @param status
         */
        ctrl.setOpenStatus = function (status) {
            if (!status) return;

            if (sessionStorageService.get(storageKey) === 'closed' || status === 'closed') {
                ctrl.opened = false;
                return;
            }

            if (status === 'opened' || status === 'closed') {
                setPopupOpenStatus(true, true);
                return;
            }

            var split = status.split('-'),
                unit = parseInt(split[1]),
                type = split[1].indexOf('%') !== -1 ? 'scroll' : split[1].indexOf('s') !== -1 ? 'time' : undefined;

            if (split[0] === 'closed') {
                // is opened first, will close after scroll
                setPopupOpenStatus(true, true);
            } else {
                ctrl.opened = false;
            }

            if (type === 'scroll') {
                if (ctrl.onWindowScroll) return;

                ctrl.onWindowScroll = _.throttle(function () {
                    var scrolledPastPoint = unit <= ctrl.getWindowScrollPct();

                    setPopupOpenStatus(split[0] === 'opened' ? scrolledPastPoint : !scrolledPastPoint, true);

                    $scope.$apply();
                }, 500);

                angular.element($window).on('scroll', ctrl.onWindowScroll);
            } else if (type === 'time') {
                ctrl.showHideTimeout = $timeout(function () {
                    setPopupOpenStatus(split[0] === 'opened', true);
                }, unit * 1000);
            }
        };

        // $window.pageYOffset is for IE compatibility
        ctrl.getWindowScrollPct = function () {
            return 100 / ($document[0].body.scrollHeight / (angular.isDefined($window.scrollY) ? $window.scrollY : $window.pageYOffset));
        };

        ctrl.open = function () {
            return setPopupOpenStatus(true);
        };

        ctrl.close = function () {
            return setPopupOpenStatus(false);
        };

        function setPopupOpenStatus(status, noSave) {
            if (ctrl.opened === status) return;

            ctrl.opened = status;

            if (status) {
                $window.trackPageView($rootScope.kaspersky.pageName + ' > Special Offers Opt-in Popup');
            }

            if (noSave) return;

            ctrl.clearShowHideHandler(); // clear to prevent configured event to trigger after user interaction

            if (!status) {
                sessionStorageService.set(storageKey, 'closed');
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    newsLetterConfigService.$inject = ["ENV", "$http", "$q", "$window", "sessionStorageService"];
    angular.module('kappGlobal.newsLetterPopup').factory('newsLetterConfigService', newsLetterConfigService);

    function newsLetterConfigService(ENV, $http, $q, $window, sessionStorageService) {
        var storageKey = 'newsletter-config';

        var service = {
            'getGlobalConfig': function getGlobalConfig() {
                var cachedConfig = sessionStorageService.get(storageKey);

                if (cachedConfig) {
                    return $q.resolve(cachedConfig);
                }

                return $http.get('/content/' + ENV.locale + '/site-general/newsletter-config.json', { 'cache': true }).then(function (response) {
                    sessionStorageService.set(storageKey, response.data.fields);
                    return response.data.fields;
                }).catch(function () {
                    // no global config provided
                    // the newsletter popup is disabled on the whole app
                    return undefined;
                });
            },
            'getConfigPathForCurrentPage': function getConfigPathForCurrentPage() {
                return service.getGlobalConfig().then(function (config) {
                    if (!config || !config.pathsToConfigMapping) {
                        return;
                    }

                    // _.find is for IE compatibility
                    var pathToConfigMapping = _.find(config.pathsToConfigMapping, function (d) {
                        return $window.location.href.match(d.key) !== null;
                    });

                    return pathToConfigMapping ? pathToConfigMapping.value : undefined;
                });
            },
            'getConfigForCurrentPage': function getConfigForCurrentPage() {
                return service.getConfigPathForCurrentPage().then(function (configPath) {
                    return configPath ? $http.get(configPath, { 'cache': true }).then(function (config) {
                        return config.data.fields;
                    })
                    // resolve even when the config is not there
                    .catch(function () {
                        return undefined;
                    }) : undefined;
                });
            }
        };

        return service;
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.notificationBarGeo').component('notificationBarGeo', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/notification-bar-geo/templates/notification-bar-geo.html',
        'controller': 'notificationBarGeoController'
    });
})();
'use strict';

(function () {
    'use strict';

    notificationBarGeoController.$inject = ["windowHelperService", "directiveData", "errorService", "appHelperService", "cookieService", "notificationBarGeoService", "ENV", "ngDialog", "$window"];
    angular.module('kappGlobal.notificationBarGeo').controller('notificationBarGeoController', notificationBarGeoController);

    function notificationBarGeoController(windowHelperService, directiveData, errorService, appHelperService, cookieService, notificationBarGeoService, ENV, ngDialog, $window) {
        var ctrl = this,
            localeCode = windowHelperService.getIPCountry(),
            urlBlocklList = ['/renewal-center/home', '/downloads', '/downloads/thank-you/antivirus', '/downloads/thank-you/internet-security', '/downloads/thank-you/total-security', '/downloads/thank-you/free-antivirus-download', '/downloads/thank-you/security-scan', '/downloads/thank-you/antivirus-free-trial', '/downloads/thank-you/internet-security-free-trial', '/downloads/thank-you/total-security-free-trial', '/small-business-security/downloads', '/small-business-security/downloads/small-office-security', '/small-business-security/downloads/thank-you/small-office-security-free-trial'],
            isAssertedState = _.includes(urlBlocklList, appHelperService.getLocationPath());
        ctrl.bannerHidden = true;
        ctrl.closeNotification = closeNotification;
        ctrl.$onInit = activate;

        /**
         * Check whether to show the geo ip bar or not.
         * If the message should not show, the response will be empty.
         * Also, don't make any further calls if user has already chosen and has cookies
         */
        function activate() {
            var locale = ENV.locale;
            var hasCookie = cookieService.get('ignoreredirects');
            if (isAssertedState || hasCookie || locale.substr(3, 6) !== 'global') return false;
            ctrl.path = windowHelperService.getPathName();

            return notificationBarGeoService.getXMLRules(ctrl.path).then(function (response) {
                if (!response || response.data && !response.data.length) return;
                initialiseBindings();
                initialise(response.data[0]);
            }).catch(handleRejection);
        }

        function initialiseBindings() {
            ctrl.applyOption = applyOption;
            ctrl.regionObj = {};
        }

        /**
         * Set binding and get further data.
         * Also set the cookie to switch messages.
         * @param  {Object} response Response from promise
         */
        function initialise(response) {
            ctrl.targetUrl = response;
            getRegionConfigData();
            getData();
        }

        /**
         * Get the regions to match against IPCountry, and to find its label.
         */
        function getRegionConfigData() {
            return directiveData.get('/site-header/geoip-notification-config.json').then(function (response) {
                if (response && response.data.fields) ctrl.regionsConfig = response.data.fields;
                ctrl.regionObj = notificationBarGeoService.getRegionByCode(localeCode, ctrl.regionsConfig.regions);

                // value to interpolate from CMS component
                ctrl.site = ctrl.regionObj.site;
            }).catch(handleRejection);
        }

        /**
         * Get copy text for the messages
         */
        function getData() {
            return directiveData.get(ctrl.resource || '/site-header/geoip-notification-bar.json').then(function (response) {
                ctrl.data = response.data.fields;
                cookieService.set('ignoreredirects', true, 7);

                if (ctrl.regionObj.lang === 'en-za' || ctrl.regionObj.lang === 'en-tr' || ctrl.regionObj.lang === 'tr-tr') {
                    ctrl.overlayEnabled = true;
                    callNotificationPopup();
                } else {
                    ctrl.bannerHidden = false;
                }
            }).catch(handleRejection);
        }

        /**
         * Send error to service
         * @param  {object} rejection [description]
         */
        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        /**
         * Redirect user and append tracking
         */
        function applyOption($event, path) {
            if ($event) $event.preventDefault();
            cookieService.set('ignoreredirects', false, 7);
            var url = (path || ctrl.targetUrl.host) + ctrl.path;
            return windowHelperService.navigateUserTo('//' + url + '?ignoreredirects=true&utm_source=Internal&utm_medium=Redirect&utm_campaign=IP_Redirect_Pilot&reseller=' + ctrl.regionObj.lang + '_ip-pilot_oth_ona_oth__onl_b2c_kasper_ban_______');
        }

        /**
         * Function to call the ngDialog popup
         */
        function callNotificationPopup() {
            ngDialog.open({
                'template': '/resources/template/html/modules/_shared/components/notification-bar-geo/templates/notification-bar-geo-popup.html',
                'className': 'ngdialog-plain geo-notification-popup',
                'data': ctrl,
                'closeByDocument': false,
                'showClose': false,
                'onOpenCallback': function onOpenCallback() {
                    $window.trackPageView('Home > Geo Redirect Suggestion Popup');
                }
            });
        }

        /**
         * Function for the ngDialog close button
         */
        function closeNotification($event) {
            if ($event) $event.preventDefault();
            ngDialog.close();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    notificationBarGeoService.$inject = ["$http", "ENV"];
    angular.module('kappGlobal.notificationBarGeo').factory('notificationBarGeoService', notificationBarGeoService);

    function notificationBarGeoService($http, ENV) {
        var config = {
            'serverUrl': ENV.apiServer,
            'apiUrl': ENV.apiServer + '/_svc/page/ipinfo'
        };

        return {
            'getRegionByCode': getRegionByCode,
            'getXMLRules': getXMLRules
        };

        function getRegionByCode(code, regions) {
            var regionObj = _.find(regions, function (obj) {

                return obj.locales.indexOf(code) > -1;
            });
            if (regionObj && 'name' in regionObj) return regionObj;
        }

        function getXMLRules(path) {
            return $http.get(config.apiUrl + '?url=' + path);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    breadcrumbController.$inject = ["$rootScope"];
    angular.module('kappGlobal.pageHeader').controller('breadcrumbController', breadcrumbController);

    function breadcrumbController($rootScope) {
        var ctrl = this;
        ctrl.breadcrumbs = $rootScope.breadcrumbs;

        var pageDataReady = $rootScope.$on('pageDataReady', function () {
            ctrl.breadcrumbs = $rootScope.breadcrumbs;
            pageDataReady();
        });
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.pageHeader').component('pageHeader', {
        'bindings': {
            'resource': '@',
            'headerType': '@',
            'bannerImage': '@',
            'showBreadcrumb': '@',
            'noPadding': '@',
            'product': '<'
        },
        'controller': 'pageHeaderController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'default';
            if ($attrs.template) template = $attrs.template;
            return '/resources/template/html/modules/_shared/components/page-header/templates/page-header-' + template + '.html';
        }]
    }).component('breadcrumb', {
        'bindings': {},
        'template': '<p class="breadcrumbs">\n\t\t\t\t\t       <a ng-href="{{state.link}}" ng-repeat="state in $ctrl.breadcrumbs" ng-class="{\'unclickable\': $last}">{{state.title}}</a>\n\t\t\t\t        </p>',
        'controller': 'breadcrumbController'
    });
})();
'use strict';

(function () {
    'use strict';

    pageHeaderController.$inject = ["$timeout", "$q", "$anchorScroll", "$location", "directiveData", "$sce", "$http", "ENV", "$element", "windowHelperService", "appHelperService", "errorService", "ngDialog", "productData", "priceData", "geoLocationManager", "$rootScope", "$scope"];
    angular.module('kappGlobal.pageHeader').controller('pageHeaderController', pageHeaderController);

    function pageHeaderController($timeout, $q, $anchorScroll, $location, directiveData, $sce, $http, ENV, $element, windowHelperService, appHelperService, errorService, ngDialog, productData, priceData, geoLocationManager, $rootScope, $scope) {
        var ctrl = this,
            $dialog = ngDialog;
        ctrl.data = {};
        ctrl.contentUrl = '';
        ctrl.env = ENV.locale;
        ctrl.videoPopup = videoPopup;
        ctrl.$onInit = activate;
        ctrl.getEltClass = getEltClass;
        ctrl.getBannerButtonClass = getBannerButtonClass;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.isTotal = appHelperService.assertStateByName('smb-product-total');
        ctrl.scrollToBuy = scrollToBuy;

        var currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange);

        function activate() {
            getData();
            if (ctrl.env === 'en\-global') blockProhibitedCountries();
        }

        function handleCurrencyChange() {
            if (ctrl.currency === $rootScope.currency || !ctrl.data.productShortName) return;
            ctrl.currency = $rootScope.currency;
            getMinPrice();
        }

        function handleScopeDestroyed() {
            currencyChange();
        }

        $scope.$on('$destroy', handleScopeDestroyed);

        function getData() {
            // Get B2C resource center category header path

            var b2cResourceCenterCatHeaderState = appHelperService.assertStateByName(['b2c-resource-center.category', 'b2c-resource-center.category-details']);

            if (b2cResourceCenterCatHeaderState && !ctrl.resource) ctrl.resource = '/home-security' + $location.path() + '/page-header.json';

            // format resource attribute environment path

            if (ctrl.resource) ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);

            return directiveData.getByUrl(ctrl.resource || 'page-header').then(function (response) {
                var data = response.data.fields;
                ctrl.data = data;
                ctrl.id = response.data.id;
                ctrl.contentUrl = data.imageUrl ? $sce.trustAsResourceUrl(data.imageUrl) : '';

                var moreToLoad = [directiveData.getLocal('general-translations').then(function (res) {
                    return ctrl.localData = res.data.fields;
                })];

                if (data.headerType && data.headerType.indexOf('Buyblock') > -1 && data.moreLink.product) {
                    moreToLoad.push(directiveData.getByUrl(data.moreLink.product).then(function (res) {
                        return ctrl.productInfo = res.data.fields;
                    }));
                }

                if (data.surtitle && data.header) {
                    var bigText = data.bigText || '';
                    data.imageAlt = data.surtitle + ' ' + data.header + ' ' + bigText;
                }

                runScript();
                if (ctrl.data.productShortName) getMinPrice();

                if (ctrl.data.header === 'Security Cloud') buyblockData();

                ctrl.isHeadlineDisplayed = isHeadlineDisplayed();
                ctrl.isOverlayDisplayed = isOverlayDisplayed();

                if (data.quickmenuButtons && data.quickmenuButtons.length) data.quickmenuButtons.forEach(function (item, index) {
                    if (!item.product || !item.product.match(/\.json/)) return;

                    moreToLoad.push($http.get(item.product).then(function (res) {
                        return ctrl.data.quickmenuButtons[index].product = res.data.fields;
                    }));
                });

                return $q.all(moreToLoad);
            }, handleRejection);
        }

        function buyblockData() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockData = response.data.fields;
            });
        }

        function videoPopup(url) {
            var embedSrc = url,
                sources = {
                'youtube': {
                    'site': 'youtube.com',
                    'id': 'v=',
                    'src': '//www.youtube.com/embed/%id%?autoplay=1'
                },
                'gmaps': {
                    'site': '//maps.google.',
                    'src': '%id%&output=embed'
                }
            };

            _.forEach(sources, function (item) {
                if (embedSrc.indexOf(item.site) > -1) {
                    if (item.id) {
                        if (angular.isString(item.id)) {
                            embedSrc = embedSrc.substr(embedSrc.lastIndexOf(item.id) + item.id.length, embedSrc.length);
                        }
                    }
                    embedSrc = item.src.replace('%id%', embedSrc);

                    return false;
                }
            });

            return $dialog.open({
                'template': '<div class="ngdialog-iframe-wrapper"><iframe class="ngdialog-iframe" src="' + embedSrc + '" frameborder="0" allowfullscreen=""></iframe></div>',
                'className': 'ngdialog-iframe ngdialog-flyout',
                'showClose': true,
                'plain': true,
                'name': 'video-popup'
            });
        }

        function runScript() {
            $timeout(function () {
                // About Us Page Header

                var $mainMenu = $($element).find('#site-header .main-menu');

                $($element).find('.about-us-page-header .cta-scroll').click(function (e) {
                    e.preventDefault();
                    var $scrollTo = $($(this).attr('href'));
                    if ($scrollTo.length) {
                        $('html,body').animate({
                            'scrollTop': $scrollTo.offset().top - $mainMenu.outerHeight(true)
                        }, 1000);
                    }
                });
                $($element).find('.toggle-button').click(function (e) {
                    e.preventDefault();

                    var $this = $(this);

                    $this.closest('.toggle-container').find('.toggle-content').slideToggle();
                    $this.closest('.toggle-container').toggleClass('open');
                });
                $($element).find('.read-less').click(function (e) {
                    e.preventDefault();

                    $location.hash('smb-more-description-id');
                    $anchorScroll();
                });

                if ($location.hash()) $anchorScroll();
            });
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function blockProhibitedCountries() {
            if (geoLocationManager.isKscProhibitedCountry()) {
                ctrl.isProductBlocked = true;
            }
        }

        function getEltClass() {
            var headerType = ctrl.data.headerType;
            return {
                'product-header': headerType === 'Blank' || headerType === 'SMB Product' || headerType === 'SMB Targeted Solution',
                'no-breadcrumbs': ctrl.data.hideBreadcrumbs === 'Yes',
                'no-headlines': !isHeadlineDisplayed(),
                'image-bg': ctrl.data.bannerImage !== null && headerType !== 'About Team Header',
                'about-us-page-header': headerType === 'About Team Header',
                'page-header': headerType !== 'About Team Header',
                'small-header': headerType === 'SMB Product',
                'taller-header': headerType === 'Taller header',
                'ksc-header': headerType === 'KSC'
            };
        }

        function isHeadlineDisplayed() {
            var headerType = ctrl.data.headerType;
            return headerType === undefined || ['Blank', 'SMB Product', 'SMB Targeted Solution', 'B2C Thank You V2', 'About Team Header', 'SMB MSP', 'KSC'].indexOf(headerType) === -1;
        }

        function getBannerButtonClass(pos) {
            var bannerBtns = ctrl.data.bannerbuttons;

            if (pos === 'left') {
                return {
                    'col-l-8': bannerBtns.length === 1,
                    'col-xl-9': ctrl.data.padButtons === 'Yes' && bannerBtns.length === 1,
                    'col-l-12 col-xl-7': bannerBtns.length > 1
                };
            }

            return {
                'col-l-4': bannerBtns.length === 1,
                'col-xl-3 no-gutter': ctrl.data.padButtons === 'Yes' && bannerBtns.length === 1,
                'col-l-12 col-xl-5': bannerBtns.length > 1
            };
        }

        function isOverlayDisplayed() {
            return ['Blank', 'SMB Product', 'SMB Targeted Solution', 'B2C Thank You V2', 'B2C Thank You V1', 'KSC'].indexOf(ctrl.data.headerType) === -1;
        }

        function getMinPrice() {
            return productData.getb2c(ctrl.data.productShortName).then(function (response) {
                priceData.getPrice(response.data.fields.title, 'Purchase').then(function (response) {
                    ctrl.minPrice = response.data[0] && response.data[0].price;
                }, handleRejection);
            });
        }

        function scrollToBuy(event) {
            var anchor = event.currentTarget.attributes['href'].nodeValue;
            event.preventDefault();

            $location.hash(anchor);
            $anchorScroll();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    dirPaginateDirective.$inject = ["$compile", "$parse", "paginationService"];
    dirPaginationControlsDirective.$inject = ["paginationService", "paginationTemplate", "errorService"];
    var DEFAULT_ID = '__default';

    angular.module('kappGlobal.paginationModule').directive('dirPaginate', dirPaginateDirective).directive('dirPaginateNoCompile', noCompileDirective).directive('kPagination', dirPaginationControlsDirective);

    function dirPaginateDirective($compile, $parse, paginationService) {
        return {
            'terminal': true,
            'multiElement': true,
            'priority': 100,
            'compile': dirPaginationCompileFn
        };

        function dirPaginationCompileFn(tElement, tAttrs) {
            var expression = tAttrs.dirPaginate,
                match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),
                filterPattern = /\|\s*itemsPerPage\s*:\s*(.*\(\s*\w*\)|([^\)]*?(?=\s+as\s+))|[^\)]*)/;

            if (match[2].match(filterPattern) === null) {
                throw 'pagination directive: the \'itemsPerPage\' filter must be set.';
            }
            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, ''),
                collectionGetter = $parse(itemsPerPageFilterRemoved);

            addNoCompileAttributes(tElement);

            var rawId = tAttrs.paginationId || DEFAULT_ID;
            paginationService.registerInstance(rawId);

            return function dirPaginationLinkFn(scope, element, attrs) {
                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;
                paginationService.deregisterInstance(rawId);
                paginationService.registerInstance(paginationId);
                var repeatExpression = getRepeatExpression(expression, paginationId);
                addNgRepeatToElement(element, attrs, repeatExpression);

                removeTemporaryAttributes(element);
                var compiled = $compile(element),
                    currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);

                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);

                if (angular.isDefined(attrs.totalItems)) {
                    paginationService.setAsyncModeTrue(paginationId);
                    scope.$watch(function () {
                        return $parse(attrs.totalItems)(scope);
                    }, function (result) {
                        if (0 <= result) {
                            paginationService.setCollectionLength(paginationId, result);
                        }
                    });
                } else {
                    paginationService.setAsyncModeFalse(paginationId);
                    scope.$watchCollection(function () {
                        return collectionGetter(scope);
                    }, function (collection) {
                        if (collection) {
                            var collectionLength = collection instanceof Array ? collection.length : Object.keys(collection).length;
                            paginationService.setCollectionLength(paginationId, collectionLength);
                        }
                    });
                }

                compiled(scope);

                scope.$on('$destroy', function destroyDirPagination() {
                    paginationService.deregisterInstance(paginationId);
                });
            };
        }

        function getRepeatExpression(expression, paginationId) {
            var repeatExpression,
                idDefinedInFilter = !!expression.match(/(\|\s*itemsPerPage\s*:[^|]*:[^|]*)/);

            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {
                repeatExpression = expression.replace(/(\|\s*itemsPerPage\s*:\s*[^|\s]*)/, '$1 : \'' + paginationId + '\'');
            } else {
                repeatExpression = expression;
            }

            return repeatExpression;
        }

        function addNgRepeatToElement(element, attrs, repeatExpression) {
            if (element[0].hasAttribute('dir-paginate-start') || element[0].hasAttribute('data-dir-paginate-start')) {
                attrs.$set('ngRepeatStart', repeatExpression);
                element.eq(element.length - 1).attr('ng-repeat-end', true);
            } else {
                attrs.$set('ngRepeat', repeatExpression);
            }
        }

        function addNoCompileAttributes(tElement) {
            angular.forEach(tElement, function (el) {
                if (el.nodeType === 1) {
                    angular.element(el).attr('dir-paginate-no-compile', true);
                }
            });
        }

        function removeTemporaryAttributes(element) {
            angular.forEach(element, function (el) {
                if (el.nodeType === 1) {
                    angular.element(el).removeAttr('dir-paginate-no-compile');
                }
            });
            element.eq(0).removeAttr('dir-paginate-start').removeAttr('dir-paginate').removeAttr('data-dir-paginate-start').removeAttr('data-dir-paginate');
            element.eq(element.length - 1).removeAttr('dir-paginate-end').removeAttr('data-dir-paginate-end');
        }

        function makeCurrentPageGetterFn(scope, attrs, paginationId) {
            var currentPageGetter;
            if (attrs.currentPage) {
                currentPageGetter = $parse(attrs.currentPage);
            } else {
                var defaultCurrentPage = (paginationId + '__currentPage').replace(/\W/g, '_');
                scope[defaultCurrentPage] = 1;
                currentPageGetter = $parse(defaultCurrentPage);
            }
            return currentPageGetter;
        }
    }
    function dirPaginationControlsDirective(paginationService, paginationTemplate, errorService) {
        var numberRegex = /^\d+$/;
        var DDO = {
            'restrict': 'AE',
            'scope': {
                'maxSize': '=?',
                'onPageChange': '&?',
                'paginationId': '=?',
                'autoHide': '=?'
            },
            'link': dirPaginationControlsLinkFn
        };

        var templateString = paginationTemplate.getString();
        if (angular.isDefined(templateString)) {
            DDO.template = templateString;
        } else {
            DDO.templateUrl = function (elem, attrs) {
                return attrs.templateUrl || paginationTemplate.getPath();
            };
        }
        return DDO;

        function dirPaginationControlsLinkFn(scope, element, attrs) {
            var rawId = attrs.paginationId || DEFAULT_ID;
            var paginationId = scope.paginationId || attrs.paginationId || DEFAULT_ID;

            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {
                var idMessage = paginationId !== DEFAULT_ID ? ' (id: ' + paginationId + ') ' : ' ';
                errorService.warn('Pagination directive: the pagination controls' + idMessage + 'cannot be used without the corresponding pagination directive, which was not found at link time.');
            }

            if (!scope.maxSize) {
                scope.maxSize = 9;
            }
            scope.autoHide = angular.isUndefined(scope.autoHide) ? true : scope.autoHide;
            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;
            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;

            var paginationRange = Math.max(scope.maxSize, 5);
            scope.pages = [];
            scope.pagination = {
                'last': 1,
                'current': 1
            };
            scope.range = {
                'lower': 1,
                'upper': 1,
                'total': 1
            };

            scope.$watch('maxSize', function (val) {
                if (val) {
                    paginationRange = Math.max(scope.maxSize, 5);
                    generatePagination();
                }
            });

            scope.$watch(function () {
                if (paginationService.isRegistered(paginationId)) {
                    return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);
                }
            }, function (length) {
                if (0 < length) {
                    generatePagination();
                }
            });

            scope.$watch(function () {
                if (paginationService.isRegistered(paginationId)) {
                    return paginationService.getItemsPerPage(paginationId);
                }
            }, function (current, previous) {
                if (current !== previous && angular.isDefined(previous)) {
                    goToPage(scope.pagination.current);
                }
            });

            scope.$watch(function () {
                if (paginationService.isRegistered(paginationId)) {
                    return paginationService.getCurrentPage(paginationId);
                }
            }, function (currentPage, previousPage) {
                if (currentPage !== previousPage) {
                    goToPage(currentPage);
                }
            });

            scope.setCurrent = function (num) {
                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {
                    num = parseInt(num, 10);
                    paginationService.setCurrentPage(paginationId, num);
                }
            };

            scope.tracker = function (id, index) {
                return id + '_' + index;
            };

            function goToPage(num) {
                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {
                    var oldPageNumber = scope.pagination.current;

                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);
                    scope.pagination.current = num;
                    updateRangeValues();

                    // if a callback has been set, then call it with the page number as the first argument
                    // and the previous page number as a second argument
                    if (scope.onPageChange) {
                        scope.onPageChange({
                            'newPageNumber': num,
                            'oldPageNumber': oldPageNumber
                        });
                    }
                }
            }

            function generatePagination() {
                if (paginationService.isRegistered(paginationId)) {
                    var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;
                    scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);
                    scope.pagination.current = page;
                    scope.pagination.last = scope.pages[scope.pages.length - 1];
                    if (scope.pagination.last < scope.pagination.current) {
                        scope.setCurrent(scope.pagination.last);
                    } else {
                        updateRangeValues();
                    }
                }
            }

            function updateRangeValues() {
                if (paginationService.isRegistered(paginationId)) {
                    var currentPage = paginationService.getCurrentPage(paginationId),
                        itemsPerPage = paginationService.getItemsPerPage(paginationId),
                        totalItems = paginationService.getCollectionLength(paginationId);

                    scope.range.lower = (currentPage - 1) * itemsPerPage + 1;
                    scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);
                    scope.range.total = totalItems;
                }
            }

            function isValidPageNumber(num) {
                return numberRegex.test(num) && 0 < num && num <= scope.pagination.last;
            }
        }

        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {
            var pages = [],
                totalPages = Math.ceil(collectionLength / rowsPerPage),
                halfWay = Math.ceil(paginationRange / 2),
                position;

            if (currentPage <= halfWay) {
                position = 'start';
            } else if (totalPages - halfWay < currentPage) {
                position = 'end';
            } else {
                position = 'middle';
            }

            var ellipsesNeeded = paginationRange < totalPages;
            var i = 1;
            while (i <= totalPages && i <= paginationRange) {
                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);

                var openingEllipsesNeeded = i === 2 && (position === 'middle' || position === 'end');
                var closingEllipsesNeeded = i === paginationRange - 1 && (position === 'middle' || position === 'start');
                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                    pages.push('...');
                } else {
                    pages.push(pageNumber);
                }
                i++;
            }
            return pages;
        }

        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {
            var halfWay = Math.ceil(paginationRange / 2);
            if (i === paginationRange) {
                return totalPages;
            } else if (i === 1) {
                return i;
            } else if (paginationRange < totalPages) {
                if (totalPages - halfWay < currentPage) {
                    return totalPages - paginationRange + i;
                } else if (halfWay < currentPage) {
                    return currentPage - halfWay + i;
                } else {
                    return i;
                }
            } else {
                return i;
            }
        }
    }
    function noCompileDirective() {
        return {
            'priority': 5000,
            'terminal': true
        };
    }
})();
'use strict';

(function () {
    'use strict';

    var DEFAULT_ID = '__default';

    angular.module('kappGlobal.paginationModule').filter('itemsPerPage', itemsPerPageFilter);

    itemsPerPageFilter.$inject = ['paginationService'];

    function itemsPerPageFilter(paginationService) {
        return function (collection, itemsPerPage, paginationId) {
            if (angular.isUndefined(paginationId)) paginationId = DEFAULT_ID;
            if (!paginationService.isRegistered(paginationId)) {
                throw 'pagination directive: the itemsPerPage id argument (id: ' + paginationId + ') does not match a registered pagination-id.';
            }
            var end;
            var start;
            if (angular.isObject(collection)) {
                itemsPerPage = parseInt(itemsPerPage) || 9999999999;
                if (paginationService.isAsyncMode(paginationId)) {
                    start = 0;
                } else {
                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;
                }
                end = start + itemsPerPage;
                paginationService.setItemsPerPage(paginationId, itemsPerPage);

                if (collection instanceof Array) {
                    return collection.slice(start, end);
                } else {
                    var slicedObject = {};
                    angular.forEach(keys(collection).slice(start, end), function (key) {
                        slicedObject[key] = collection[key];
                    });
                    return slicedObject;
                }
            }
            return collection;
        };
    }

    function keys(obj) {
        if (!Object.keys) {
            var objKeys = [];
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    objKeys.push(i);
                }
            }
            return objKeys;
        } else {
            return Object.keys(obj);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.paginationModule').provider('paginationTemplate', paginationTemplateProvider);

    function paginationTemplateProvider() {
        var templatePath = 'resources/template/html/modules/_shared/components/pagination/templates/pagination-1.html';
        var templateString;
        return {
            'setPath': setPath,
            'setString': setString,
            '$get': $get
        };

        function setPath(path) {
            templatePath = path;
        }

        function setString(str) {
            templateString = str;
        }

        function $get() {
            return {
                'getPath': function getPath() {
                    return templatePath;
                },
                'getString': function getString() {
                    return templateString;
                }
            };
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.paginationModule').run(['$templateCache', dirPaginationControlsTemplateInstaller]);

    function dirPaginationControlsTemplateInstaller($templateCache) {
        $templateCache.put('angularUtils.directives.dirPagination.template', '<ul class="pagination" ng-if="1 < pages.length || !autoHide"><li ng-if="boundaryLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(1)">&laquo;</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(pagination.current - 1)">&lsaquo;</a></li><li ng-repeat="pageNumber in pages track by tracker(pageNumber, $index)" ng-class="{ active : pagination.current == pageNumber, disabled : pageNumber == \'...\' || ( ! autoHide && pages.length === 1 ) }"><a href="" ng-click="setCurrent(pageNumber)">{{ pageNumber }}</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.current + 1)">&rsaquo;</a></li><li ng-if="boundaryLinks"  ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.last)">&raquo;</a></li></ul>');
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.paginationModule').factory('paginationService', paginationService);

    function paginationService() {
        var instances = {},
            lastRegisteredInstance;
        return {
            'registerInstance': registerInstance,
            'deregisterInstance': deregisterInstance,
            'isRegistered': isRegistered,
            'getLastInstanceId': getLastInstanceId,
            'setCurrentPageParser': setCurrentPageParser,
            'setCurrentPage': setCurrentPage,
            'getCurrentPage': getCurrentPage,
            'setItemsPerPage': setItemsPerPage,
            'getItemsPerPage': getItemsPerPage,
            'setCollectionLength': setCollectionLength,
            'getCollectionLength': getCollectionLength,
            'setAsyncModeTrue': setAsyncModeTrue,
            'setAsyncModeFalse': setAsyncModeFalse,
            'isAsyncMode': isAsyncMode
        };

        function registerInstance(instanceId) {
            if (angular.isUndefined(instances[instanceId])) {
                instances[instanceId] = {
                    'asyncMode': false
                };
                lastRegisteredInstance = instanceId;
            }
        }

        function deregisterInstance(instanceId) {
            delete instances[instanceId];
        }

        function isRegistered(instanceId) {
            return angular.isDefined(instances[instanceId]);
        }

        function getLastInstanceId() {
            return lastRegisteredInstance;
        }

        function setCurrentPageParser(instanceId, val, scope) {
            instances[instanceId].currentPageParser = val;
            instances[instanceId].context = scope;
        }

        function setCurrentPage(instanceId, val) {
            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);
        }

        function getCurrentPage(instanceId) {
            var parser = instances[instanceId].currentPageParser;
            return parser ? parser(instances[instanceId].context) : 1;
        }

        function setItemsPerPage(instanceId, val) {
            instances[instanceId].itemsPerPage = val;
        }

        function getItemsPerPage(instanceId) {
            return instances[instanceId].itemsPerPage;
        }

        function setCollectionLength(instanceId, val) {
            instances[instanceId].collectionLength = val;
        }

        function getCollectionLength(instanceId) {
            return instances[instanceId].collectionLength;
        }

        function setAsyncModeTrue(instanceId) {
            instances[instanceId].asyncMode = true;
        }

        function setAsyncModeFalse(instanceId) {
            instances[instanceId].asyncMode = false;
        }

        function isAsyncMode(instanceId) {
            return instances[instanceId].asyncMode;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.paginationModule').factory('paginationHelper', paginationHelper);

    function paginationHelper() {
        return {
            'getPaginationNumbering': getPaginationNumbering,
            'isCurrentPaginationNumber': isCurrentPaginationNumber
        };

        function getPaginationNumbering(count) {
            var totalItemsOnPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

            var pageCount = angular.copy(count),
                paginationNumbers = [];
            while (pageCount / totalItemsOnPage > 0) {
                paginationNumbers.push((pageCount / totalItemsOnPage).toFixed());
                pageCount -= totalItemsOnPage;
            }
            return paginationNumbers.reverse();
        }

        function isCurrentPaginationNumber(currentPaginationNumber, number) {
            return currentPaginationNumber === +number;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.arPopup').component('arPopup', {
        'templateUrl': '/resources/template/html/modules/_shared/components/popups/templates/ar-popup.html',
        'controller': 'arPopupController'
    });
})();
'use strict';

(function () {
    'use strict';

    arPopupController.$inject = ["directiveData", "$rootScope", "$scope", "errorService"];
    angular.module('kappGlobal.arPopup').controller('arPopupController', arPopupController);
    function arPopupController(directiveData, $rootScope, $scope, errorService) {
        var ctrl = this;
        ctrl.popupActive = false;
        ctrl.onceChecked = false;
        ctrl.ARcheck = onArCheck;
        ctrl.$onInit = activate;

        function activate() {
            getData();
            $scope.$on('$destroy', handleScopeDestroyed);
        }

        function getData() {
            return directiveData.getLocal('buyblock/ar-texts').then(function (response) {
                ctrl.buyblockData = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        var toggleARPopup = $rootScope.$on('toggleARPopup', function (ev, arPopupButtons) {
            ctrl.arPopupButtons = arPopupButtons;
            ctrl.onceChecked = false;
            ctrl.popupActive = !ctrl.popupActive;
        });
        var onceUnchecked = $rootScope.$on('onceUnchecked', function () {
            ctrl.popupActive = true;
        });
        var checkboxClicked = $rootScope.$on('checkboxClicked', function (ev, isChecked) {
            ctrl.onceChecked = isChecked;
            ctrl.arPopupButtons = 'true';
        });

        function onArCheck(flag) {
            $rootScope.$emit('arPopupCheck', flag);
            ctrl.popupActive = false;
        }

        function handleScopeDestroyed() {
            toggleARPopup();
            onceUnchecked();
            checkboxClicked();
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.popup').factory('popup', popup);
    function popup() {
        return {
            'popupGallery': function popupGallery(el) {
                el.find('.popup-gallery div, .image-gallery').magnificPopup({
                    'delegate': 'a',
                    'type': 'image',
                    'closeOnContentClick': false,
                    'closeBtnInside': false,
                    'mainClass': 'mfp-with-zoom mfp-img-mobile',
                    'image': {
                        'verticalFit': true
                    },
                    'gallery': {
                        'enabled': true
                    },
                    'zoom': {
                        'enabled': true,
                        'duration': 300,
                        'opener': function opener(element) {
                            return element.find('img');
                        }
                    }
                });
            },
            'imageGallery': function imageGallery(el) {
                el.find('.popup-image').magnificPopup({
                    'type': 'image',
                    'closeOnContentClick': false,
                    'closeBtnInside': false,
                    'fixedContentPos': true,
                    'mainClass': 'mfp-no-margins mfp-with-zoom', // class to remove default margin from left and right side
                    'image': {
                        'verticalFit': true
                    },
                    'zoom': {
                        'enabled': true,
                        'duration': 300

                    }
                });
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.premiumServices').component('premiumServices', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/premium-services/premium-services.template.html',
        'controller': 'premiumServicesController'
    });
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.productPromo').component('productPromo', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'headerTitle': '<'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/product-promo/templates/product-promo.html',
        'controller': 'productPromoController'
    });
})();
'use strict';

(function () {
    'use strict';

    productPromoController.$inject = ["directiveData", "$http", "errorService"];
    angular.module('kappGlobal.productPromo').controller('productPromoController', productPromoController);

    function productPromoController(directiveData, $http, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
            setAnalyticsData();
        }

        function setAnalyticsData() {
            if (ctrl.template === 'ksc' && ctrl.resource) {
                switch (ctrl.resource) {
                    case 'ksc-promo-top':
                        ctrl.analyticsPrefix = 'KSC Banner Top';
                        break;
                    case 'ksc-promo-middle':
                        ctrl.analyticsPrefix = 'KSC Banner Middle';
                        break;
                    case 'ksc-promo-bottom':
                        ctrl.analyticsPrefix = 'KSC Banner Bottom';
                        break;
                    default:
                }
            }
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'product-promo').then(function (response) {
                ctrl.data = response.data.fields;
                if (!ctrl.data.product) return false;

                return $http.get(ctrl.data.product).then(function (response) {
                    ctrl.product = response.data.fields;
                }, handleRejection);
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.productScriptsInjector').component('productScriptsInjector', {
        'bindings': {
            'productData': '@',
            'min': '@',
            'max': '@',
            'priceValue': '@',
            'cutPrice': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/product-scripts-injector/templates/product-scripts-injector.html',
        'controller': 'productScriptsInjectorController'
    });
})();
'use strict';

(function () {
    'use strict';

    productScriptsInjectorController.$inject = ["$rootScope", "$document", "sessionStorageService", "productScriptsInjectorService"];
    angular.module('kappGlobal.productScriptsInjector').controller('productScriptsInjectorController', productScriptsInjectorController);

    function productScriptsInjectorController($rootScope, $document, sessionStorageService, productScriptsInjectorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            performInjection();
        }

        function performInjection() {
            var ngRender = $rootScope.$on('ngRender', function () {
                ctrl.productData = JSON.parse(ctrl.productData);
                ctrl.priceValue = JSON.parse(ctrl.priceValue);
                ctrl.cutPrice = ctrl.cutPrice ? JSON.parse(ctrl.cutPrice) : [{ 'price': 'no data' }];
                ctrl.bv = sessionStorageService.get('bazaarvoiceProduct' + ctrl.productData.bvId);
                ctrl.description = $document[0].querySelector('meta[name="description"]') && $document[0].querySelector('meta[name="description"]').content;
                productScriptsInjectorService.performInjection(ctrl);
                ngRender();
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    productScriptsInjectorService.$inject = ["$location", "$document"];
    angular.module('kappGlobal.productScriptsInjector').factory('productScriptsInjectorService', productScriptsInjectorService);

    function productScriptsInjectorService($location, $document) {
        return {
            'performInjection': performInjection,
            'mapSchema': mapSchema
        };

        function performInjection(object) {
            var s = $document[0].createElement('script');
            s.type = 'application/ld+json';
            s.setAttribute('id', 'product-generated');

            $('#product-generated').remove();

            s.text = JSON.stringify(mapSchema(object));
            $('head').append(s);
        }

        function mapSchema(value) {
            var vp = value.productData || {},
                vc = value.cutPrice || [],
                vcv = vc.length ? vc[vc.length - 1] : {},
                vcvp = vcv.price ? vcv.price.toString() : '0',
                vpv = value.priceValue || {},
                vpvp = vpv.price ? vpv.price.toString() : '0';

            return {
                '@context': 'http://schema.org/',
                '@type': 'Product',
                'brand': {
                    '@type': 'Organization',
                    'logo': 'https://cdn.press.kaspersky.com/files/2013/06/Kaspersky_png.png',
                    'name': 'Kaspersky Lab'
                },
                'description': value.description,
                'image': vp.fullSizeImage,
                'name': getProductTitle(vp),
                'aggregateRating': getBvStats(value),
                'offers': {
                    '@type': 'Offer',
                    'availability': 'http://schema.org/InStock',
                    'priceSpecification': {
                        'maxPrice': value.max || vcvp,
                        'minPrice': value.min || vpvp,
                        'price': vpvp,
                        'priceCurrency': vpv.currency
                    },
                    'seller': {
                        '@type': 'Organization',
                        'name': 'Kaspersky Lab'
                    }
                },
                'url': $location.path() || vp.prodPageLink
            };
        }

        function getBvStats(ctrl) {
            var bv = ctrl.bv;
            if (bv && bv.Includes && bv.Includes.Products && bv.Includes.Products[ctrl.productData.bvId]) {
                var reviewStats = bv.Includes.Products[ctrl.productData.bvId].ReviewStatistics;
                return {
                    '@type': 'AggregateRating',
                    'ratingValue': reviewStats.AverageOverallRating.toString(),
                    'reviewCount': reviewStats.TotalReviewCount.toString()
                };
            }
        }

        function getProductTitle(vp) {
            return vp.prodAddTitle ? vp.prodKasperskyTitle + ' ' + vp.prodMainTitle + ' ' + vp.prodAddTitle : vp.prodKasperskyTitle + ' ' + vp.prodMainTitle;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.productUpdates').component('productUpdates', {
        'bindings': {
            'componentData': '<',
            'productName': '<',
            'version': '@',
            'resource': '@',
            'product': '<',
            'showDownloadLocale': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/product-updates/templates/product-updates.html',
        'controller': 'productUpdatesController'

    });
})();
'use strict';

(function () {
    //TODO: refactor the entire monstorus component
    'use strict';

    productUpdatesController.$inject = ["$q", "directiveData", "downloadLinks", "$log", "productData", "productDownloadHelper", "$element", "validationHelper", "ENV", "errorService"];
    angular.module('kappGlobal.productUpdates').controller('productUpdatesController', productUpdatesController);

    function productUpdatesController($q, directiveData, downloadLinks, $log, productData, productDownloadHelper, $element, validationHelper, ENV, errorService) {
        var ctrl = this;
        var hideAlphabets = [];
        ctrl.data = {};

        ctrl.section = '';
        ctrl.downloadLocales = productDownloadHelper.getDownloadLocales();
        ctrl.languageLocalNameDefault = 'en';
        ctrl.changeRegion = changeRegion;
        ctrl.displayDropdownOption = displayDropdownOption;
        ctrl.displayDropdownDefault = displayDropdownDefault;
        ctrl.isGlobalLocale = isGlobalLocale;
        ctrl.isCNLocale = isCNLocale;
        ctrl.geoIPOverrideForProductUpdates = geoIPOverrideForProductUpdates;
        ctrl.$onInit = activate;
        ctrl.translations = {};

        function activate() {
            ctrl.showDownloadLocale = ctrl.showDownloadLocale || false;

            $q.all([getGeneralTranslations(), getGeneralSettings(), getProductDownloadData()]).catch(handleRejection);

            setRegionDefault();
            setLanguageLocalDefault();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getGeneralTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            });
        }

        function getGeneralSettings() {
            return directiveData.getLocal('general-settings').then(function (response) {
                var res = response.data.fields;
                if (res && res.hideAlphabets) return hideAlphabets = res.hideAlphabets;
            });
        }

        function getProductDownloadData(docsSettingsToUpdate) {
            return directiveData.getByUrl(ctrl.resource || 'product-updates').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.section = location.pathname.split('/');

                var application = ctrl.data.productsTaxonomy.length === 0 ? '' : ctrl.data.productsTaxonomy.map(function (item) {
                    return item.key;
                });

                if (ctrl.data.linksType) {
                    if (!angular.isString(ctrl.data.selectedLanguagesCodes)) {
                        ctrl.data.selectedLanguagesCodes = ctrl.data.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }
                    if (!angular.isString(ctrl.data.fallbackLanguageCode)) {
                        ctrl.data.fallbackLanguageCode = ctrl.data.fallbackLanguageCode.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }

                    var updateFields = productDownloadHelper.constructUpdateFields(ctrl.data.localeSelectionType, ctrl.data.selectedLanguagesCodes, ctrl.data.websiteCountryCode || 'Global', 'en'),
                        globalDefault = productDownloadHelper.getFieldsToUpdate(updateFields);

                    docsSettingsToUpdate = docsSettingsToUpdate || globalDefault;
                    docsSettingsToUpdate = angular.isDefined(docsSettingsToUpdate) && docsSettingsToUpdate.website_country_code !== 'global' ? docsSettingsToUpdate : globalDefault;

                    return $q.all([productData.getcusjsonb2b(ctrl.section[1], ctrl.data.packName).then(function (response) {
                        return ctrl.productInfo = response.data.fields;
                    }), getDownloadLinks(application, docsSettingsToUpdate).then(handleDownloadResponse)]);
                }
            });
        }

        function isGlobalLocale() {
            return ENV.locale.substr(3, 6) === 'global';
        }

        function isCNLocale() {
            return ENV.locale.substr(3, 6) === 'cn';
        }

        function geoIPOverrideForProductUpdates(obj, product, link, event) {
            var res = link,
                geoIPLinkOverride = ctrl.data.geoipLinkOverride,
                selectedLanguage = void 0;

            event.target.tagName === 'A' ? selectedLanguage = $element.find(event.target).parent().siblings('div').find('option:selected').text() : selectedLanguage = $element.find(event.target).parent().parent().siblings('div').find('option:selected').text();

            if (angular.isUndefined(geoIPLinkOverride)) {
                angular.element(event.currentTarget).attr('href', res);
                return false;
            }

            if (product === 'Kaspersky Internet Security for Android' && ctrl.data.KISAndroidBuildUrl) {
                res = ctrl.data.KISAndroidBuildUrl;
            } else {
                for (var i = 0, length = geoIPLinkOverride.length; i < length; i++) {
                    var item = geoIPLinkOverride[i];
                    if (item.product === product && item.language === selectedLanguage) {
                        res = item.overrideLink;
                        break;
                    }
                }
            }

            angular.element(event.currentTarget).attr('href', res);
        }

        function setRegionDefault() {
            ctrl.downloadLocale = ctrl.downloadLocale || ctrl.downloadLocales[0];
        }

        function setLanguageLocalDefault() {
            ctrl.languageLocalNameDefault = ctrl.downloadLocale.locale.split('-')[1];
        }

        function displayDropdownDefault(downloads) {
            var download = _.find(downloads, function (d) {
                return angular.isArray(hideAlphabets) ? hideAlphabets.indexOf(d.alphabet) === -1 : true;
            });
            return download ? download.download_url : undefined;
        }

        function displayDropdownOption(local) {
            var result = true;
            if (!validationHelper.isNullOrUndefined(hideAlphabets)) {
                hideAlphabets.forEach(function (item) {
                    if (item === local.alphabet) {
                        result = false;
                    }
                });
            }

            if (isCNLocale() && local.alphabet_loc_name === 'Traditional') {
                result = false;
            }

            return result;
        }

        function changeRegion(region) {
            if (region.name === 'Global') {
                return getProductDownloadData();
            }

            var regionLocale = productDownloadHelper.getRegionLocale(region),
                fields = productDownloadHelper.constructUpdateFields('', region.selectedLanguages, region.selectedCountryCode, regionLocale.languageCode),
                docsSettingsToUpdate = productDownloadHelper.getFieldsToUpdate(fields);

            return getProductDownloadData(docsSettingsToUpdate);
        }

        // Private methods
        function getDownloadLinks(application, docsSettingsToUpdate) {
            ctrl.downloadData = [];

            var appsQuery = application || ctrl.data.products.split(',');
            if (ctrl.data.productDownloadRequestRedefinition) convertRedefinitionToRequestFormat();
            // We make calls for each product separately, extending docSettings in case of request redefinition
            return $q.all(appsQuery.map(function (app) {
                var docSettings = {
                    'applications': [app],
                    'options': {
                        'links_type': ctrl.data.linksType.toString(),
                        'locale_selection_type': docsSettingsToUpdate.locale_selection_type,
                        'selected_languages_codes': docsSettingsToUpdate.selected_languages_codes,
                        'fallback_language_code': docsSettingsToUpdate.fallback_language_code || ctrl.data.fallbackLanguageCode,
                        'website_country_code': docsSettingsToUpdate.website_country_code,
                        'website_language_code': docsSettingsToUpdate.website_language_code,
                        'website_fallback_language': 'en',
                        'lang_locale_link_selection_amount': null,
                        'show_release_version_type': null,
                        'use_aux_lang_for_app_plugins': null,
                        'cpp_id': ctrl.data.cppid
                    }
                };

                return downloadLinks.getByApp('', modifyRequest(app, docSettings));
            }));
        }

        /**
         * Merge the request responses into a single object already grouped by product.
         * @param  {Object} response API Responses
         */
        function handleDownloadResponse(response) {
            var arrayOfApps = response.map(function (productDownloadRequest) {
                return productDownloadRequest.data.filter(function (productData) {
                    return productData.applications.length !== 0;
                });
            });

            ctrl.downloadData = arrayOfApps.map(function (app) {
                return app.map(function (linksPack) {
                    return angular.extend(linksPack.applications[0], {
                        'linkType': linksPack.link_type,
                        'linkLabel': assignLinkLabel(linksPack.link_type) || linksPack.link_type,
                        'display_omniture': displayOmnitureTags(linksPack.link_type)
                    });
                });
            });
        }

        /**
         * Validates the set of link types, so that we don't get a broken request by mistake
         * @param {string} links_type contains a set of link types comma separated
         * @returns {string} validated string with incorrect types excluded
         */
        function checkLinksType(links_type) {
            return links_type && links_type.split(',').map(function (type) {
                return type.trim();
            }).filter(function (type) {
                var match = type.match(/^(UpdateBuilds|Docs|OnlineHelp|ApplicationControlPlugins|AdditionalDistributives|ReleaseNotes|Downloaders)$/);
                if (!match) {
                    $log.warn('Incorrect link type', links_type);
                }
                return match;
            }).join(',');
        }

        /**
         * Converts the redifinition data that comes from Tridion into format usable by the donwloads service
         */
        function convertRedefinitionToRequestFormat() {
            ctrl.data.productDownloadRequestRedefinition.forEach(function (item) {
                Object.keys(item).forEach(function (key) {
                    return angular.isArray(item[key]) && !item[key].length || !item[key] ? delete item[key] : false;
                });
                if (item.selected_languages_codes && !angular.isString(item.selected_languages_codes)) {
                    item.selected_languages_codes = item.selected_languages_codes.reduce(function (prev, cur, index) {
                        return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                    }, '');
                }
                if (item.fallback_language_code && !angular.isString(item.fallback_language_code)) {
                    item.fallback_language_code = item.fallback_language_code.reduce(function (prev, cur, index) {
                        return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                    }, '');
                }
                item.links_type = checkLinksType(item.links_type);
                if (!item.links_type) delete item.links_type;
            });
            // Determine which product request has to be redefined
            ctrl.appPositionSearchArray = ctrl.data.productDownloadRequestRedefinition.map(function (item) {
                return item.productTaxonomy.key;
            });
            // We don't need the product name anymore, cleaning it up so that we can extend docSettings object
            ctrl.data.productDownloadRequestRedefinition.forEach(function (item) {
                return delete item.productTaxonomy;
            });
        }

        /**
         * Modifies the request to downloads service based on Tridion redefinition data
         * @param app {string}
         * @param docSettings {object} request settings object
         * @returns {object} modified settings
         */
        function modifyRequest(app, docSettings) {
            if (ctrl.data.productDownloadRequestRedefinition) {
                var pos = ctrl.appPositionSearchArray.indexOf(app);
                if (pos !== -1) angular.extend(docSettings.options, ctrl.data.productDownloadRequestRedefinition[pos]);
            }
            return docSettings;
        }

        /**
         * Assign a label to each type
         * @param  {String} type Download type
         * @return {String}      Label for download type
         */
        function assignLinkLabel(type) {
            switch (type) {
                case 'UpdateBuilds':
                    return ctrl.data.latestVersionText;
                case 'Downloaders':
                    return ctrl.data.latestVersionText;
                case 'TrialBuilds':
                    return ctrl.data.trialText;
                case 'Docs':
                    return ctrl.data.docsText;
                case 'ApplicationControlPlugins':
                    return ctrl.data.applicationControlPluginsText;
                case 'AdditionalDistributives':
                    return ctrl.data.additionalDistributivesText;
                case 'ReleaseNotes':
                    return ctrl.data.releaseNotesText;
                case 'OnlineHelp':
                    return ctrl.data.onlineHelpLabel;
                default:
                    return type;
            }
        }

        /**
         * Determine whether to show or hide omniture tags
         * @param  {String} linkType The download link type
         * @return {Boolean}
         */
        function displayOmnitureTags(linkType) {
            var array = ['UpdateBuilds', 'TrialBuilds', 'Downloaders'];
            return array.indexOf(linkType) > -1;
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.productUpdatesPack').component('productUpdatesPack', {
        'bindings': {
            'componentData': '<',
            'productName': '<',
            'version': '@',
            'resource': '@',
            'product': '<'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/product-updates-pack/templates/product-updates-pack.html',
        'controller': 'productUpdatesPackController'

    });
})();
'use strict';

(function () {
    'use strict';

    productUpdatesPackController.$inject = ["directiveData", "productData", "errorService", "$window"];
    angular.module('kappGlobal.productUpdatesPack').controller('productUpdatesPackController', productUpdatesPackController);

    function productUpdatesPackController(directiveData, productData, errorService, $window) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.section = '';
        ctrl.$onInit = activate;
        ctrl.isEndPointDownloadPage = isEndPointDownloadPage;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'product-updates-pack').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.section = location.pathname.split('/');
                return productData.getcusjsonb2b(ctrl.section[1], ctrl.data.packName).then(function (response) {
                    ctrl.productInfo = response.data.fields;
                }, handleRejection);
            }, handleRejection);
        }

        function isEndPointDownloadPage() {
            return ['/small-to-medium-business-security/downloads/endpoint-advanced', '/small-to-medium-business-security/downloads/endpoint-select', '/small-to-medium-business-security/downloads/endpoint-core'].some(function (url) {
                return $window.location.pathname === url;
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.promoSection').component('promoSection', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/promo-section/templates/promo-section.html',
        'controller': 'promoSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    promoSectionController.$inject = ["$element", "$window", "directiveData", "promoSectionService", "errorService"];
    angular.module('kappGlobal.promoSection').controller('promoSectionController', promoSectionController);

    function promoSectionController($element, $window, directiveData, promoSectionService, errorService) {
        var ctrl = this;
        ctrl.data = [];
        ctrl.$onInit = activate;
        ctrl.getBackGroundImage = getBackGroundImage;

        /**
         * Hack to keep current implementation along with a new one.
         * If we have a resource override (e.g. promo-settings), check if promo-settings tells us to load other promo content.
         * Otherwise, just load the content.
         */
        function activate() {
            if (ctrl.resource && ctrl.resource !== 'promo-section' && ctrl.template !== 'ent-3.0') {
                return promoSectionService.getPromoMap(ctrl.resource).then(function (response) {
                    if (response && response.promoValue === 'true') getData();
                }, handleRejection);
            } else {
                return getData();
            }
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'promo-section').then(function (response) {
                if (response.data && response.data.fields.promotions) {
                    ctrl.data = response.data.fields.promotions;
                    ctrl.template = response.data.fields.template;
                } else {
                    ctrl.data.push(response.data.fields);
                    ctrl.id = response.data.id;
                    runScript();
                }
            }, handleRejection);
        }

        function runScript() {
            var comment = '<!-- Start Component Presentation: {"ComponentID" : "' + ctrl.id + '","ComponentTemplateID" : "tcm:246-294262-32"} -->';
            $($element).prepend(comment);
        }

        function getBackGroundImage(promotion) {
            if (promotion.backgroundImageForTablet && $window.innerWidth <= 768 && $window.innerWidth > 481) {
                return {
                    'background-image': 'url(' + promotion.backgroundImageForTablet + ')'
                };
            } else if (promotion.backgroundImageForMobile && $window.innerWidth <= 480) {
                return {
                    'background-image': 'url(' + promotion.backgroundImageForMobile + ')'
                };
            } else if (promotion.backgroundImage) {
                return {
                    'background-image': 'url(' + promotion.backgroundImage + ')'
                };
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    promoSectionService.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.promoSection').factory('promoSectionService', promoSectionService);

    function promoSectionService(directiveData, errorService) {

        return {
            'getPromoMap': getPromoMap
        };

        function getPromoMap(promoType) {
            return directiveData.getByUrl('promo-settings').then(function (response) {
                if (response.data.fields && response.data.fields.Promotions) {
                    return _.find(response.data.fields.Promotions, { 'promoID': promoType });
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.renewAndAbout').component('renewAndAbout', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/renew-and-about/templates/renew-and-about.html',
        'controller': 'renewAndAboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    renewAndAboutController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.renewAndAbout').controller('renewAndAboutController', renewAndAboutController);

    function renewAndAboutController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'renew-and-about').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.resourceDocuments').component('b2bResourceDocuments', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/resource-documents/templates/resource-documents.html',
        'controller': 'b2bResourceDocumentsController'
    });
})();
'use strict';

(function () {
    'use strict';

    b2bResourceDocumentsController.$inject = ["$element", "$timeout", "$http", "$scope", "$q", "directiveData", "appHelperService", "errorService", "ngDialog"];
    angular.module('kappGlobal.resourceDocuments').controller('b2bResourceDocumentsController', b2bResourceDocumentsController);

    function b2bResourceDocumentsController($element, $timeout, $http, $scope, $q, directiveData, appHelperService, errorService, ngDialog) {
        var ctrl = this,
            $dialog = ngDialog;
        ctrl.scopeId = $scope.$id;
        ctrl.videoPopup = videoPopup;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'resource-documents').then(function (response) {
                ctrl.data = response.data.fields;

                // get resource element
                var promises = ctrl.data.resourceDeckItems.map(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            return ctrl.data.resourceDeckItems[index] = response.data.fields;
                        }, handleRejection);
                    }
                });

                $q.all(promises).then(function () {
                    $timeout(function () {
                        runScripts();
                    });
                }, handleRejection);
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function videoPopup(url) {
            var embedSrc = url,
                sources = {
                'youtube': {
                    'site': 'youtube.com',
                    'id': 'v=',
                    'src': '//www.youtube.com/embed/%id%?autoplay=1'
                },
                'gmaps': {
                    'site': '//maps.google.',
                    'src': '%id%&output=embed'
                }
            };

            _.forEach(sources, function (item) {
                if (embedSrc.indexOf(item.site) > -1) {
                    if (item.id) {
                        if (angular.isString(item.id)) {
                            embedSrc = embedSrc.substr(embedSrc.lastIndexOf(item.id) + item.id.length, embedSrc.length);
                        }
                    }
                    embedSrc = item.src.replace('%id%', embedSrc);

                    return false;
                }
            });

            return $dialog.open({
                'template': '<div class="ngdialog-iframe-wrapper"><iframe class="ngdialog-iframe" src="' + embedSrc + '" frameborder="0" allowfullscreen=""></iframe></div>',
                'className': 'ngdialog-iframe ngdialog-flyout',
                'showClose': true,
                'plain': true,
                'name': 'video-popup'
            });
        }

        function runScripts() {
            var maxSlides = ctrl.data && ctrl.data.slides ? parseInt(ctrl.data.slides) : 3,
                arrows = !!(ctrl.data && ctrl.data.slideArrows && ctrl.data.slideArrows.length > 0);

            $($element).find('.carousel:not(.slider-disabled).carousel-' + ctrl.scopeId).not('.slick-initialized').slick({
                'mobileFirst': true,
                'infinite': arrows,
                'arrows': false,
                'slide': 'div',
                'accessibility': false,
                'slidesToShow': 1,
                'slidesToScroll': 1,
                'dots': true,
                'draggable': false,
                'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                'rtl': appHelperService.isPageDirectionRTL(),
                'responsive': [{
                    'breakpoint': 769,
                    'settings': {
                        'slidesToShow': maxSlides,
                        'slidesToScroll': maxSlides,
                        'arrows': arrows
                    }
                }, {
                    'breakpoint': 661,
                    'settings': {
                        'slidesToShow': maxSlides > 2 ? maxSlides - 1 : 1,
                        'slidesToScroll': maxSlides > 1 ? maxSlides - 1 : 1,
                        'arrows': arrows
                    }
                }]
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.rss').component('rssFeedsDetails', {
        'templateUrl': '/resources/template/html/modules/_shared/components/rss/templates/rss-feeds-details.html',
        'controller': 'rssFeedsDetailsController'
    });
})();
'use strict';

(function () {
    'use strict';

    rssFeedsDetailsController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.rss').controller('rssFeedsDetailsController', rssFeedsDetailsController);

    function rssFeedsDetailsController(contentRepoService, errorService) {
        var ctrl = this;
        ctrl.details = {};
        ctrl.getTrustAsHtml = getTrustAsHtml;
        ctrl.$onInit = activate;

        function activate() {
            getDetails();
        }

        function getTrustAsHtml() {
            return contentRepoService.getTrustAsHtml(ctrl.details.body);
        }

        function getDetails() {
            var path = contentRepoService.getPathFromUrl();
            return contentRepoService.getLinkMediaByPath(path).then(function (response) {
                ctrl.details = contentRepoService.populateLinkFields(response['data'], path);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.rss').component('rssFeeds', {
        'templateUrl': '/resources/template/html/modules/_shared/components/rss/templates/rss-feeds.html',
        'controller': 'rssFeedsController'
    });
})();
'use strict';

(function () {
    'use strict';

    rssFeedsController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.rss').controller('rssFeedsController', rssFeedsController);
    function rssFeedsController(contentRepoService, errorService) {
        var ctrl = this,
            filterSelectorDefault = 'Sort by',
            filterSelectorDate = 'Date';
        ctrl.resources = [];
        ctrl.filterSelections = [filterSelectorDefault, filterSelectorDate];
        ctrl.resourcesTotalCount = 0;
        ctrl.currentPage = 1;
        ctrl.pageSize = 10;
        ctrl.changeFilter = changeFilter;
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;
        ctrl.pageChangeHandler = pageChangeHandler;
        ctrl.$onInit = activate;

        function activate() {
            getResourceListData();
            getFilterSelections();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function changeFilter(selection) {
            ctrl.currentPage = 1;
            selection = selection === filterSelectorDefault || selection === filterSelectorDate ? '' : selection;
            return getResourceListData('', '', selection);
        }

        function getResourceListData() {
            var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var subCat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

            return contentRepoService.search(ctrl.currentPage, ctrl.pageSize, 'pr', contentType, category, subCat).then(function (response) {
                var responseData = response['data'];
                ctrl.resourcesTotalCount = responseData['count'];
                responseData['docs'].map(function (doc) {
                    getLinkMediaByPath(doc['Url']);
                });
            }, handleRejection);
        }

        function pageChangeHandler(pageNumber) {
            ctrl.currentPage = pageNumber;
            var selector = ctrl.selector === filterSelectorDefault ? '' : ctrl.selector;
            return getResourceListData('', '', selector);
        }

        function getLinkMediaByPath(link) {
            ctrl.resources = [];
            return contentRepoService.getLinkMediaByPath(link).then(function (response) {
                ctrl.resources.push(contentRepoService.populateLinkFields(response.data, link));
            }, handleRejection);
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }

        function getFilterSelections() {
            return contentRepoService.getCategories().then(function (response) {
                var pr = response['data']['pr'];
                ctrl.filterSelections = contentRepoService.getCategoriesFromObject(pr, ctrl.filterSelections).categoriesList;
                ctrl.selector = ctrl.filterSelections[0];
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    runOnLast.$inject = ["$log"];
    angular.module('kappGlobal.runOnLast', []).directive('runOnLast', runOnLast);
    function runOnLast($log) {
        return {
            'link': function link(scope, element, attrs) {
                if (scope.$last) {
                    try {
                        scope.$parent.$ctrl[attrs.runOnLast]();
                    } catch (e) {
                        $log.warn('\'' + attrs.runOnLast + '\'' + ' not a function.');
                    }
                }
            },
            'restrict': 'A'
        };
    }
})();
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

(function () {
    'use strict';

    searchService.$inject = ["$http", "$window", "$location", "$stateParams", "ENV", "$rootScope"];
    angular.module('kappGlobal.search').factory('searchService', searchService);

    function searchService($http, $window, $location, $stateParams, ENV, $rootScope) {
        var _searchUrl = ENV.apiServer + '/_svc/search.svc/';
        return {
            'search': search,
            'getDataPage': getDataPage,
            'getNavigators': getNavigators,
            'getSearchQueryValue': getSearchQueryValue,
            'mapSearchResult': mapSearchResult,
            'clearLocationSearch': clearLocationSearch,
            'autocomplete': autocomplete,
            'autocompleteCallback': autcompleteCallback,
            'setUrlWithSearchQuery': setUrlWithSearchQuery
        };

        function search(queryText, section) {
            var languages = $window.navigator['languages'],
                languageCode = ENV.locale.match(/^\w+/i) || getCurrentLanguageCode(languages) || 'en',
                countryCode = ENV.locale.match(/\w+$/i) || getCurrentCountryCode(languages) || 'global';
            return $http.get(_searchUrl + ('Search?query=' + queryText + '&languageCode=' + languageCode + '&countryCode=' + countryCode + '&sec=' + section + '&sort='));
        }

        function getDataPage() {
            var searchId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var pageNumber = arguments[1];

            return $http.get(_searchUrl + ('GetDataPage?searchId=' + searchId + '&pageNumber=' + pageNumber));
        }

        function getNavigators() {
            var searchId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            return $http.get(_searchUrl + ('GetNavigators?searchId=' + searchId));
        }

        function getCurrentCountryCode(data) {
            var _data = _slicedToArray(data, 1),
                dataArray = _data[0],
                _dataArray$split = dataArray.split('-'),
                _dataArray$split2 = _slicedToArray(_dataArray$split, 2),
                countryCode = _dataArray$split2[1];

            return countryCode.toLowerCase();
        }

        function getCurrentLanguageCode(data) {
            var _data2 = _slicedToArray(data, 1),
                dataArray = _data2[0],
                _dataArray$split3 = dataArray.split('-'),
                _dataArray$split4 = _slicedToArray(_dataArray$split3, 1),
                languageCode = _dataArray$split4[0];

            return languageCode.toLowerCase();
        }

        function getSearchQueryValue() {
            return $stateParams.query;
        }

        function setUrlWithSearchQuery(queryText) {
            $location.path('/search').search({ 'query': queryText });
        }

        function mapSearchResult(data) {
            return {
                'searchId': data['search_id'],
                'numberOfPages': data['pages'],
                'count': data['count']
            };
        }

        function clearLocationSearch() {
            $location.search('searchPageNumber', null);
        }

        function autocomplete(value) {
            var acomplete = $('#autocompleteElement');
            if (acomplete.length) acomplete.remove(); // remove if we already had it
            var requestScript = $window.document.createElement('script');
            requestScript.id = 'autocompleteElement';
            // Our autocomplete profile is Marketing2enUS, phrase is taken from search bar, and method is specified as the one we use
            requestScript.src = 'https://autocomplete.kaspersky.com/SLAutoCompleteService.svc/GetAutocompleteData?phrase=' + encodeURIComponent(value) + '&profile=Marketing2enGB&count=10&method=angular.element(document).injector().get(\'searchService\').autocompleteCallback';
            $window.document.head.appendChild(requestScript);
        }

        function autcompleteCallback(value) {
            value.d[0].Value.shift(); // Removing original request value, kept as first item of response to prevent XSS attacks
            $rootScope.$emit('autocompleteCall', value);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.siteBar').component('siteBar', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/site-bar/templates/site-bar.html',
        'controller': 'siteBarController'
    });
})();
'use strict';

(function () {
    'use strict';

    siteBarController.$inject = ["directiveData", "errorService", "windowHelperService"];
    angular.module('kappGlobal.siteBar').controller('siteBarController', siteBarController);

    function siteBarController(directiveData, errorService, windowHelperService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.closeBar = closeBar;
        ctrl.$onInit = activate;
        ctrl.showSitebar = true;

        function activate() {
            getData();
        }

        function hideSideBarForNonIndianIP() {
            ctrl.showSitebar = windowHelperService.getIPCountry() === 'IN';
        }

        function getData() {
            return directiveData.get('/site-header/site-bar.json').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data.hideSiteBarForNonIndianIP && ctrl.data.hideSiteBarForNonIndianIP[0] === 'true') hideSideBarForNonIndianIP();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function closeBar() {
            ctrl.data.active = 'No';
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.footerGlobal').component('footerGlobal', {
        'templateUrl': '/resources/template/html/modules/_shared/components/site-footer/templates/site-footer.html',
        'controller': 'footerGlobalController',
        'bindings': {
            'size': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    footerGlobalController.$inject = ["$q", "$state", "directiveData", "SETUP", "errorService", "windowHelperService", "ENV", "appHelperService"];
    angular.module('kappGlobal.footerGlobal').controller('footerGlobalController', footerGlobalController);

    function footerGlobalController($q, $state, directiveData, SETUP, errorService, windowHelperService, ENV, appHelperService) {
        var ctrl = this,
            noCustomFooter = void 0,
            newsletterEnabled = void 0;

        ctrl.data = {};
        ctrl.cCountry = '' + SETUP.country;
        ctrl.year = new Date();
        ctrl.displayRssLink = true;
        ctrl.locale = ENV.locale;
        ctrl.$onInit = activate;
        ctrl.toggleSelector = toggleSelector;
        ctrl.closeSelector = closeSelector;
        ctrl.displayNewsletterForm = displayNewsletterForm;
        ctrl.handleNewsletterLoaded = handleNewsletterLoaded;
        ctrl.isB2B = $state.current.parent === 'smb' || $state.current.parent === 'vsb';
        ctrl.isENT = $state.current.parent === 'enterprise';

        function activate() {
            var promises = [getFooterBySection(), getCountrySelector()];
            $q.all(promises);

            if (['big', 'small'].indexOf(ctrl.size) !== -1) {
                ctrl.bigFooter = ctrl.size === 'big';
                ctrl.smallFooter = ctrl.size === 'small';
            } else {
                if ($state.current.parent === 'home-security-section' || $state.current.name === 'search') {
                    ctrl.bigFooter = true;
                } else {
                    ctrl.smallFooter = true;
                }
            }

            ctrl.isJP = isJP();
        }

        function getFooterBySection() {
            return directiveData.getBySection('footer').then(function (response) {
                if (response && response.data.fields) {
                    ctrl.data = response.data.fields;
                    setDisplayRssLink(ctrl.data);
                }
            }, function (rejection) {
                errorService.warn(rejection);
                noCustomFooter = true;
            }).then(getFooterData);
        }

        function getFooterData() {
            return directiveData.getLocal('footer/footer').then(function (response) {
                overrideCopyrightForSMB_VSB_ENT(response.data.fields);
                ctrl.generalFooterData = response.data.fields;
                setDisplayRssLink(ctrl.generalFooterData);
                if (noCustomFooter) ctrl.data = ctrl.generalFooterData;
            }, handleRejection);
        }

        /**
         * Overrides copyright value based on
         * https://jira.kaspersky.com/browse/SMB-4260
         * https://jira.kaspersky.com/browse/GWP-33973
         * @param data
         */
        function overrideCopyrightForSMB_VSB_ENT(data) {
            var pathname = windowHelperService.getPathName(),
                getOverride = function getOverride(key) {
                return data[key] ? data[key] : data.copyright;
            };

            if (pathname === '/renewal-center/smb') {
                data.copyright = getOverride('copyright-smb');
            } else if (pathname === '/renewal-center/vsb') {
                data.copyright = getOverride('copyright-vsb');
            } else if (ctrl.isENT) {
                data.copyright = getOverride('copyright-ent');
            }
        }

        function getCountrySelector() {
            return directiveData.getLocal('footer/country-selector').then(function (response) {
                if (response.data && response.data.fields) {
                    ctrl.cSelector = response.data.fields.Body;
                }
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function toggleSelector($event) {
            $event.preventDefault();
            var $footer = $('.footer-selector');
            $($event.currentTarget).toggleClass('active');
            $footer.slideToggle(400);
            $('html, body').animate({
                'scrollTop': $footer.offset().top - 20
            }, 700);
        }

        function closeSelector($event) {
            $('.footer-selector').slideToggle(500);
            $('.country-selector-button').removeClass('active');
            $event.preventDefault();
        }

        function setDisplayRssLink(data) {
            if (data && data.rssLink && data.rssLink.hide[0] === 'Yes') ctrl.displayRssLink = false;
        }

        function handleNewsletterLoaded(componentEnabled) {
            newsletterEnabled = componentEnabled;
        }

        function displayNewsletterForm() {
            return !windowHelperService.isMobile() || newsletterEnabled;
        }

        function isJP() {
            return appHelperService.assertStateByName(['product-kss', 'product-kfa', 'kfa-thank-you']) && ctrl.locale === 'ja-jp';
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.siteHeader').component('searchBar', {
        'templateUrl': '/resources/template/html/modules/_shared/components/site-header/templates/search-bar_main-nav.html',
        'controller': 'searchBarController'
    });
})();
'use strict';

(function () {
    'use strict';

    searchBarController.$inject = ["$state", "$element", "directiveData", "searchService", "$document", "$rootScope", "$window", "errorService"];
    angular.module('kappGlobal.siteHeader').controller('searchBarController', searchBarController);

    function searchBarController($state, $element, directiveData, searchService, $document, $rootScope, $window, errorService) {
        var ctrl = this,
            mainNav = angular.element($document[0].querySelector('.main-nav')),
            searchField = $document[0].getElementById('search-main-nav');

        ctrl.active = false;
        ctrl.uiStrings = {};
        ctrl.searchTrigger = searchTrigger;
        ctrl.closeSearchTrigger = closeSearchTrigger;
        ctrl.search = search;
        ctrl.goToSearchPage = goToSearchPage;
        ctrl.$onInit = activate;
        ctrl.$onDestroy = handleDestruction;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.uiStrings = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function search() {
            searchService.autocomplete(ctrl.searchBar, $element);
        }

        function goToSearchPage(e) {
            if (e && e.type === 'keypress') {
                var keyCode = e.which || e.keyCode;

                if (keyCode === 13) {
                    $state.go('search', {
                        'query': ctrl.searchBar
                    });
                }
            } else {
                $state.go('search', {
                    'query': ctrl.searchBar
                });
            }
        }

        function searchTrigger($event) {
            $event.stopPropagation();
            $event.preventDefault();
            ctrl.active = true;

            if (angular.isDefined(ctrl.searchBar) && ctrl.searchBar.length) {
                return goToSearchPage();
            }

            mainNav.toggleClass('search-active');
            searchField.focus();
        }

        function closeSearchTrigger($event) {
            $event.stopPropagation();
            $event.preventDefault();
            ctrl.active = false;
            ctrl.searchBar = '';
            mainNav.toggleClass('search-active');
        }

        // Autocomplete functionality starts here

        var autoOff = $rootScope.$on('autocompleteCall', function (ev, val) {
            var reg = new RegExp(val.d[0].Value[0], 'ig'),
                searchString = val.d[0].Value[0];
            ctrl.autocompleteQ = val.d[0].Value;
            ctrl.autocompleteQhtml = ctrl.autocompleteQ.map(function (item) {
                return item.replace(reg, '<span>' + searchString + '</span>');
            });
        });

        function handleDestruction() {
            autoOff();
            var autocompleteTag = $window.document.querySelector('#autocompleteElement');
            if (autocompleteTag) $window.document.querySelector('head').removeChild(autocompleteTag);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.siteHeader').component('siteHeaderScrollNav', {
        'bindings': {
            'items': '<'
        },
        'template': '\n\t\t\t\t<li ng-repeat="item in $ctrl.items">\n\t\t\t\t    <a ng-click="$ctrl.animatedScrollTo(item.id, $event)" ng-href="#{{item.id}}">{{item.title}}</a>\n\t\t\t\t</li>\n            ',
        'controller': 'siteHeaderScrollNavController'
    });
})();
'use strict';

(function () {
    'use strict';

    siteHeaderScrollNavController.$inject = ["errorService"];
    angular.module('kappGlobal.siteHeader').controller('siteHeaderScrollNavController', siteHeaderScrollNavController);

    function siteHeaderScrollNavController(errorService) {
        var ctrl = this;
        ctrl.animatedScrollTo = animatedScrollTo;

        function animatedScrollTo(id, $event) {
            $event.preventDefault();
            $event.stopPropagation();

            var target = $('#' + id);
            var offset = $('.site-header').outerHeight(true);

            if (!target.length) return errorService.warn('Couldn\'t find [' + id + '] on the page');

            $('html, body').animate({
                'scrollTop': target.offset().top - offset
            }, 500);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.siteHeader').component('siteHeader', {
        'bindings': {
            'resource': '@',
            'hideDesktopMenu': '@',
            'showCurrencySelector': '@',
            'hideMainNav': '<'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/site-header/templates/site-header.html',
        'controller': 'siteHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    siteHeaderController.$inject = ["$http", "directiveData", "appHelperService", "windowHelperService", "$scope", "$q", "errorService", "rootScopeHelper", "$timeout", "$element", "$state", "ENV"];
    angular.module('kappGlobal.siteHeader').controller('siteHeaderController', siteHeaderController);

    function siteHeaderController($http, directiveData, appHelperService, windowHelperService, $scope, $q, errorService, rootScopeHelper, $timeout, $element, $state, ENV) {
        var ctrl = this,
            hasRun = void 0,
            promises = [],
            timeoutPromise = [];

        ctrl.showMenuUtility = !appHelperService.assertStateByName('search');
        ctrl.getMainNav = getMainNav;
        ctrl.$onInit = activate;
        ctrl.$onDestroy = destroyGlobalListeners;
        ctrl.getInnerItems = getInnerItems;
        ctrl.isMobile = windowHelperService.isMobile();
        ctrl.hideGetInTouchCta = hideGetInTouchCta;
        ctrl.hasCrimeStopperLogo = hasCrimeStopperLogo;

        angular.element(window).on('resize.siteHeader', function () {
            ctrl.isMobile = windowHelperService.isMobile();
            $scope.$digest();
        });

        function activate() {
            getMainNav();
        }

        rootScopeHelper.on($scope, 'ngRender', updateUtm);

        function updateUtm() {
            directiveData.getByUrl('meta').then(function (response) {
                ctrl.utm = response.data.fields.utm;
            }).catch(handleRejection);
        }

        function hasCrimeStopperLogo() {
            var states = ['home-security', 'product-kss'];
            return appHelperService.assertStateByName(states) && ENV.locale === 'en-au';
        }

        function hideGetInTouchCta() {
            var states = ['enterprise-wiki-section', 'enterprise-wiki-section-home'];

            return !appHelperService.assertStateByName(states) && ctrl.rightMenuItem && ctrl.rightMenuItem.ctaText && ctrl.rightMenuItem.ctaLink;
        }

        function destroyGlobalListeners() {
            angular.element(window).off('resize.siteHeader');
        }

        function getMainNav() {
            return directiveData.getBySection(ctrl.resource || 'main-nav').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.mainNavItems = response.data.fields['mainNavItem'];
                ctrl.rightMenuItem = response.data.fields.rightMenuItem;
                $timeout(function () {
                    var totalHeight = $($element).find('.site-top').outerHeight(true) + $($element).find('.site-header .site-title').outerHeight(true);
                    if ($state.includes('enterprise')) {
                        var productPromoSection = $('.product-promo-section');
                        totalHeight = totalHeight + (productPromoSection ? productPromoSection.outerHeight(true) : 0);
                    }
                    $element.attr('site-top-height', totalHeight);
                });
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getInnerItems(event) {
            // Megamenu disappearance with delay
            if (event.type === 'mouseleave' && $($element).find('li.hover').length) {
                // When we leave the menu item, add a $timeout promise to "queue" - array of promises "timeoutPromise"
                // as soon as timeout promise is resolved, remove class hover and remove an item from the array
                // if at the moment of timeout Promise resolution we hover over other nav item with
                // megamenu enabled, then add .hover to that one

                timeoutPromise.push([$timeout(function (target) {
                    $element.find(target).removeClass('hover');
                    timeoutPromise.pop();

                    if (!timeoutPromise.length && $('.main-menu > .dropdown:hover').length) {
                        $('.main-menu > .dropdown:hover').addClass('hover');
                    }
                }, 300, true, event.currentTarget), event.currentTarget]);
            } else if (event.type === 'mouseenter') {
                // If the user moved cursor away from megamenu and returned within the timeout delay value
                // cancel the promise and leave the current megamenu hovering
                timeoutPromise = timeoutPromise.filter(function (timer) {
                    if (event.currentTarget === timer[1]) {
                        $timeout.cancel(timer[0]);
                        return false;
                    } else return timer;
                });
                // If there are no megamenus with .hover and pending $timeout promise for disappearance and the cursor
                // is on top of megamenu item add class hover to it
                if (!timeoutPromise.length && $('.main-menu > .dropdown:hover').length) $(event.currentTarget).addClass('hover');
            }

            if (hasRun) return false;
            hasRun = true;

            ctrl.mainNavItems.forEach(function (item, index) {
                if (item.megaMenuItem && item.megaMenuItem.match(/\.json/)) {
                    return $http.get(item.megaMenuItem, { 'cache': true }).then(function (response) {
                        var megaMenuItem = ctrl.mainNavItems[index].megaMenuItem = response.data.fields;

                        if (megaMenuItem.megaSideBlock2) {
                            // megaSideBlock2 could be HTML commented out
                            // strip out comments and white spaces to avoid creating an additional list item
                            megaMenuItem.megaSideBlock2 = megaMenuItem.megaSideBlock2.replaceAll('<!--[\\s\\S]*?-->', '').trim();
                        }

                        if (megaMenuItem.product) {
                            megaMenuItem.product.forEach(function (product, idx2) {
                                if (product.match(/\.json/)) {
                                    promises.push(getProductItems(product, index, idx2));
                                }
                            });
                        }
                        if (megaMenuItem.megaMenuGroups) {
                            megaMenuItem.megaMenuGroups.forEach(function (menuGroups, idx3) {
                                ctrl.mainNavItems[index].megaMenuItem.megaMenuGroups[idx3].groupProduct.forEach(function (grpProduct, idx4) {
                                    if (grpProduct.match(/\.json/)) {
                                        promises.push(getProductGroups(grpProduct, index, idx3, idx4));
                                    }
                                });
                            });
                        }
                        $q.all(promises).then(function () {
                            $timeout(function () {
                                $element.find('.main-menu > li > ul a').on('click', function () {
                                    return $($element).find('li.hover').removeClass('hover');
                                });
                            });
                        });
                    }, handleRejection);
                }
            });
        }

        function getProductItems(product, index, idx2) {
            return $http.get(product, { 'cache': true }).then(function (response) {
                return ctrl.mainNavItems[index].megaMenuItem.product[idx2] = response.data.fields;
            }, handleRejection);
        }

        function getProductGroups(grpProduct, index, idx3, idx4) {
            return $http.get(grpProduct, { 'cache': true }).then(function (response) {
                return ctrl.mainNavItems[index].megaMenuItem.megaMenuGroups[idx3].groupProduct[idx4] = response.data.fields;
            }, handleRejection);
        }

        rootScopeHelper.on($scope, 'scrollNav', getScrollNavItems);

        function getScrollNavItems(event, items) {
            ctrl.scrollNavItems = items;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.siteHeader').component('mainNav', {
        'bindings': {
            'resource': '@'
        },
        'require': {
            'siteHeader': '^siteHeader'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/site-header/templates/site-header_main-nav.html',
        'controller': 'mainNavController'
    });
})();
'use strict';

(function () {
    'use strict';

    mainNavController.$inject = ["$state", "$window", "rootScopeHelper", "geoLocationManager", "appHelperService", "directiveData", "templateVersion", "$scope", "$rootScope", "ENV", "$document", "windowHelperService", "errorService"];
    angular.module('kappGlobal.siteHeader').controller('mainNavController', mainNavController);

    function mainNavController($state, $window, rootScopeHelper, geoLocationManager, appHelperService, directiveData, templateVersion, $scope, $rootScope, ENV, $document, windowHelperService, errorService) {
        var ctrl = this,
            curUrl = $state.href($state.current.name, $state.params, { 'absolute': true }),
            geoIP = geoLocationManager.getUserGeoIp(curUrl),
            stateData = void 0;

        var states = ['search', 'lrc-serial', 'lrc-verdict'];

        ctrl.showMenu = !appHelperService.assertStateByName(states);
        ctrl.makeActive = makeActive;
        ctrl.getTemplateUrl = getTemplateUrl;
        ctrl.$onInit = activate;
        ctrl.$onDestroy = destroyGlobalListeners;
        ctrl.getInnerItems = getInnerItems;
        ctrl.hideGetInTouchCta = hideGetInTouchCta;
        ctrl.isVPN = geoLocationManager.isVpnProhibitedCountry(geoIP);

        // Switching the highlighted nav panel item on stateChange
        var stateChangeSuccessListener = $rootScope.$on('$stateChangeSuccess', updateActiveNav);

        function updateActiveNav() {
            stateData = appHelperService.getCurrentStateData() || {};
            stateData.navIndex = overrideNavIndex() || stateData.navIndex;
            if (stateData.navIndex > -1) makeActive(stateData.navIndex);
        }

        function getMainNav() {
            return directiveData.getBySection('main-nav').then(function (response) {
                ctrl.entData = response.data.fields.rightMenuItem;
            }, handleRejection);
        }

        function getInnerItems(event, skip) {
            ctrl.siteHeader.getInnerItems(event, skip);
        }

        function activate() {
            getData();
            updateActiveNav();
            if (appHelperService.stateIncludes('enterprise')) setENTStateNavIndex();
            if (appHelperService.assertStateByName(['smb-home', 'vsb-home'])) {
                getMainNav().then(function () {
                    if (ctrl.entData.ctaLink) overrideSearch();
                });
            }
        }

        rootScopeHelper.on($scope, 'ngRender', updateUtm);

        function updateUtm() {
            directiveData.getByUrl('meta').then(function (response) {
                ctrl.utm = response.data.fields.utm;
            }).catch(handleRejection);
        }

        function hideGetInTouchCta() {
            var states = ['enterprise-wiki-section', 'enterprise-wiki-section-home'];

            return !appHelperService.assertStateByName(states) && !ctrl.utm;
        }

        function destroyGlobalListeners() {
            angular.element(window).off('scroll.mainNavController');
            stateChangeSuccessListener();
        }

        function setENTStateNavIndex() {
            var sts = ['enterprise-resources', 'enterprise-resource', 'enterprise-case-studies-ferrari'];
            getTemplateVersion().then(function (response) {
                if (sts.indexOf(appHelperService.getCurrentState()) > -1 && response.template === '2.0') {
                    makeActive(4);
                }
                if (response.template === '3.0') {
                    getMainNav();
                    overrideSearch();
                }
            }, handleRejection);
        }

        function getTemplateVersion() {
            return templateVersion.getVer('enterprise-security', 'ent-hp-menu', 'meta').then(function (response) {
                return response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getTemplateUrl(template) {
            if (template) return '/resources/template/html/modules/_shared/components/site-header/templates/site-header_mega-menu__' + template + '.html';
        }

        function makeActive(index) {
            ctrl.activeState = index;
        }

        function getData() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.generalData = response.data.fields;
            }, handleRejection);
        }

        function overrideRuNavIndex() {
            var smbDownloads = 'small-to-medium-business-security/downloads';
            if (appHelperService.stateIncludes('partners') && stateData.navIndex > 2) return ++stateData.navIndex;
            if (appHelperService.stateIncludes('vsb') && stateData.navIndex > 1) return ++stateData.navIndex;
            if (appHelperService.stateIncludes('home-security-section') && stateData.navIndex > 1) return ++stateData.navIndex;
            if (appHelperService.assertStateByName('smb-how-to-buy')) return 2;
            if (appHelperService.assertStateByName(['smb-resources-center', 'smb-resources-category'])) return 6;
            if (appHelperService.getCurrentState().substr(0, 3) === 'lrc') return 2;
            if (windowHelperService.getPathName().indexOf(smbDownloads) > -1) return 4;
        }

        function overrideJpNavIndex() {
            if (appHelperService.getCurrentState().indexOf('partners-technology') > -1) return 2;
            if (appHelperService.assertStateByName(['resources-center', 'resources-category'])) return 3;
            if (appHelperService.assertStateByName('vsb-downloads')) return 1;
            if (appHelperService.assertStateByName('partners-technology-partnership')) return 2;
            if (appHelperService.assertStateByName('partners-whitelist-program')) return 3;
        }

        // Used to override selected item in Navigation based on locale
        function overrideNavIndex() {
            if (ENV.locale === 'ru-ru') return overrideRuNavIndex();
            if (ENV.locale === 'ja-jp') return overrideJpNavIndex();
            if (ENV.locale === 'en-us') {
                var currentState = appHelperService.getCurrentState();
                switch (currentState) {
                    case 'vsb-downloads':
                        return 1;
                    case 'vsb-contact-us':
                        return 2;
                    case 'resources-center':
                        return 3;
                }
            }
            return false;
        }

        function overrideSearch() {
            angular.element($window).on('scroll.mainNavController', function () {
                if ($window.scrollY) ctrl.hideSearch = $window.scrollY >= 150;else if ($document[0].documentElement.scrollTop) ctrl.hideSearch = $document[0].documentElement.scrollTop >= 150;else ctrl.hideSearch = false;
                $scope.$digest();
            });
        }
    }
})();
'use strict';

(function () {

    'use strict';

    angular.module('kappGlobal.siteTop', []).component('siteTop', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/site-top/templates/site-top.html',
        'controller': 'siteTopController'
    });
})();
'use strict';

(function () {
    'use strict';

    siteTopController.$inject = ["$element", "$rootScope", "$state", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.siteTop').controller('siteTopController', siteTopController);

    function siteTopController($element, $rootScope, $state, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.getActiveItem = getActiveItem;
        ctrl.$onInit = activate;

        function activate() {
            return directiveData.getLocal('sitetop/sitetop').then(function (response) {
                ctrl.data = response.data.fields;
                prependComment(response.data.id);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function prependComment(id) {
            $timeout(function () {
                var comment = '<!-- Start Component Presentation: {"ComponentID" : "' + id + '","ComponentTemplateID" : "tcm:246-294262-32"} -->';
                $($element).prepend(comment);
            });
        }

        function getActiveItem(link) {
            if (!$rootScope.pageDataReady) {
                var pageDataReady = $rootScope.$on('pageDataReady', function () {
                    ctrl.breadcrumbs = $rootScope.breadcrumbs;
                    pageDataReady();
                });
            } else {
                ctrl.breadcrumbs = $rootScope.breadcrumbs;
            }

            if (ctrl.breadcrumbs) {
                return ctrl.breadcrumbs && ctrl.breadcrumbs[1] && ctrl.breadcrumbs[1].link === link || $state.current.url === link;
            }
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.socialSharing').component('socialSharing', {
        'templateUrl': '/resources/template/html/modules/_shared/components/social-sharing/template/social-sharing.html',
        'bindings': {
            'template': '@'
        },
        'controller': 'socialSharingController'
    });
})();
'use strict';

(function () {
    'use strict';

    socialSharingController.$inject = ["$location", "directiveData", "errorService"];
    angular.module('kappGlobal.socialSharing').controller('socialSharingController', socialSharingController);

    function socialSharingController($location, directiveData, errorService) {
        var ctrl = this;
        ctrl.socialData = {};
        ctrl.pageUrl = $location.absUrl();
        ctrl.template = ctrl.template || 'awards';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.socialData = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.statsWidget').component('statsWidget', {
        'templateUrl': '/resources/template/html/modules/_shared/components/stats-widget/templates/stats-widget.html',
        'controller': 'statsWidgetController'
    });
})();
'use strict';

(function () {
    'use strict';

    statsWidgetController.$inject = ["directiveData", "errorService", "ENV"];
    angular.module('kappGlobal.statsWidget').controller('statsWidgetController', statsWidgetController);

    function statsWidgetController(directiveData, errorService, ENV) {
        var ctrl = this;
        ctrl.$onInit = activate;
        ctrl.locale = ENV.locale;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.get('/site-general/stats-widget/stats-widget.json').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.tabbedSectionBuyblock').component('tabbedSectionBuyblock', {
        'templateUrl': '/resources/template/html/modules/_shared/components/tabbed-section-buyblock/templates/tabbed-section-buyblock.html',
        'controller': 'tabbedSectionBuyblockController'
    });
})();
'use strict';

(function () {
    'use strict';

    tabbedSectionBuyblockController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.tabbedSectionBuyblock').controller('tabbedSectionBuyblockController', tabbedSectionBuyblockController);

    function tabbedSectionBuyblockController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('tabbed-section-buyblock').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.tabbedSectionBuyblock').component('regularSectionTabbed', {
        'templateUrl': '/resources/template/html/modules/_shared/components/tabbed-section-buyblock/templates/regular-section-tabbed.html',
        'controller': 'regularSectionTabbedController'
    });
})();
'use strict';

(function () {
    'use strict';

    regularSectionTabbedController.$inject = ["directiveData", "errorService", "$timeout", "$element"];
    angular.module('kappGlobal.tabbedSectionBuyblock').controller('regularSectionTabbedController', regularSectionTabbedController);

    function regularSectionTabbedController(directiveData, errorService, $timeout, $element) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.selected = 0;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        ctrl.selectTab = function (tabIndex) {
            ctrl.selected = tabIndex;
        };

        function getData() {
            return directiveData.getByUrl('regular-section-tabbed').then(function (response) {
                ctrl.data = response.data.fields;
                runScripts();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            $timeout(function () {
                //////////////////////////////////////////
                // Tabs desktop -> Dropdown mobile
                //////////////////////////////////////////

                // Get the name of currently active tab for mobile list
                var SelectedName = $('ul.tabs li.selected').text();
                $($element).find('.tab-nav').append('<div class="tab-label">' + SelectedName + '</div>');
                $($element).find('.tab-nav').click(function (e) {
                    e.stopPropagation();
                    $(this).toggleClass('active');
                });

                // Close it if user clicks outside
                $('body').click(function () {
                    $('.tab-nav').removeClass('active');
                });

                $($element).find('.tab-nav .tabs').click(function (e) {
                    e.stopPropagation();
                });

                // Check when item is clicked and update active tab label
                $($element).find('.tab-nav .tabs li').click(function (e) {
                    e.preventDefault();
                    var $this = $(this);
                    $this.parent().siblings().remove();
                    $this.closest('.tab-nav').append('<div class=tab-label></div>');
                    $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                    $this.parent().parent().toggleClass('active');
                });

                //////////////////////////////////////////
                // Accordion

                $($element).find('.accordion-section > li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                    $(this).parent().toggleClass('open');
                    $(this).siblings().slideToggle();
                });
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.trustpilotReviews').component('trustpilotReviews', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/trustpilot-reviews/templates/trustpilot-reviews.html',
        'controller': 'trustpilotReviewsController'
    });
})();
'use strict';

(function () {
    'use strict';

    trustpilotReviewsController.$inject = ["directiveData", "errorService", "trustpilotReviewsService", "$timeout", "$element"];
    angular.module('kappGlobal.trustpilotReviews').controller('trustpilotReviewsController', trustpilotReviewsController);

    function trustpilotReviewsController(directiveData, errorService, trustpilotReviewsService, $timeout, $element) {
        var ctrl = this;
        ctrl.reviews = [];
        ctrl.starsArr = _.range(0, 5, 1);
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'trustpilot-reviews').then(function (response) {
                ctrl.data = response.data.fields;
                if (!ctrl.data) return false;
                ctrl.starsFilter = ctrl.data.starsFilter || '5';
                ctrl.reviewsNum = ctrl.data.reviewsNum || '14';
                ctrl.tagFilter = ctrl.data.tagFilter || '';
                getReviews();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function getReviews() {
            return trustpilotReviewsService.getCustomerReviews(ctrl.starsFilter, ctrl.reviewsNum, ctrl.tagFilter).then(function (response) {
                ctrl.protoReviews = response.data.reviews;
                while (ctrl.protoReviews.length) {
                    ctrl.reviews.push(ctrl.protoReviews.splice(0, 2));
                }runScripts();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            $timeout(function () {
                var slickConfig = {
                    'slidesToShow': 1,
                    'dots': true,
                    'accessibility': false,
                    'draggable': false,
                    'arrows': true,
                    'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                    'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                    'responsive': [{
                        'breakpoint': 769,
                        'settings': {
                            'arrows': false,
                            'dots': true
                        }
                    }]
                };
                $($element).find('.reviews-list').slick(slickConfig);

                // $($element).find('.reviews-personal blockquote content').dotdotdot({
                //     'ellipsis': '... ',
                //     'height': 70
                // });
            });
        }
    }
})();
'use strict';

(function () {
    trustpilotReviewsFactory.$inject = ["$http", "errorService"];
    angular.module('kappGlobal.trustpilotReviews').factory('trustpilotReviewsService', trustpilotReviewsFactory);
    function trustpilotReviewsFactory($http, errorService) {
        return {
            'getCustomerReviews': getCustomerReviews
        };

        function getCustomerReviews(starsFilter, reviewsNum, tagFilter) {
            return $http.jsonp('https://api.trustpilot.com/v1/business-units/49bd50700000640005042760/reviews?apikey=whUgvv6UJzvK6a1z2M8pK279osL7EdUl&stars=' + starsFilter + '&perPage=' + reviewsNum + '&tagValue=' + tagFilter, { 'jsonpCallbackParam': 'callback' }).then(function (response) {
                return response;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vpnProhibitedMessage').component('vpnProhibitedMessage', {
        'templateUrl': '/resources/template/html/modules/_shared/components/vpn-prohibited-message/templates/vpn-prohibited-message.html',
        'controller': 'vpnProhibitedMessageController'
    });
})();
'use strict';

(function () {
    vpnProhibitedMessageController.$inject = ["$location", "geoLocationManager", "vpnProhibitedMessageService", "errorService"];
    angular.module('kappGlobal.vpnProhibitedMessage').controller('vpnProhibitedMessageController', vpnProhibitedMessageController);

    function vpnProhibitedMessageController($location, geoLocationManager, vpnProhibitedMessageService, errorService) {
        var ctrl = this;
        ctrl.message = '';
        ctrl.$onInit = activate;
        activate();
        function activate() {
            var url = $location.absUrl();
            ctrl.showMessage = geoLocationManager.showVpnProhibitedMessage(url);
            getProhibitedMessage();
        }

        function getProhibitedMessage() {
            return vpnProhibitedMessageService.getVpnProhibitedMessageResource().then(function (resource) {
                ctrl.message = resource.message;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    vpnProhibitedMessageService.$inject = ["$http", "ENV"];
    angular.module('kappGlobal.vpnProhibitedMessage').factory('vpnProhibitedMessageService', vpnProhibitedMessageService);

    function vpnProhibitedMessageService($http, ENV) {
        var serverUrl = '' + ENV.server;
        return {
            'getVpnProhibitedMessageResource': getVpnProhibitedMessageResource
        };
        function getVpnProhibitedMessageResource() {
            return $http.get(serverUrl + 'vpnmessage/');
        }
    }
})();
'use strict';

(function () {
    'use strict';

    localStorageService.$inject = ["$window"];
    angular.module('kappGlobal.caching').factory('localStorageService', localStorageService);

    function localStorageService($window) {
        var storage = storageAvailable('localStorage');

        return {
            'set': set,
            'get': get,
            'remove': remove,
            'removeAll': removeAll
        };

        function storageAvailable(type) {
            try {
                var _storage = $window[type],
                    x = '__storage_test__';
                _storage.setItem(x, x);
                _storage.removeItem(x);
                return !_storage.getItem('disableStorage');
            } catch (e) {
                return e instanceof DOMException && (e.code === 22 || e.code === 1014 || e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && storage && storage.length !== 0;
            }
        }

        function set(cacheName, data, cacheTimeInMinutes) {
            if (!storage) return null;
            var date = new Date();
            if (angular.isDefined(cacheTimeInMinutes)) {
                date.setHours(date.getHours() + cacheTimeInMinutes / 60);
            } else {
                date = null;
            }
            var dataToCache = {
                'data': data,
                'expiryTime': date
            },
                objectToSaveToJSON = angular.toJson(dataToCache);
            localStorage.setItem(cacheName, objectToSaveToJSON);
        }

        function get(cacheName) {
            if (!storage) return null;
            var cached = angular.fromJson(localStorage.getItem(cacheName));
            if (cached === null || angular.isUndefined(cached)) {
                return null;
            }
            var currentDate = new Date();
            if (cached.expiryTime !== null && cached.expiryTime < currentDate) {
                return null;
            }
            return cached.data;
        }

        function remove(cacheNames) {
            if (!storage) return null;
            if (angular.isArray(cacheNames)) {
                _.forEach(cacheNames, function (cacheName) {
                    localStorage.removeItem(cacheName);
                });
            } else {
                localStorage.removeItem(cacheNames);
            }
        }

        function removeAll() {
            if (!storage) return null;
            localStorage.clear();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    sessionStorageService.$inject = ["$window"];
    angular.module('kappGlobal.caching').factory('sessionStorageService', sessionStorageService);

    function sessionStorageService($window) {
        var storage = storageAvailable('sessionStorage');

        return {
            'set': set,
            'get': get,
            'remove': remove,
            'removeAll': removeAll
        };

        function storageAvailable(type) {
            try {
                var _storage = $window[type],
                    x = '__storage_test__';
                _storage.setItem(x, x);
                _storage.removeItem(x);
                return !_storage.getItem('disableStorage');
            } catch (e) {
                return e instanceof DOMException && (e.code === 22 || e.code === 1014 || e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && storage && storage.length !== 0;
            }
        }

        function set(cacheName, data) {
            if (!storage) return null;
            var dataToCache = { 'data': data };
            var objectToSaveToJSON = angular.toJson(dataToCache);
            sessionStorage.setItem(cacheName, objectToSaveToJSON);
        }

        function get(cacheName) {
            if (!storage) return null;
            var cached = angular.fromJson(sessionStorage.getItem(cacheName));
            if (cached === null || angular.isUndefined(cached)) {
                return null;
            }
            return cached.data;
        }

        function remove(cacheNames) {
            if (!storage) return null;
            if (angular.isArray(cacheNames)) {
                _.forEach(cacheNames, function (cacheName) {
                    sessionStorage.removeItem(cacheName);
                });
            } else {
                sessionStorage.removeItem(cacheNames);
            }
        }

        function removeAll() {
            if (!storage) return null;
            sessionStorage.clear();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    dynamicModel.$inject = ["$compile", "$parse"];
    angular.module('kappGlobal.dynamicModelBinding').directive('dynamicModel', dynamicModel);

    function dynamicModel($compile, $parse) {
        return {
            'restrict': 'A',
            'terminal': true,
            'priority': 100000,
            'link': function link(scope, elem) {
                var name = $parse(elem.attr('dynamic-model'))(scope);
                elem.removeAttr('dynamic-model');
                elem.attr('ng-model', name);
                $compile(elem)(scope);
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    appHelperService.$inject = ["ENV", "$location", "$state"];
    angular.module('kappGlobal.helpers').factory('appHelperService', appHelperService);
    function appHelperService(ENV, $location, $state) {

        var pageDirection = void 0,
            locale = void 0;

        return {
            'getPageDirection': getPageDirection,
            'isPageDirectionRTL': isPageDirectionRTL,
            'getLocale': getLocale,
            'setLocale': setLocale,
            'assertLocaleByName': assertLocaleByName,
            'getHostName': getHostName,
            'getLocationHash': getLocationHash,
            'getLocationPath': getLocationPath,
            'getCurrentState': getCurrentState,
            'getCurrentStateData': getCurrentStateData,
            'assertStateByName': assertStateByName,
            'stateIncludes': stateIncludes,
            'searchParam': searchParam,
            'getISOLocale': getISOLocale,
            'isTrue': isTrue
        };

        /**
         * Returns whether the page direction is LTR or RTL
         * @return {[type]} [description]
         */
        function getPageDirection() {
            if (!pageDirection) {
                pageDirection = isArabic() ? 'rtl' : 'ltr';
            }

            return pageDirection;
        }

        /**
         * Asserts whether the page direction is RTL
         * @return {Boolean}
         */
        function isPageDirectionRTL() {
            return getPageDirection() === 'rtl';
        }

        /**
         * Asserts whetehr the locale is Arabic
         * @return {Boolean}
         */
        function isArabic() {
            var arabicLocales = ['ar-ar', 'ar-uea', 'ar-qa', 'ar-sa', 'ar-ae'],
                currentLocale = ENV.locale.toLowerCase();
            return arabicLocales.indexOf(currentLocale) > -1;
        }

        /**
         * Returns the current locale
         * @return {String} The current locale, e.g. en-global, or, fr-fr
         */
        function getLocale() {
            if (!locale) {
                locale = ENV.locale;
            }
            return locale;
        }

        /**
         * Overrides the current locale
         * @param {String} loc The new locale, e.g. en-global, or, fr-fr
         */
        function setLocale(loc) {
            locale = loc;
            return true;
        }

        /**
         * Returns the hostname
         * @return {String} The hostname, e.g. example.com
         */
        function getHostName() {
            return $location.host();
        }

        /**
         * Returns the content after the hash
         * @return {String} The hash
         */
        function getLocationHash() {
            return $location.hash();
        }

        /**
         * Returns the current path
         * @return {String} The path
         */
        function getLocationPath() {
            return $location.path();
        }

        /**
         * Returns the current state
         * @return {String} The current state
         */
        function getCurrentState() {
            return $state.current.name;
        }

        /**
         * Returns any available state data
         * @return {Object} The state data
         */
        function getCurrentStateData() {
            return $state.current.data || '';
        }

        /**
         * Asserts whether the current state matches the one given
         * @param  {String|Array} names   One or a collection of states to assert
         * @return {Boolean}
         */
        function assertStateByName(names) {
            if (!angular.isArray(names)) return getCurrentState() === names;
            return names.indexOf(getCurrentState()) > -1;
        }

        /**
         * Asserts whether the current locale matches the one given
         * @param  {String} name The locale to assert
         * @return {Boolean}
         */
        function assertLocaleByName(name) {
            if (!locale) locale = ENV.locale;
            return locale === name;
        }

        /**
         * Asserts whether the current state includes the one given
         * @param  {String} name The state to assert
         * @return {Boolean}
         */
        function stateIncludes(name) {
            return $state.includes(name);
        }

        /**
         * Searches the url parameters.
         * @param  {Array|String} name The parameter(s) to assert
         * @return {String} The content of the matched parameter
         */
        function searchParam(names) {
            var paramsObj = $location.search();
            if (!angular.isArray(names)) return paramsObj[names];

            var paramValue = void 0;
            _.forEachRight(names, function (name) {
                if (paramsObj[name]) paramValue = paramsObj[name];
            });
            return paramValue;
        }

        function getISOLocale() {
            return _.find(ENV.ISOConfig, ['locale', ENV.locale]);
        }

        /**
         * Returns true if the param passed:
         * - is a boolean === true
         * - is a string equals 'True' || 'Yes'
         * - is an array having the first item equals 'True' || 'Yes'
         * Returns false otherwise.
         * Case insensitive
         * @param o
         * @param variation string variation for 'True' || 'Yes'
         * @example
         * appHelperService.isTrue(value)
         * appHelperService.isTrue(value, 'active')
         * @return {boolean}
         */
        function isTrue(o, variation) {
            if (!o) return false;
            if (o === true) return o;

            var value = angular.isArray(o) ? o[0] : o;

            if (!value) return false;

            var valueLc = value.toLowerCase();
            return variation ? variation.toLowerCase() === valueLc : valueLc === 'true' || valueLc === 'yes';
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.helpers').factory('buyBlockHelperService', appHelperService);

    function appHelperService() {

        return {
            'hasPurchaseAsPurchaseType': hasPurchaseAsPurchaseType
        };

        function hasPurchaseAsPurchaseType(purchaseType) {

            var hasPurchase = purchaseType ? purchaseType === 'purchase' : true;

            return hasPurchase;
        }
    }
})();
'use strict';

/* global grecaptcha:false */
(function () {
    'use strict';

    marketoHelperService.$inject = ["$window", "$q", "angularLoad", "errorService", "ENV"];
    angular.module('kappGlobal.helpers').factory('marketoHelperService', marketoHelperService);

    function marketoHelperService($window, $q, angularLoad, errorService, ENV) {

        var siteKey = '6Lf2eUQUAAAAAC-GQSZ6R2pjePmmD6oA6F_3AV7j',
            lang = ENV.locale.substring(0, 2);

        return {
            'loadMarketo': loadMarketo,
            'insertElement': insertElement,
            'renderRecaptcha': renderRecaptcha,
            'validateForm': validateForm,
            'validateRecaptcha': validateRecaptcha,
            'getResponse': getResponse
        };

        function loadMarketo(id, nr, scope) {

            function loadForm() {
                var deferred = $q.defer();

                MktoForms2.loadForm('//app-sj06.marketo.com', id, nr, function (form) {
                    var submitButton = $window.document.querySelector('.mktoButtonRow .mktoButton[type="submit"]');
                    insertElement();
                    renderRecaptcha();

                    submitButton.addEventListener('click', submitHandler);

                    function submitHandler(e) {
                        e.preventDefault();
                        form.validate();

                        var res = validateForm(form);
                        if (res) form.submit();
                    }

                    // destroy submit button event handler

                    scope.$on('$destroy', function () {
                        submitButton.removeEventListener('click', submitHandler);
                    });

                    deferred.resolve();
                });

                return deferred.promise;
            }

            return $q.all([angularLoad.loadScript('//www.google.com/recaptcha/api.js?hl=' + lang), angularLoad.loadScript('//app-sj06.marketo.com/js/forms2/js/forms2.min.js')]).then(function () {
                return loadForm();
            }).catch(function (err) {
                errorService.warn(err);
            });
        }

        function insertElement() {
            var submitButton = $window.document.querySelector('.mktoButtonRow'),
                cDiv = $window.document.createElement('div');
            cDiv.setAttribute('id', 'g-recaptcha');

            return submitButton.parentNode.insertBefore(cDiv, submitButton);
        }

        function renderRecaptcha() {
            return grecaptcha.render('g-recaptcha', {
                'sitekey': siteKey
            });
        }

        function validateForm(form) {
            var vals = form.vals().subscriptionSingleOptIn || form.vals().consenttoPersonalDataProcessing;
            var agreeButton = form.getFormElem().find('#subscriptionSingleOptIn') || form.getFormElem().find('#consenttoPersonalDataProcessing');

            if (vals === 'no' && $(agreeButton).parent('div').hasClass('mktoRequired')) {
                form.showErrorMessage('"*" !', agreeButton);
            } else {
                return validateRecaptcha(form);
            }
        }

        function validateRecaptcha() {
            var recaptchaEl = $window.document.getElementById('g-recaptcha'),
                recaptchaResponse = getResponse();

            if (!recaptchaResponse) {
                recaptchaEl.classList.add('mktoInvalid');
                return false;
            } else {
                recaptchaEl.classList.remove('mktoInvalid');
                return true;
            }
        }

        function getResponse() {
            return grecaptcha.getResponse();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    rootScopeHelper.$inject = ["$rootScope"];
    angular.module('kappGlobal.helpers').factory('rootScopeHelper', rootScopeHelper);

    function rootScopeHelper($rootScope) {
        function on($scope, eventName, handler) {
            $scope.$on('$destroy', $rootScope.$on(eventName, handler));
        }

        return {
            'on': on
        };
    }
})();
'use strict';

(function () {
    'use strict';

    seoHelperService.$inject = ["$document", "$state", "windowHelperService", "ENV"];
    angular.module('kappGlobal.helpers').factory('seoHelperService', seoHelperService);
    function seoHelperService($document, $state, windowHelperService, ENV) {

        return {
            'setMeta': setMeta,
            'removeMeta': removeMeta,
            'getContentLocation': getContentLocation,
            'getDefaultBreadcrumbs': getDefaultBreadcrumbs,
            'parseBreadcrumbs': parseBreadcrumbs
        };

        /**
         * Parses the meta Object and sets meta tags if already existing
         * @param {Object} metaObj The meta object to parse
         */
        function setMeta(metaObj) {
            if (!angular.isObject(metaObj)) return false;

            for (var key in metaObj) {
                var tag = key.indexOf(':') === -1 ? $document[0].querySelector('meta[name=' + key + ']') : $document[0].querySelector('meta[name=' + ['key'] + ']');
                if (tag) {
                    tag.setAttribute('content', metaObj[key]);
                } else {
                    writeMeta(key);
                }
            }

            /**
             * Inserts new meta tag in the DOM
             * @param  {String} key The name of the tag
             */
            function writeMeta(key) {
                var node = $document[0].createElement('meta');
                node.name = key;
                node.content = metaObj[key];
                $document[0].getElementsByTagName('head')[0].appendChild(node);
            }
        }

        /**
         * Removes a meta tag from the DOM
         * @param  {String} name The meta tag to be removed
         */
        function removeMeta(name) {
            angular.element($document[0].querySelector('meta[name=' + name + ']')).remove();
        }

        function getContentLocation() {
            var contentLocation = $state.href($state.current.name).replace(/(\?|#).*/, '');
            var states = ['press-releases.details', 'press-center.details', 'in-the-news.details', 'resources-category.details', 'smb-resources-category.details', 'policy-blog-category.details'];
            if (contentLocation === '/' && (windowHelperService.getLocationHref().indexOf('kaspersky') > -1 || windowHelperService.isStaging())) contentLocation = '/homepage';
            // if (contentLocation === '/') contentLocation = '/homepage';
            if ($state.current.name === 'lrc-verdict' || $state.current.name === 'lrc-serial') {
                var str = contentLocation.substring(5),
                    path = ENV.locale === 'en-us' ? str.split('_')[4] : str.replace(/_.+/, '');

                contentLocation = '/lrc/verdicts' + (path ? '/' + path : '');
            }
            if ($state.current.name === 'b2c-resource-center' || $state.current.name === 'b2c-resource-center.category') {
                contentLocation = '/home-security' + contentLocation;
            } else if ($state.current.name === 'b2c-resource-center.category-details') {
                var clArr = contentLocation.split('/');
                contentLocation = contentLocation.replace('/' + clArr[clArr.length - 1], '');
                contentLocation = '/home-security' + contentLocation;
            } else if (states.indexOf($state.current.name) > -1) {
                var _clArr = contentLocation.split('/');
                contentLocation = contentLocation.replace('/' + _clArr[_clArr.length - 1], '');
            }
            return contentLocation;
        }

        function getDefaultBreadcrumbs(removeLink, contentLocation) {
            var urlArr = contentLocation.match(/\/?((?!\/).)*\/?/g).filter(function (item) {
                if (item && !item.match(/(index|http)/)) return item; //filter out unwanted stuff
            });
            var link = '',
                res = void 0;
            res = urlArr.map(function (item) {
                var textVal = item.replace(/(#|\?).*/, '').replace(/\.[a-z]+/i, '').replace(/\//ig, '').replace(/-/ig, ' ');
                link = link + item;
                if (textVal) textVal = textVal[0].toUpperCase() + textVal.slice(1);
                return { 'title': textVal, 'link': link.replace(/\/$/, '') };
            });
            res.unshift({ 'title': 'Home', 'link': '/' });
            if (removeLink) {
                // Check for encoded titles and decode them
                if (res[res.length - 1].title.match(/%[0-9a-f]{2}/i)) res[res.length - 1].title = decodeURIComponent(res[res.length - 1].title);
                // Remove link from last item making it unclickable
                res[res.length - 1].link = '';
            }
            return res;
        }

        function parseBreadcrumbs(breadcrumb) {
            return breadcrumb.reduce(function (prev, curr, index) {
                return !index ? prev + curr.title : prev + ' > ' + curr.title;
            }, '');
        }
    }
})();
'use strict';

(function () {
    'use strict';

    translationsHelperService.$inject = ["directiveData"];
    angular.module('kappGlobal.helpers').factory('translationsHelperService', translationsHelperService);
    function translationsHelperService(directiveData) {

        return {
            'getCategoryTranslation': getCategoryTranslation,
            'getRepoTranslations': getRepoTranslations,
            'getPageTitleAppendix': getPageTitleAppendix
        };

        function getCategoryTranslation(id) {
            var translatedTerm = void 0;
            return getCategoryTranslations().then(function (response) {
                if (!response || !response.translations) return false;
                translatedTerm = _.find(response.translations, function (obj) {
                    return obj.termKey === id;
                });
                return translatedTerm.termTranslation ? translatedTerm.termTranslation : id;
            });
        }

        function getCategoryTranslations() {
            return directiveData.getLocal('categories-translation').then(function (response) {
                return response.data.fields;
            });
        }

        function getPageTitleAppendix() {
            return directiveData.getLocal('general-translations').then(function (response) {
                var appendix = 'Kaspersky Labs';
                if (response && response.data && response.data.fields) appendix = response.data.fields.pageTitleAppendix;
                return appendix;
            });
        }

        function getRepoTranslations() {
            return directiveData.getLocal('repo-translation').then(function (response) {
                return response.data.fields && response.data.fields.translations ? mapObjectFromArray(response.data.fields.translations) : null;
            });
        }

        /**
         * [mapObjectFromArray description]
         * @param  {object} obj The tridion object in this format: [{"termKey": "keyA", "termTranslation": "translA"}, {"termKey": "keyB", "termTranslation": "translB"}]
         * @return {object}     A new object in this format: {"keyA": "TranslA", "keyB": "translB""}
         */
        function mapObjectFromArray(obj) {
            return _.fromPairs(obj.map(function (item) {
                return [item.termKey, item.termTranslation];
            }));
        }
    }
})();
'use strict';

(function () {
    'use strict';

    windowHelperService.$inject = ["$window", "$location", "$anchorScroll", "translationsHelperService"];
    angular.module('kappGlobal.helpers').factory('windowHelperService', windowHelperService);
    function windowHelperService($window, $location, $anchorScroll, translationsHelperService) {
        var cachedAppendix = void 0;

        return {
            'getIPCountry': getIPCountry,
            'getGeoLocation': getGeoLocation,
            'setWindowTitle': setWindowTitle,
            'goToUrl': goToUrl,
            'getLocationHref': getLocationHref,
            'getCanonicalUrl': getCanonicalUrl,
            'isMobile': isMobile,
            'getDomainName': getDomainName,
            'getPathName': getPathName,
            'navigateUserTo': navigateUserTo,
            'isStaging': isStaging
        };

        function getIPCountry() {
            return $window.IPCountry || '';
        }

        function getGeoLocation() {
            return $window.navigator.geolocation;
        }

        function setWindowTitle(title) {
            if (cachedAppendix) return setTitle(cachedAppendix);
            translationsHelperService.getPageTitleAppendix().then(function (response) {
                var country = $location.search().country;
                cachedAppendix = country && country.toLowerCase() === 'ca' ? response.replace('US', 'CA') : response;
                return setTitle(cachedAppendix);
            });

            function setTitle(appendix) {
                $window.document.title = title ? title + ' | ' + appendix : appendix;
            }
        }

        function goToUrl(url, newTab) {
            if (newTab) {
                return $window.open(url, '_blank');
            }
            return $window.location.href = url;
        }

        function getLocationHref() {
            return $window.location.href;
        }

        function getCanonicalUrl() {
            return fixCanonicalUrl(getLocationHref());
        }

        function fixCanonicalUrl(url) {
            var newUrl = url.split(/(?=[;?&#])/)[0];
            return newUrl;
        }

        function getDomainName() {
            if (!$window.location.origin) $window.location.origin = $window.location.protocol + '//' + $window.location.hostname + ($window.location.port ? ':' + $window.location.port : '');

            return $window.location.origin;
        }

        function getPathName() {
            return $window.location.pathname;
        }

        function isMobile() {
            return $window.innerWidth < 769;
        }

        function isAnchor(link) {
            return link.indexOf('#') === 0;
        }

        function isLink(link) {
            return link.indexOf('http') === 0 || link.indexOf('/') === 0;
        }

        function navigateUserTo(id, $event, isExternal, offset) {
            if ($event) $event.preventDefault();
            if (isAnchor(id)) {
                id = id.substring(1);
            }

            if (isExternal || isLink(id)) {
                $window.location.href = id;
            } else {
                if (offset) $anchorScroll.yOffset = offset;
                $location.hash(id);
                $anchorScroll();
            }
        }
        function isStaging() {
            var isStaging = 0,
                isDebug = $location.search().debug;
            if ((getLocationHref().match(/localhost|ngdev|ngtst|stg|127.0.0.1/) || isDebug) && isDebug !== 'prod') isStaging = 1;
            return isStaging;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    imageManagerService.$inject = ["$http", "localStorageService", "ENV", "errorService"];
    angular.module('kappGlobal.imageManager').factory('imageManagerService', imageManagerService);

    function imageManagerService($http, localStorageService, ENV, errorService) {

        var config = {
            'serverUrl': ENV.apiServer,
            'cacheName': 'kapp-randomisedImages',
            'fallbackImage': '/content/' + ENV.locale + '/images/repository/smb/fallback/photo-6.jpg',
            'prRepoFallbackImagesPath': '/content/' + ENV.locale + '/repository/fall-back/resources-fall-back-images.json'
        };

        return {
            'getDefaultImage': getDefaultImage,
            'getResourceImage': getResourceImage,
            'getResourceThumb': getResourceThumb,
            'getRandomizedImage': getRandomizedImage,
            'activateRandomImagesCache': activateRandomImagesCache
        };

        function getDefaultImage(image) {
            if (angular.isUndefined(image) || image.length < 1) {
                return '' + ENV.apiServer + config.fallbackImage;
            }
            if (image.constructor === Array) image = image[0];
            return config.serverUrl + '/' + image;
        }

        function getRandomizedImage(image) {
            if (angular.isUndefined(image) || image.length < 1) {
                return generateRandomImage();
            }
            if (image.constructor === Array) image = image[0];
            return config.serverUrl + '/' + image;
        }

        function generateRandomImage() {
            var cached = localStorageService.get(config.cacheName);
            if (cached !== null) {
                var rand = Math.random() * cached.length - 1;
                rand = rand < 0 ? 1 : rand;
                return cached[Math.floor(rand)];
            }
            return activateRandomImagesCache();
        }

        function activateRandomImagesCache() {
            if (!localStorageService.get(config.cacheName)) {
                return getFallBackImages().then(function (response) {
                    var imagesArray = [];
                    response.data['fields']['images'].map(function (image) {
                        imagesArray.push(config.serverUrl + '/' + image['fallBackImage']);
                    });
                    localStorageService.set(config.cacheName, imagesArray, 1440);
                    return imagesArray[Math.floor(Math.random() * imagesArray.length) - 1];
                }).catch(function (rejection) {
                    errorService.warn(rejection);
                });
            }
        }

        function getFallBackImages() {
            return $http.get(decodeURIComponent('' + config.serverUrl + config.prRepoFallbackImagesPath));
        }

        function getResourceImage(linkResponse) {
            var image = linkResponse['fields']['image'],
                thumb = linkResponse['fields']['thumbnail_image'];
            image = hasContent(image) ? image : thumb;
            if (angular.isUndefined(image) || image.length === 0) {
                image = config.fallbackImage;
            }
            image = constructUrl(image);
            return image;
        }

        function getResourceThumb(linkResponse) {
            var image = linkResponse['fields']['image'],
                thumb = linkResponse['fields']['thumbnail_image'];
            image = hasContent(thumb) ? thumb : image;
            if (angular.isUndefined(image) || image.length === 0) {
                image = config.fallbackImage;
            }
            image = constructUrl(image);
            return image;
        }

        function hasContent(content) {
            return angular.isDefined(content) && content.length > 0;
        }

        function constructUrl(imagePath) {
            if (imagePath.constructor === Array) imagePath = imagePath[0];
            if (imagePath.match(config.serverUrl)) {
                return imagePath.replace(config.serverUrl, '');
            }
            return imagePath;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    mapperService.$inject = ["imageManagerService"];
    angular.module('kappGlobal.mapper').factory('repoMapperService', mapperService);

    function mapperService(imageManagerService) {
        var _categoryNameSplitter = '::';

        return {
            'mapRepositoryLinkFields': mapRepositoryLinkFields,
            'mapRepositoryHeaderFields': mapRepositoryHeaderFields,
            'mapBlogFields': mapBlogFields,
            'mapBlogResourceFields': mapBlogResourceFields,
            'mapResourcesFields': mapResourcesFields
        };

        function mapRepositoryLinkFields(linkResponse, url) {
            return {
                'body': linkResponse['fields']['body'],
                'boost': linkResponse['fields']['boost'],
                'category': mapCategory(linkResponse['fields']['category']),
                'categoryName': getTitle(linkResponse['fields']['category']),
                'date_publication_start': linkResponse['fields']['date_publication_start'],
                'image': imageManagerService.getResourceImage(linkResponse),
                'thumb': imageManagerService.getResourceThumb(linkResponse),
                'id': linkResponse['id'],
                'labels': linkResponse['fields']['labels'],
                'link': mapLinkFields(linkResponse['fields']['link']),
                'pubDate': new Date(linkResponse['pubdate']),
                'repository_type': linkResponse['fields']['repository_type'],
                'schemaName': linkResponse['schemaName'],
                'subtitle': linkResponse['fields']['subtitle'],
                'summary': linkResponse['fields']['summary'],
                'subcategory': mapCategory(linkResponse['fields']['subcategory']),
                'subcategoryTitle': getTitle(linkResponse['fields']['subcategory']),
                'title': linkResponse['fields']['title'],
                'url': url,
                'video': linkResponse['fields'] && linkResponse['fields']['video'] ? linkResponse['fields']['video'].trim() : '',
                'videoTitle': linkResponse['fields']['video_title'],
                'isVideoContent': angular.isDefined(linkResponse['fields']['video'])
            };
        }

        function mapRepositoryHeaderFields(linkResponse) {
            return {
                'id': linkResponse['id'],
                'title': linkResponse['title'],
                'pubDate': new Date(linkResponse['pubdate']),
                'schemaName': linkResponse['schemaName'],
                'headerTitle': linkResponse['fields']['headerTitle'],
                'headerSubTitle': linkResponse['fields']['headerSubTitle'],
                'headerDescription': linkResponse['fields']['headerDescription'],
                'headerBgImg': imageManagerService.getRandomizedImage(linkResponse['fields']['headerBgImg']),
                'buttons': linkResponse['fields']['buttons'],
                'menu': linkResponse['fields']['menu'],
                'filters': linkResponse['fields']['filters']
            };
        }

        function mapBlogFields(linkResponse) {
            return {
                'id': linkResponse['id'],
                'title': linkResponse['title'],
                'pubDate': new Date(linkResponse['pubdate']),
                'schemaName': linkResponse['schemaName'],
                'blogSectionTitle': linkResponse['fields']['title'],
                'resources': linkResponse['fields']['resources']
            };
        }

        function mapBlogResourceFields(resource) {
            return {
                'resourceTitle': resource['resourceTitle'],
                'resourceSubTitle': resource['resourceSubTitle'],
                'resourceExcerpt': resource['resourceExcerpt'],
                'resourceExcerptSummary': resource['resourceExcerptSummary'],
                'resourceImage': imageManagerService.getRandomizedImage(resource['resourceImage']),
                'resourceImageAlt': resource['resourceImageAlt'],
                'resourceLogo': imageManagerService.getRandomizedImage(resource['resourceLogo']),
                'resourceLogoAlt': resource['resourceLogoAlt'],
                'resourceLink': resource['resourceLink'],
                'resourceLinkText': resource['resourceLinkText'],
                'resourceLinkTarget': resource['resourceLinkTarget']
            };
        }

        function mapResourcesFields(resource) {
            return {
                'resourceCategory': resource['resourceCategory'],
                'resourceTitle': resource['resourceTitle'],
                'resourceSummary': resource['resourceSummary'],
                'resourceImage': imageManagerService.getRandomizedImage(resource['resourceImage']),
                'resourceLink': resource['resourceLink']
            };
        }

        function mapCategory(values) {
            var array = [];
            if (!values) return array;
            values.map(function (value) {
                array.unshift(mapContentSubCategoryFields(value));
            });
            return array;
        }

        function mapLinkFields(link) {
            if (!link) return {};
            return {
                'text': link['text'],
                'link': link['link'],
                'isExternal': link['isExternal'],
                'class': link['class']
            };
        }

        function mapContentSubCategoryFields(subcategory) {
            if (!subcategory) return {};
            return {
                'id': subcategory['id'],
                'key': subcategory['key'],
                'title': subcategory['title'],
                'description': subcategory['description']
            };
        }

        function getTitle(value) {
            if (!value || value.length < 1) return '';
            var valueTitle = value[0]['title'],
                splitter = valueTitle.split(_categoryNameSplitter);
            if (splitter.length > 1) {
                valueTitle = splitter[1];
            }
            return valueTitle;
        }
    }
})();
'use strict';

/**
 * Created by Fedotov_Al on 17.10.2016.
 */
(function () {
    'use strict';

    angular.module('kappGlobal.ngSrcLocaleHack').filter('addLocalRoot', ["ENV", function (ENV) {
        return function (arg) {
            var sourceLink = arg;
            if (arg) {
                if (sourceLink.match(/content\/en-global\//)) {

                    sourceLink = sourceLink.replace(/content\/en-global\//, '');
                }
                sourceLink = 'content/' + ENV.locale + '/' + sourceLink;
            }

            return sourceLink;
        };
    }]);
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutAccordion', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/accordion/templates/accordion.html',
        'controller': 'aboutAccordionController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutAccordionController.$inject = ["$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutAccordionController', aboutAccordionController);

    function aboutAccordionController($timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('about-accordion').then(function (response) {
                ctrl.data = response.data.fields;

                $timeout(function () {
                    //////////////////////////////////////////
                    // Accordion
                    //////////////////////////////////////////

                    $('.accordion-section > li > h4').click(function () {
                        $(this).parent().toggleClass('open');
                        $(this).siblings().slideToggle();
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutAnchorHeader', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/anchor-header/templates/anchor-header.html',
        'controller': 'aboutAnchorHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutAnchorHeaderController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutAnchorHeaderController', aboutAnchorHeaderController);

    function aboutAnchorHeaderController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('about-anchor-header').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScript() {
            $(document).ready(function () {
                var $mainMenu = $('#site-header .main-menu');
                $('.about-us-page-header .cta-scroll').click(function (e) {
                    e.preventDefault();
                    var $scrollTo = $($(this).attr('href'));
                    if ($scrollTo.length) {
                        $('html,body').animate({
                            'scrollTop': $scrollTo.offset().top - $mainMenu.outerHeight(true)
                        }, 1000);
                    }
                });
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutAwardsList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/awards-list/templates/awards-list.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutArticleBannerText', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/article-banner-text/templates/article-banner-text.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutBenefitsList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/benefits-list/templates/benefits-list.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutAwardsSmall', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/awards-small/templates/awards-small.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutBot', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/bot/templates/bot.html',
        'controller': 'aboutBotController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutBotController.$inject = ["directiveData", "errorService", "botDataService", "$scope", "$sanitize"];
    angular.module('kappGlobal.about').controller('aboutBotController', aboutBotController);

    function aboutBotController(directiveData, errorService, botDataService, $scope, $sanitize) {
        var ctrl = this;
        ctrl.answer = '';
        ctrl.question = '';
        ctrl.$onInit = activate;
        ctrl.sendQ = sendQ;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'about-bot').then(function (response) {
                ctrl.data = response.data.fields;
            }, handleRejection);
        }

        // Sanitization of an input
        $scope.$watch('$ctrl.question', function (newV) {
            ctrl.question = $sanitize(newV.replace(/<[^>]+>/gm, ''));
        });

        function sendQ() {
            return botDataService.getBotAnswer(ctrl.question).then(function (response) {
                if (!response) return;
                ctrl.answer = response.data.answers[0].answer.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
                if (response.data.answers[0].score === 0) ctrl.answer = ctrl.data.failedAnswer;
                return ctrl.answer;
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    botDataFactory.$inject = ["$http", "ENV", "errorService"];
    angular.module('kappGlobal.about').factory('botDataService', botDataFactory);

    function botDataFactory($http, ENV, errorService) {
        return {
            'getBotAnswer': getBotAnswer
        };

        function getBotAnswer(question) {
            var country = ENV.locale.substring(3, 5).toUpperCase(),
                botKeysIDs = {
                'GL': { 'key': '39fbefe45c6240d2a2fde14fc86dee14', 'id': '0fa5d06d-103d-47ea-9c81-7406f8307953' },
                'GB': { 'key': '', 'id': '' },
                'US': { 'key': '', 'id': '' },
                'DE': { 'key': '', 'id': '' },
                'MX': { 'key': '', 'id': '' },
                'ES': { 'key': '', 'id': '' },
                'FR': { 'key': '', 'id': '' },
                'IT': { 'key': '', 'id': '' },
                'NL': { 'key': '', 'id': '' },
                'BR': { 'key': '', 'id': '' },
                'TR': { 'key': '', 'id': '' },
                'AU': { 'key': '', 'id': '' },
                'ZA': { 'key': '', 'id': '' },
                'IN': { 'key': '', 'id': '' },
                'AE': { 'key': '', 'id': '' },
                'SE': { 'key': '', 'id': '' }
            },
                config = {
                'headers': {
                    'Ocp-Apim-Subscription-Key': '',
                    'Content-Type': 'application/json'
                }
            },
                localID = '';

            if (country in botKeysIDs) {
                localID = botKeysIDs[country]['id'];
                config.headers['Ocp-Apim-Subscription-Key'] = botKeysIDs[country]['key'];
            } else {
                localID = botKeysIDs['GL']['id'];
                config.headers['Ocp-Apim-Subscription-Key'] = botKeysIDs['GL']['key'];
            }

            return $http.post('https://westus.api.cognitive.microsoft.com/qnamaker/v2.0/knowledgebases/' + localID + '/generateAnswer', { 'question': question }, config).then(function (response) {
                return response;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutCalendarSearch', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/calendar-search/templates/calendar-search.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutContent', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/content/templates/content.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutFeaturesBlock', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/features-block/templates/features-block.html',
        'controller': 'aboutController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutHeadQuartersMap', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/head-quarters-map/templates/head-quarters-map.html',
        'controller': 'aboutHeadQuartersMapController'
    });
})();
'use strict';

/*eslint angular/controller-as: 1*/
/*TODO Fix the above*/
(function () {
    'use strict';

    aboutHeadQuartersMapController.$inject = ["$scope", "$window", "directiveData", "angularLoad", "ENV", "errorService", "ngDialog"];
    angular.module('kappGlobal.about').controller('aboutHeadQuartersMapController', aboutHeadQuartersMapController);
    function aboutHeadQuartersMapController($scope, $window, directiveData, angularLoad, ENV, errorService, ngDialog) {
        var ctrl = this;
        ctrl.map = undefined;
        ctrl.data = { 'hqs': [] };
        ctrl.tab = 0;
        ctrl.hq = {};
        ctrl.setTab = setTab;
        ctrl.isSet = isSet;
        ctrl.$onInit = activate;
        ctrl.openLRCDialog = openLRCDialog;

        function activate() {
            return getData().then(function () {
                loadMap();
            });
        }

        function getData() {
            return directiveData.getByUrl('about-headquaters-map').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.tab = 0;
                ctrl.hq = ctrl.data.hqs[0];

                if (ctrl.data.localSec) {
                    var localOffice = {
                        'hqTitle': ctrl.data.localOfficeTitle,
                        'lat': ctrl.data.localLat,
                        'lon': ctrl.data.localLon,
                        'link': ctrl.data.localLink,
                        'section': ctrl.data.localSec,
                        'showLrcBalancer': ctrl.data.myKasperskyBalancer && ctrl.data.myKasperskyBalancer[0],
                        'lrcBalancerText': ctrl.data.myKasperskyBalancerButton
                    };
                    ctrl.data.hqs.push(localOffice);
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function loadMap() {
            angularLoad.loadScript('//maps.googleapis.com/maps/api/js?key=AIzaSyAlE5csEf7aBVKLISsJ2purdmcI1SjbzKQ').then(function () {
                setupMap();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function setupMap() {
            var marker = void 0,
                i = void 0;

            // Map options
            var mapOptions = {
                // Zoom (smaller number to zoom out)
                'zoom': 13,

                // Initial map location
                'center': new google.maps.LatLng(ctrl.data.hqs[0].lat, ctrl.data.hqs[0].lon),

                // Kaspersky map style
                'styles': [{ 'featureType': 'administrative', 'elementType': 'labels.text.fill', 'stylers': [{ 'color': '#444444' }] }, { 'featureType': 'landscape', 'elementType': 'all', 'stylers': [{ 'color': '#f2f2f2' }] }, {
                    'featureType': 'poi',
                    'elementType': 'all',
                    'stylers': [{ 'visibility': 'off' }]
                }, { 'featureType': 'road', 'elementType': 'all', 'stylers': [{ 'saturation': -100 }, { 'lightness': 45 }] }, {
                    'featureType': 'road.highway',
                    'elementType': 'all',
                    'stylers': [{ 'visibility': 'simplified' }]
                }, { 'featureType': 'road.highway', 'elementType': 'geometry', 'stylers': [{ 'color': '#ed2939' }, { 'weight': '1.68' }, { 'lightness': '9' }] }, {
                    'featureType': 'road.arterial',
                    'elementType': 'labels.icon',
                    'stylers': [{ 'visibility': 'off' }]
                }, { 'featureType': 'transit', 'elementType': 'all', 'stylers': [{ 'visibility': 'off' }] }, { 'featureType': 'water', 'elementType': 'all', 'stylers': [{ 'color': '#7bd0f2' }, { 'visibility': 'on' }] }]
            };

            // Check if map element exists in DOM
            var mapElement = $window.document.getElementById('map'),
                infoWindow = new google.maps.InfoWindow();

            if (mapElement) {
                // Create a new map
                ctrl.map = new google.maps.Map(mapElement, mapOptions);

                // If mapLocations variable is set generate new markers and their names
                for (i = 0; i < ctrl.data.hqs.length; i++) {

                    // Generate markers
                    marker = new google.maps.Marker({
                        'position': new google.maps.LatLng(ctrl.data.hqs[i].lat, ctrl.data.hqs[i].lon),
                        'map': ctrl.map
                    });

                    // Add info windows to markers
                    google.maps.event.addListener(marker, 'click', function (marker, i) {
                        return function () {
                            infoWindow.setContent(ctrl.data.hqs[i].hqTitle);
                            infoWindow.open(ctrl.map, marker);
                        };
                    }(marker, i));
                }
            }

            // Set the map
            marker.setMap(ctrl.map);

            // Set local office as starting location or first element
            if (ENV.locale === 'en-us') {
                var usHQIndex = _.findIndex(ctrl.data.hqs, ['link', '#americas-headquarters']);
                setTab(null, usHQIndex, ctrl.data.hqs[usHQIndex].lat, ctrl.data.hqs[usHQIndex].lon, ctrl.data.hqs[usHQIndex]);
            } else if (ctrl.data.localSec) {
                setTab(null, ctrl.data.hqs.length - 1, ctrl.data.hqs[ctrl.data.hqs.length - 1].lat, ctrl.data.hqs[ctrl.data.hqs.length - 1].lon, ctrl.data.hqs[ctrl.data.hqs.length - 1]);
            } else {
                var startingLocation = new google.maps.LatLng(ctrl.data.hqs[0].lat, ctrl.data.hqs[0].lon);
                ctrl.map.panTo(startingLocation);
            }

            // Zoom fix (map zooms out on trackpads)
            //  - pointer events are disabled in CSS and on click enabled again
            //  - mouse leave disables pointer events agai
            //  - only for elements with ".map" and ".zoom-fix" classes
            $('.map.zoom-fix').click(function () {
                $('.map.zoom-fix > div').css('pointer-events', 'auto');
            });

            $('.map.zoom-fix').mouseleave(function () {
                $('.map.zoom-fix > div').css('pointer-events', 'none');
            });
        }

        function setTab(event, newTab, lat, lon, obj) {
            if (event) event.preventDefault();
            ctrl.tab = newTab || findIndexOfHq(obj);
            ctrl.hq = obj || ctrl.data.hqs[ctrl.tab];
            var newLocation = new google.maps.LatLng(lat, lon);
            ctrl.map.panTo(newLocation);
        }

        function isSet(tabNum) {
            return ctrl.tab === tabNum;
        }

        function findIndexOfHq(obj) {
            var index = 0;
            if (!obj) return index;
            for (var i = 0, length = ctrl.data.hqs.length; i < length; i++) {
                var hq = ctrl.data.hqs[i];
                if (hq.hqTitle !== obj.hqTitle) continue;
                index = i;
                break;
            }
            return index;
        }

        function openLRCDialog() {
            ngDialog.open({
                'template': '<div class="modal-header">\n                        <a class="modal-button modal-close" aria-label="Dismiss" ng-click="closeThisDialog(0)">\n                          <span class="font-icons icon-cancel"></span>\n                        </a>\n                    </div>\n                    <lrc-serial template="lrc-serial-dialog"></lrc-serial>',
                'plain': true,
                'className': 'ngdialog-flyout ngdialog--lrc-dialog',
                'data': ctrl,
                'showClose': false,
                'scope': $scope
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('licenseList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/license-list/template/license-list.template.html',
        'controller': 'licenseListController'
    });
})();
'use strict';

(function () {
    'use strict';

    licenseListController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('licenseListController', licenseListController);

    function licenseListController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        var getData = function getData() {
            directiveData.getByUrl('license-list').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        };

        function activate() {
            getData();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutNewsList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/news-list/templates/news-list.html',
        'controller': 'aboutNewsListController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutNewsListController.$inject = ["$http", "$scope", "directiveData", "errorService", "ngDialog"];
    angular.module('kappGlobal.about').controller('aboutNewsListController', aboutNewsListController);

    function aboutNewsListController($http, $scope, directiveData, errorService, ngDialog) {
        var ctrl = this;
        ctrl.$onInit = activate;
        ctrl.openNewsPopup = openNewsPopup;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'about-news-list').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.news.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        $http.get(item).then(function (response) {
                            return ctrl.data.news[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }

        function openNewsPopup(idx, $event) {
            if ($event) $event.preventDefault();
            ctrl.idx = idx;
            ngDialog.open({
                'template': '/resources/template/html/modules/about/components/news-list/templates/news-list-popup.html',
                'className': 'ngdialog-flyout',
                'data': ctrl,
                'scope': $scope
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutItemHeroBanner', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/item-hero-banner/templates/item-hero-banner.html',
        'controller': 'aboutController'
    });
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    angular.module('kappGlobal.about').component('pressCategories', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'pressCategoriesController',
        'templateUrl': '/resources/template/html/modules/about/components/press-categories/templates/press-categories.template.html'
    });
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    pressCategoriesController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('pressCategoriesController', pressCategoriesController);

    function pressCategoriesController(directiveData, errorService) {
        var ctrl = this;

        ctrl.$onInit = activate();

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl('categories-section').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    angular.module('kappGlobal.about').component('pressCategoryDetails', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'pressCategoryDetailsController',
        'templateUrl': '/resources/template/html/modules/about/components/press-category-details/templates/press-category-details.template.html'
    });
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    pressCategoryDetailsController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('pressCategoryDetailsController', pressCategoryDetailsController);

    function pressCategoryDetailsController(directiveData, errorService) {
        var ctrl = this;

        ctrl.$onInit = activate();

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl('gallery-details').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    angular.module('kappGlobal.about').component('pressContacts', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'pressContactsController',
        'templateUrl': '/resources/template/html/modules/about/components/press-contacts/templates/press-contacts.template.html'
    });
})();
'use strict';

/**
 * Created by Fedotov_Al on 21.06.2017.
 */
(function () {
    'use strict';

    pressContactsController.$inject = ["directiveData", "$timeout", "popup", "$element", "errorService"];
    angular.module('kappGlobal.about').controller('pressContactsController', pressContactsController);

    function pressContactsController(directiveData, $timeout, popup, $element, errorService) {
        var ctrl = this;

        ctrl.$onInit = activate();

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl('contacts').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            popup.imageGallery($element);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutStoryList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/story-list/templates/story-list.html',
        'controller': 'aboutStoryListController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutStoryListController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutStoryListController', aboutStoryListController);

    function aboutStoryListController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'about-story-list').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutTeamGrid', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/team-grid/templates/team-grid.html',
        'controller': 'aboutTeamGridController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutTeamGridController.$inject = ["$http", "directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutTeamGridController', aboutTeamGridController);

    function aboutTeamGridController($http, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = { 'teams': [] };
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('about-team-grid').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.teams.forEach(function (item, index1) {
                    item.items.forEach(function (item, index2) {
                        if (item.match(/\.json/)) {
                            return $http.get(item).then(function (response) {
                                return ctrl.data.teams[index1].items[index2] = response.data.fields;
                            }, handleRejection);
                        }
                    });
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutVideoBigHeader', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/video-big-header/templates/video-big-header.html',
        'controller': 'aboutVideoBigHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutVideoBigHeaderController.$inject = ["$element", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutVideoBigHeaderController', aboutVideoBigHeaderController);

    function aboutVideoBigHeaderController($element, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('about-video-big-header').then(function (response) {
                ctrl.data = response.data.fields;

                // About us magnific popup
                $timeout(function () {

                    if (!ctrl.data.link) {
                        $($element).find('.about-us-hero-video button').css('background-image', 'none');
                    }

                    $($element).find('.about-us-hero-video .popup-video, .about-us-page-header .cta-play').magnificPopup({
                        'type': 'iframe',
                        'mainClass': 'mfp-fade',
                        'removalDelay': 160,
                        'preloader': false,
                        'fixedContentPos': false
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.about').component('aboutVideoButtonHeader', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/about/components/video-button-header/templates/video-button-header.html',
        'controller': 'aboutVideoButtonHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    aboutVideoButtonHeaderController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.about').controller('aboutVideoButtonHeaderController', aboutVideoButtonHeaderController);
    function aboutVideoButtonHeaderController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('about-video-button-header').then(function (response) {
                ctrl.data = response.data.fields;

                //////////////////////////////////////////
                // About us magnific popup
                //////////////////////////////////////////

                angular.element(document).ready(function () {
                    $('.about-us-hero-video .popup-video, .about-us-page-header .cta-play').magnificPopup({
                        'type': 'iframe',
                        'mainClass': 'mfp-fade',
                        'removalDelay': 160,
                        'preloader': false,
                        'fixedContentPos': false
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bAccordion', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/accordion/templates/b2b-accordion.template.html',
        'controller': 'b2bAccordionController'
    });
})();
'use strict';

(function () {
    b2bAccordionController.$inject = ["directiveData", "$element", "$timeout", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bAccordionController', b2bAccordionController);

    function b2bAccordionController(directiveData, $element, $timeout, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl('b2b-accordion').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            }).then(function () {
                $timeout(function () {
                    $element.find('li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                        $(this).parent().toggleClass('open');
                        $(this).siblings().slideToggle();
                    });
                });
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bApplicationsList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/applications-list/templates/applications-list.template.html',
        'controller': 'b2bApplicationsListController'
    });
})();
'use strict';

(function () {
    'use strict';

    b2bApplicationsListController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bApplicationsListController', b2bApplicationsListController);

    function b2bApplicationsListController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        //TODO: remove timeout after more testing
        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'b2b-applications-list').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bBottomBar', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/bottom-bar/templates/bottom-bar.html',
        'controller': 'bottomBarController'
    });
})();
'use strict';

(function () {
    'use strict';

    bottomBarController.$inject = ["directiveData", "$state", "errorService"];
    angular.module('kappGlobal.b2b').controller('bottomBarController', bottomBarController);

    function bottomBarController(directiveData, $state, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            var section = '';

            if ($state.includes('vsb')) section = '/small-business-security';
            if ($state.includes('smb')) section = '/small-to-medium-business-security';

            return directiveData.getByUrl(ctrl.resource || 'b2b-bottom-bar').then(function (response) {
                if (response && response.data.fields.overrideShared && response.data.fields.overrideShared[0] === 'True') {
                    ctrl.data = response.data.fields;
                } else {
                    return directiveData.getByUrl(ctrl.resource || section + '/b2b-bottom-bar.json').then(function (response) {
                        ctrl.data = response.data.fields;
                    }, function (rejection) {
                        errorService.warn(rejection);
                    });
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bCtaBar', {
        'templateUrl': '/resources/template/html/modules/b2b/components/cta-bar/templates/cta-bar.template.html',
        'controller': 'b2bController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bInfoToggle', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/info-toggle/templates/info-toggle.template.html',
        'controller': 'b2bInfoToggleController'
    });
})();
'use strict';

(function () {
    'use strict';

    b2bInfoToggleController.$inject = ["$element", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bInfoToggleController', b2bInfoToggleController);

    function b2bInfoToggleController($element, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        //TODO: remove time out
        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'info-toggle').then(function (response) {
                ctrl.data = response.data.fields;

                $timeout(function () {
                    //////////////////////////////////////////
                    // Global list slideToggle
                    //////////////////////////////////////////

                    $($element).find('.toggle-button').click(function (e) {
                        e.preventDefault();

                        var $this = $(this);

                        $this.closest('.toggle-container').find('.toggle-content').slideToggle();
                        $this.closest('.toggle-container').toggleClass('open');
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2b').component('b2bMiniSidebar', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/mini-sidebar/templates/b2b-mini-sidebar.template.html',
        'controller': 'b2bMiniSidebarController'
    });
})();
'use strict';

(function () {
    'use strict';

    b2bMiniSidebarController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bMiniSidebarController', b2bMiniSidebarController);

    function b2bMiniSidebarController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl('b2b-mini-sidebar').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bProductDescription', {
        'multiElement': true,
        'controller': 'b2bProductDescriptionController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'default';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/b2b/components/product-description/templates/product-description-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    b2bProductDescriptionController.$inject = ["$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bProductDescriptionController', b2bProductDescriptionController);

    function b2bProductDescriptionController($timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        //TODO: remove timeout
        function getData() {
            return directiveData.getByUrl('product-description').then(function (response) {
                ctrl.data = response.data.fields;

                $timeout(function () {

                    //////////////////////////////////////////////////////
                    // Tabs
                    //////////////////////////////////////////////////////

                    $('.tab-title a').on('click', function (e) {
                        e.preventDefault();
                        var $this = $(this);
                        var $parent = $this.parent();

                        // Get the name of tab content that should be controled
                        var current = $parent.closest('.tabs-title-wrapper').attr('data-tab');

                        // Remove selected class from all tab titles and add it to the one just clicked
                        $('.tabs-title-wrapper[data-tab=\'' + current + '\'] .tab-title').removeClass('selected');
                        $parent.addClass('selected');

                        // Check clicked link href and show matching tab content
                        var tab = $this.attr('href');
                        $('.tab-content-wrapper[data-tab=\'' + current + '\'] .tab-content-single').not(tab).removeClass('tab-show');
                        $(tab).addClass('tab-show');
                    });

                    //////////////////////////////////////////
                    // Tabs desktop -> Dropdown mobile
                    //////////////////////////////////////////

                    // Get the name of currently active tab for mobile list
                    var SelectedName = $('.tab-nav').parent().find('ul.tabs li.selected a').text();

                    $('.tab-nav').append('<div class="tab-label">' + SelectedName + '</div>');
                    $('.tab-nav').click(function (e) {
                        e.stopPropagation();
                        $(this).toggleClass('active');
                    });

                    // Close it if user clicks outside
                    $('body').click(function () {
                        $('.tab-nav').removeClass('active');
                    });

                    $('.tab-nav .tabs').click(function (e) {
                        e.stopPropagation();
                    });

                    // Check when item is clicked and update active tab label
                    $('.tab-nav .tabs li').click(function (e) {
                        e.preventDefault();
                        var $this = $(this);
                        $this.parent().siblings().remove();
                        $this.closest('.tab-nav').append('<div class=tab-label></div>');
                        $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                        $this.parent().parent().toggleClass('active');
                    });

                    //////////////////////////////////////////
                    // Accordion
                    //////////////////////////////////////////

                    $('.accordion-section > li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                        $(this).parent().toggleClass('open');
                        $(this).siblings().slideToggle();
                    });

                    //////////////////////////////////////////
                    // Global list slideToggle
                    //////////////////////////////////////////

                    $('.toggle-button').click(function (e) {
                        e.preventDefault();
                        var $this = $(this);
                        $this.closest('.toggle-container').find('.toggle-content').slideToggle();
                        $this.closest('.toggle-container').toggleClass('open');
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2b').component('b2bProductsDownloadList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/products-download-list/templates/products-download-list.template.html',
        'controller': 'b2bProductsDownloadListController'
    });
})();
'use strict';

(function () {
    'use strict';

    b2bProductsDownloadListController.$inject = ["$http", "$location", "directiveData", "errorService"];
    angular.module('kappGlobal.b2b').controller('b2bProductsDownloadListController', b2bProductsDownloadListController);

    function b2bProductsDownloadListController($http, $location, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = { 'smbProducts': [], 'fields': {} };
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            var page = $location.path().substr($location.path().lastIndexOf('/') + 1);
            return directiveData.getByUrl(ctrl.resource || 'downloads-list').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.smbProducts.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            ctrl.data.smbProducts[index] = response.data.fields;

                            if (page === 'support') {
                                ctrl.data.smbProducts[index].freeTrialText = response.data.fields.KnowledgeBaseLinkText;
                                ctrl.data.smbProducts[index].freeTrialLink = response.data.fields.KnowledgeBaseLink;
                            }

                            return [ctrl.data.smbProducts[index], ctrl.data.smbProducts[index].freeTrialText || '', ctrl.data.smbProducts[index].freeTrialLink || ''];
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2b').component('tabSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2b/components/tab-section/templates/tab-section.template.html',
        'controller': 'tabSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2b').controller('tabSectionController', tabSectionController);

    tabSectionController.$inject = ['directiveData'];

    function tabSectionController(directiveData, errorService) {
        var _this = this;

        var ctrl = this;
        ctrl.$onInit = activate;
        this.selected = 0;
        this.active = false;

        function activate() {
            getData();
        }

        this.selectTab = function (index) {
            _this.selected = index;
            _this.active = !_this.active;
        };

        function getData() {
            directiveData.getByUrl('tab-section').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('animatedFeatures', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/animated-features/templates/animated-features.html',
        'controller': 'animatedFeaturesController'
    });
})();
'use strict';

(function () {
    'use strict';

    animatedFeaturesController.$inject = ["directiveData", "errorService", "angularLoad", "$rootScope"];
    angular.module('kappGlobal.b2c').controller('animatedFeaturesController', animatedFeaturesController);

    function animatedFeaturesController(directiveData, errorService, angularLoad, $rootScope) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        var ngRender = $rootScope.$on('ngRender', function () {
            runScripts();
            ngRender();
        });

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'animated-features').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            /* eslint-disable */
            angularLoad.loadScript('resources/template/js/jquery.waypoints.sticky.min.js').then(function () {
                var timetableOffset = 0;
                var mainnavHeight2 = $('#site-header .main-nav').outerHeight(true);

                if ($('.timetable').length) {
                    timetableOffset = mainnavHeight2 + 65;

                    var continuousElements = $('.timetable .timetable-wrapper');
                    continuousElements.each(function () {
                        var $this = $(this);
                        var sticky = new Waypoint.Sticky({
                            'element': $this[0],
                            'handler': function handler(direction) {
                                $this.find('.timetable-section-icon').css('top', timetableOffset);
                            },
                            'offset': timetableOffset
                        });
                        var inViewList = new Waypoint.Inview({
                            'element': $this[0],
                            'exited': function exited(direction) {
                                if (direction === 'down') {
                                    $this.addClass('exited');
                                }
                            },
                            'enter': function enter(direction) {
                                if (direction === 'up') {
                                    $this.removeClass('exited');
                                }
                            }
                        });
                    });
                }
            });
            /* eslint-enable */
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('downloadsPromo', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/downloads-promo/templates/downloads-promo.html',
        'controller': 'downloadsPromoController'
    });
})();
'use strict';

(function () {
    'use strict';

    downloadsPromoController.$inject = ["directiveData", "$http", "errorService", "templateVersion"];
    angular.module('kappGlobal.b2c').controller('downloadsPromoController', downloadsPromoController);

    function downloadsPromoController(directiveData, $http, errorService, templateVersion) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            checkTemplateVersion();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getDataNewDesign() {
            return directiveData.getByUrl(ctrl.resource || 'downloads-promo').then(function (response) {
                ctrl.products = response.data.fields.products;
                ctrl.data = response.data.fields;

                _.forEach(ctrl.products, function (item, index) {
                    if (item.match(/\.json/)) {
                        $http.get(item).then(function (response) {
                            return ctrl.products[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }

        // Need two functions since the schema have change
        // Once 2.0 is everywhere, this can be removed
        // Before we had data holding mainProduct, product1 and product2
        // Now we have data.products which holds all 3 of them
        function getDataOldDesign() {
            return directiveData.getByUrl(ctrl.resource || 'downloads-promo').then(function (response) {
                ctrl.data = response.data.fields;
                angular.forEach(ctrl.data, function (item, index) {
                    return $http.get(item).then(function (response) {
                        ctrl.data[index] = response.data.fields;
                    }, handleRejection);
                });
            }, handleRejection);
        }

        function checkTemplateVersion() {
            templateVersion.getVer('home-security', 'meta', 'products/kscloud/meta').then(function (response) {
                ctrl.template = response.data.fields.template || '1.0';
                ctrl.template === '2.0' ? getDataNewDesign() : getDataOldDesign();
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('headerFeatures', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/header-features/templates/header-features.html',
        'controller': 'headerFeaturesController'
    });
})();
'use strict';

(function () {
    'use strict';

    headerFeaturesController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.b2c').controller('headerFeaturesController', headerFeaturesController);

    function headerFeaturesController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'header-features').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').component('b2cHmcBlock', {
        'bindings': {
            'resource': '@',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/hmc-block/templates/hmc-block.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('kscloudDisclaimers', {
        'bindings': {
            'types': '<',
            'disclaimerText': '<'
        },
        'controller': 'kscloudDisclaimersController',
        'templateUrl': '/resources/template/html/modules/b2c/components/kscloud-disclaimers/templates/kscloud-disclaimers.html'
    });
})();
'use strict';

(function () {
    'use strict';

    kscloudDisclaimersController.$inject = ["directiveData", "$scope", "ngDialog", "errorService"];
    angular.module('kappGlobal.b2c').controller('kscloudDisclaimersController', kscloudDisclaimersController);

    function kscloudDisclaimersController(directiveData, $scope, ngDialog, errorService) {
        var ctrl = this;
        ctrl.kscDisclaimerPopup = kscDisclaimerPopup;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.get('/home-security/products/kscloud/ksc-disclaimers.json').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function kscDisclaimerPopup() {
            ngDialog.open({
                'data': ctrl,
                'scope': $scope,
                'className': 'ngdialog-plain ngdialog-narrow',
                'template': '/resources/template/html/modules/b2c/components/kscloud-disclaimers/templates/kscloud-disclaimers-popup.html',
                'closeByNavigation': true
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('kscloudFeaturedProducts', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'kscloudFeaturedProductsController',
        'templateUrl': '/resources/template/html/modules/b2c/components/kscloud-featured-products/templates/kscloud-featured-products.html'
    });
})();
'use strict';

(function () {
    'use strict';

    kscloudFeaturedProductsController.$inject = ["directiveData", "ENV", "productData", "errorService"];
    angular.module('kappGlobal.b2c').controller('kscloudFeaturedProductsController', kscloudFeaturedProductsController);

    function kscloudFeaturedProductsController(directiveData, ENV, productData, errorService) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.products = '';
        ctrl.highlighted = '';
        ctrl.$onInit = activate;
        ctrl.bgArray = [];

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            if (ctrl.resource) ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);

            return directiveData.getByUrl(ctrl.resource || 'featured-products-ksc').then(function (response) {
                ctrl.products = response.data.fields.productShortName;
                ctrl.data = response.data.fields;

                _.forEach(ctrl.products, function (value, index) {
                    productData.getb2c(value).then(function (res) {
                        ctrl.bgArray[index] = res.data.fields.bg;
                    }, handleRejection);
                });

                ctrl.highlighted = response.data.fields.highlighted;
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('overTheAirInstall', {
        'bindings': {
            'resource': '@',
            'otaData': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/over-the-air-install/templates/over-the-air-install.html',
        'controller': 'overTheAirInstallController'
    });
})();
'use strict';

(function () {
    'use strict';

    overTheAirInstallController.$inject = ["angularLoad", "$scope", "$element", "$timeout", "$window", "errorService"];
    angular.module('kappGlobal.b2c').controller('overTheAirInstallController', overTheAirInstallController);

    function overTheAirInstallController(angularLoad, $scope, $element, $timeout, $window, errorService) {
        var ctrl = this,
            auth2 = void 0;
        ctrl.signedIn = false;
        ctrl.id = $scope.$id;
        ctrl.$onChanges = waitForBinding;
        ctrl.$onInit = activate;

        function waitForBinding() {
            ctrl.otaData = JSON.parse(ctrl.otaData);
        }

        function activate() {
            getScript();
        }

        function getScript() {
            angularLoad.loadScript('https://apis.google.com/js/api:client.js').then(function () {
                if ($window.gapi) {
                    $window.gapi.load('auth2', function () {
                        auth2 = $window.gapi.auth2.init({
                            'client_id': ctrl.otaData.otaClientId
                        });

                        auth2.then(function (googleAuth) {
                            googleAuth.attachClickHandler('googleSignin-' + ctrl.id, {
                                'app_package_name': ctrl.otaData.otaPackageName
                            }, onSuccess, handleRejection);
                        }, handleRejection);

                        auth2.isSignedIn.listen(onSuccess);
                    }, handleRejection);
                }
            }, handleRejection);
        }

        function onSuccess() {
            $timeout(function () {
                ctrl.signedIn = true;
            });
        }

        function handleRejection(rejection) {
            if (rejection.error === 'idpiframe_initialization_failed' || rejection.type === 'error') {
                $element.hide();
            }

            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').component('productDescriptionTable2up', {
        'templateUrl': '/resources/template/html/modules/b2c/components/product-description-table-2up/templates/product-description-table-2up.html',
        'multiElement': true,
        'controller': 'productDescriptionTable2upController',
        'bindings': {
            'product': '<',
            'resource': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    productDescriptionTable2upController.$inject = ["$element", "$scope", "directiveData", "appHelperService", "windowHelperService", "$document", "$timeout", "errorService", "ENV", "geoLocationManager"];
    angular.module('kappGlobal.b2c').controller('productDescriptionTable2upController', productDescriptionTable2upController);

    function productDescriptionTable2upController($element, $scope, directiveData, appHelperService, windowHelperService, $document, $timeout, errorService, ENV, geoLocationManager) {
        var ctrl = this;
        ctrl.syncPriceList = $scope.$parent.$ctrl ? $scope.$parent.$ctrl.syncPriceList : '';
        ctrl.$onInit = activate;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.locale = ENV.locale;

        function activate() {
            getData();
            setupAffiliate();

            if (appHelperService.assertStateByName('product-kscloud-free')) blockProhibitedCountries();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'product-description-table-2up').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    runScript();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function blockProhibitedCountries() {
            if (ctrl.locale === 'en\-global' && geoLocationManager.isKscProhibitedCountry() || ctrl.locale === 'ru-ru' && geoLocationManager.getUserGeoIp() === 'by') {
                ctrl.isProductBlocked = true;
                directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                    var res = response.data.fields;
                    ctrl.buyblockUnavailableText = res.kscUnavailableText || res.buyblock_not_available_msg;
                });
            }
        }

        function setupAffiliate() {
            ctrl.isAffiliate = appHelperService.assertStateByName('product-ksk-affiliate');
            if (ctrl.isAffiliate) {
                ctrl.affiliateBuyLink = $scope.$parent.$ctrl.data.affiliateBuyLink;
                ctrl.affiliateBuyText = $scope.$parent.$ctrl.data.affiliateBuyText;
            }
        }

        function runScript() {
            var table = angular.element($document[0].getElementsByClassName('comparison-chart'));

            // Check if current page has comparison charts on it
            if (table.length) {
                // Loop through each comparison chart and set the default column
                var mobileDefault = table[0].getAttribute('data-comparison-default');

                $timeout(function () {
                    var newElements = angular.element(table[0].getElementsByClassName(mobileDefault));
                    newElements.addClass('currently-active');
                });
            }

            $($element).find('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this),
                    direction = $this.data('comparison-nav-direction'),
                    chartID = $this.closest('.comparison-nav').data('comparison-chart'),
                    $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),
                    $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]');

                $comparisonChartNav.find('li a.feat').removeClass('feat');

                // Get current column
                var $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                    currentTitle = $currentColumn.find('h2.product-title a').html(),
                    currentID = parseInt($currentColumn.data('column')),
                    nextID = parseInt(currentID + 1),
                    prevID = parseInt(currentID - 1),
                    nextNavID = parseInt(currentID + 2),
                    prevNavID = parseInt(currentID - 2);

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').html();

                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-prev a').empty().html(newPrevTitle);
                    $comparisonChartNav.find('li.nav-next a').empty().html(currentTitle);
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').html();

                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-next a').empty().html(newNextTitle);
                    $comparisonChartNav.find('li.nav-prev a').empty().html(currentTitle);
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('productFeatures', {
        'bindings': {
            'type': '@',
            'productInfo': '<',
            'resource': '@',
            'upgradeButton': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/product-features/templates/product-features.html',
        'controller': 'productFeaturesController'
    });
})();
'use strict';

(function () {
    'use strict';

    productFeaturesController.$inject = ["$timeout", "directiveData", "windowHelperService", "$element", "ENV", "errorService"];
    angular.module('kappGlobal.b2c').controller('productFeaturesController', productFeaturesController);

    function productFeaturesController($timeout, directiveData, windowHelperService, $element, ENV, errorService) {
        var ctrl = this;
        ctrl.env = ENV.locale;
        ctrl.$onInit = activate;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockData = response.data.fields;
            }, handleRejection);

            if (ctrl.resource) ctrl.resource = ctrl.resource.replace(/cur-locale/, ctrl.env);

            return directiveData.getByUrl(ctrl.resource || 'product-features').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    runScripts();
                });
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runScripts() {
            $($element).find('.image-link').magnificPopup({
                'type': 'image',
                'closeOnContentClick': false,
                'closeBtnInside': true
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('productsCarousel', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/products-carousel/templates/products-carousel.html',
        'controller': 'productsCarouselController'
    });
})();
'use strict';

(function () {
    'use strict';

    productsCarouselController.$inject = ["$element", "errorService", "$location", "$http", "$timeout", "$scope", "$q", "directiveData", "osDetectService", "appHelperService", "geoLocationManager", "$state"];
    angular.module('kappGlobal.b2c').controller('productsCarouselController', productsCarouselController);

    function productsCarouselController($element, errorService, $location, $http, $timeout, $scope, $q, directiveData, osDetectService, appHelperService, geoLocationManager, $state) {
        var ctrl = this,
            curUrl = $state.href($state.current.name, $state.params, { 'absolute': true }),
            geoIP = geoLocationManager.getUserGeoIp(curUrl),
            isRTL = appHelperService.isPageDirectionRTL();

        ctrl.data = {};
        ctrl.isVPN = geoLocationManager.isVpnProhibitedCountry(geoIP);
        ctrl.$onInit = activate;
        ctrl.toggleMobileFilters = toggleMobileFilters;
        ctrl.scopeId = $scope.$id;
        ctrl.setMobileNavTitle = setMobileNavTitle;
        ctrl.selectTab = selectTab;
        ctrl.getActiveTab = getActiveTab;
        ctrl.uniqProducts = [];
        ctrl.productOrderMatrix = [];
        ctrl.tabContent = [];
        ctrl.tabOrder = [];

        var slickConfig = {
            'infinite': true,
            'slidesToShow': 4,
            'slidesToScroll': 4,
            'autoplaySpeed': 4000,
            'dots': true,
            'rtl': isRTL,
            'accessibility': false,
            'draggable': false,
            'nextArrow': '<a type="button" href="" class="' + (isRTL ? 'prev' : 'next') + '-slide"></a>',
            'prevArrow': '<a type="button" href="" class="' + (isRTL ? 'next' : 'prev') + '-slide"></a>',
            'responsive': [{
                'breakpoint': isRTL ? 769 : 901,
                'settings': {
                    'slidesToShow': 3,
                    'slidesToScroll': 3,
                    'infinite': true,
                    'dots': true
                }
            }, {
                'breakpoint': isRTL ? 600 : 769,
                'settings': {
                    'slidesToShow': 2,
                    'slidesToScroll': 2
                }
            }, {
                'breakpoint': 480,
                'settings': {
                    'slidesToShow': 1,
                    'slidesToScroll': 1
                }
            }]
        };

        function activate() {
            getData();
            getBuyblockTranslations();

            $scope.$on('$destroy', function () {
                stopSlick();
            });
        }

        function startSlick() {
            $element.find('.product-list.slides').slick(slickConfig);

            // fix for https://jira.kaspersky.com/browse/TRAFFIC-1624
            // issue with Slick 1.7.1 where calling unslick seems to remove all events bounds on children elements
            // including ng-click
            $element.find('.product-carousel-item bazaarvoice .reviews').on('click', function () {
                $scope.$broadcast('open-popup', $(this).parent('bazaarvoice').attr('product-id'));
            });
        }

        function stopSlick() {
            $element.find('.slick-initialized').slick('unslick');
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'product-carousel').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.enableTabFilter = ctrl.data.enableTabFilter === 'true';
                ctrl.autoPlayEnabled = ctrl.data.enableAutoPlay === 'true';

                if (ctrl.autoPlayEnabled) _.set(slickConfig, 'autoplay', 'true');

                var uniqArr = [],
                    tabOrder = [];

                for (var i = 0; i < ctrl.data.carouselTabs.length; i++) {
                    ctrl.productOrderMatrix.push(ctrl.data.carouselTabs[i].carouselProduct);
                    tabOrder.push(ctrl.data.carouselTabs[i].tabID);

                    for (var j = 0; j < ctrl.data.carouselTabs[i].carouselProduct.length; j++) {
                        if (uniqArr.indexOf(ctrl.data.carouselTabs[i].carouselProduct[j]) === -1) uniqArr.push(ctrl.data.carouselTabs[i].carouselProduct[j]);
                    }
                }

                if (!ctrl.enableTabFilter) selectTab(0);

                return $q.all(uniqArr.map(function (product) {
                    if (product.match(/\.json/)) {
                        return $http.get(product, { 'cache': true }).then(function (response) {
                            return [product, response.data];
                        }, handleRejection);
                    }
                })).then(function (response) {
                    ctrl.uniqProducts = response;
                    var activeTab = tabOrder.indexOf(mapSelectedKey());
                    selectTab(activeTab > 0 ? activeTab : 0);
                });
            }, function (rejection) {
                errorService.warn('Unable to get product-section data', rejection);
                $element.hide();
            });
        }

        function getBuyblockTranslations() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockTranslations = response.data.fields;
            });
        }

        function setMobileNavTitle() {
            return $element.find('.tabs li.selected:first a').text().trim();
        }

        function getDefaultOS() {
            var hash = $location.hash(),
                osDetected = osDetectService.getCurrentOs(hash),
                osSelection = osDetected.device && osDetected.device.type;

            if (osDetected.device && String(osDetected.device.type) === 'mobile') {
                if (osDetected.device.subDevice.os.length) {
                    osSelection = osDetected.device.subDevice.os;
                } else {
                    osSelection = osDetected.device.type;
                }
            }
            return osSelection;
        }

        function toggleMobileFilters() {
            ctrl.showMobileFilters = !ctrl.showMobileFilters;
        }

        function mapSelectedKey() {
            var defaultOS = getDefaultOS(),
                keysMap = [{ 'os': 'pc', 'active': 'pc-tab' }, { 'os': 'mac', 'active': 'osx-tab' }, { 'os': 'android', 'active': 'android-tab' }, { 'os': 'ios', 'active': 'ios-tab' }, { 'os': 'mobile', 'active': 'android-tab' }, { 'os': 'free-tools', 'active': 'free-tools-tab' }],
                key = _.find(keysMap, function (obj) {
                return obj.os === defaultOS;
            });
            return !key ? 'all-tab' : key.active;
        }

        function selectTab(tab) {
            stopSlick();
            ctrl.currentTab = tab;

            var pathToDataMap = ctrl.uniqProducts.reduce(function (res, value) {
                res[value[0]] = value[1];
                return res;
            }, {});

            // force all items to clear
            // solves slick changing item order
            ctrl.tabContent = [];

            $timeout(function () {
                ctrl.tabContent = ctrl.productOrderMatrix[tab].filter(function (path) {
                    return pathToDataMap[path] !== undefined;
                }).map(function (item) {
                    return pathToDataMap[item];
                });

                $timeout(function () {
                    return startSlick();
                }, 100);
            });

            if (ctrl.showMobileFilters) toggleMobileFilters();
        }

        function getActiveTab(tabUrl) {
            return tabUrl === ctrl.currentTab;
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.promoComparisonChart').component('promoComparisonChart', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'component': '@'
        },
        'controller': 'promoComparisonChartController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'default';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/b2c/components/promo-comparison-chart/templates/promo-comparison-chart-' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    promoComparisonChartController.$inject = ["$http", "$element", "$scope", "directiveData", "$rootScope", "errorService"];
    angular.module('kappGlobal.promoComparisonChart').controller('promoComparisonChartController', promoComparisonChartController);

    function promoComparisonChartController($http, $element, $scope, directiveData, $rootScope, errorService) {
        var ctrl = this;
        ctrl.products = {};
        ctrl.toggleHidden = true;
        ctrl.$onInit = activate;

        var ngRender = $rootScope.$on('ngRender', function () {
            if (ctrl.data) runScripts();

            ngRender();
        });

        function activate() {
            getData();
        }

        function isRowHeader(row) {
            return row.chartRowHeader && row.chartRowHeader[0] === 'true';
        }

        function isRowHidePoint(row) {
            return row.chartHidePastPoint && row.chartHidePastPoint[0] === 'true';
        }

        function getGroupedRows(data) {
            var rows = [],
                currentGroupId = 0,
                currentGroupHide = false,
                insertExpandCollapse = function insertExpandCollapse() {
                rows.push({ 'isExpandCollapse': true, 'groupId': currentGroupId });
            };

            for (var i = 0, row; i < data.chartRows.length; i++) {
                row = data.chartRows[i];

                var isHeader = isRowHeader(row),
                    hideAfter = isRowHidePoint(row);

                if (isHeader) {
                    row.isHeader = true;
                    row.chartColumns = [].constructor(data.chartHeader.length);

                    if (currentGroupHide) {
                        insertExpandCollapse();
                    }

                    currentGroupId++;
                    currentGroupHide = false;
                }

                if (hideAfter) {
                    currentGroupHide = true;
                }

                row.groupId = currentGroupId;
                row.shouldHide = currentGroupHide;

                rows.push(row);
            }

            if (currentGroupHide) {
                insertExpandCollapse();
            }

            return rows;
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'promo-comparison-chart').then(function (response) {
                if (!response.data.fields) return false;

                ctrl.data = response.data.fields;
                ctrl.data.chartRows = getGroupedRows(ctrl.data);
                ctrl.expandedGroups = {};

                ctrl.data.chartHeader.forEach(function (item, index) {
                    if (item.chartColProduct.match(/\.json/)) {
                        $http.get(item.chartColProduct).then(function (response) {
                            return ctrl.products[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, function (rejection) {
                $element.hide();
                errorService.warn(rejection);
            });
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runScripts() {
            var mobileDefault = void 0;
            // Check if current page has comparison charts on it
            if ($('.comparison-chart').length) {
                // Loop through each comparison chart and set the default column
                mobileDefault = $('.comparison-chart').data('comparison-default');
                $('.comparison-chart .' + mobileDefault).addClass('currently-active');
            }
            $('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this),

                // Get navigation direction
                direction = $this.data('comparison-nav-direction'),

                // Get chart ID from the data attribute
                chartID = $this.closest('.comparison-nav').data('comparison-chart'),

                // Get comparison chart using that ID
                $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),

                // Get comparison chart mobile nav
                $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]'),

                // Get current column
                $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                    currentTitle = $currentColumn.find('h2.product-title a').clone(),
                    currentID = parseInt($currentColumn.data('column')),
                    nextID = parseInt(currentID + 1),
                    prevID = parseInt(currentID - 1),
                    nextNavID = parseInt(currentID + 2),
                    prevNavID = parseInt(currentID - 2);

                // Remove featured style from the comparison chart mobile nav
                $comparisonChartNav.find('li a.feat').removeClass('feat');
                $comparisonChart.find('.row-header .column-product.column-' + ($scope.$ctrl.data.chartHeader.length + 1) + ' h2.product-title a').addClass('feat');

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.children());
                    $comparisonChartNav.find('li.nav-next a').html(currentTitle.children());
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }
                    $comparisonChartNav.find('li.nav-next a').html(newNextTitle.children());
                    $comparisonChartNav.find('li.nav-prev a').html(currentTitle.children());
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cResourceCenterBlock', {
        'bindings': {
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/resource-center-block/templates/resource-center-block.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('hpReviewsSection', {
        'bindings': {
            'resource': '@',
            'productId': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/reviews-section/templates/reviews-section.html',
        'controller': 'hpReviewsSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    hpReviewsSectionController.$inject = ["$timeout", "$element", "$rootScope", "directiveData", "sessionStorageService", "errorService", "appHelperService"];
    angular.module('kappGlobal.b2c').controller('hpReviewsSectionController', hpReviewsSectionController);

    function hpReviewsSectionController($timeout, $element, $rootScope, directiveData, sessionStorageService, errorService, appHelperService) {
        var ctrl = this,
            ngRender = $rootScope.$on('ngRender', runScripts),
            isRTL = appHelperService.isPageDirectionRTL(),
            isB2CProduct = appHelperService.assertStateByName('home-product'),
            slickConfig = {
            'infinite': true,
            'slidesToShow': 3,
            'slidesToScroll': 3,
            'autoplaySpeed': 4000,
            'adaptiveHeight': isB2CProduct,
            'dots': true,
            'rtl': isRTL,
            'accessibility': false,
            'draggable': false,
            'nextArrow': '<a type="button" href="" class="' + (isRTL ? 'prev' : 'next') + '-slide"></a>',
            'prevArrow': '<a type="button" href="" class="' + (isRTL ? 'next' : 'prev') + '-slide"></a>',
            'responsive': [{
                'breakpoint': isRTL ? 769 : 901,
                'settings': {
                    'slidesToShow': 3,
                    'slidesToScroll': 3,
                    'infinite': true,
                    'dots': true
                }
            }, {
                'breakpoint': isRTL ? 600 : 769,
                'settings': {
                    'slidesToShow': 2,
                    'slidesToScroll': 2
                }
            }, {
                'breakpoint': 480,
                'settings': {
                    'slidesToShow': 1,
                    'slidesToScroll': 1,
                    'arrows': false
                }
            }]
        };
        ctrl.showReviews = showReviews;
        ctrl.starsArr = _.range(0, 5, 1);
        ctrl.$onInit = activate;

        function activate() {
            getTitleTranslations();
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'reviews-section').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.bvCarouselEnabled = Boolean(ctrl.data.disableBvCarousel && ctrl.data.disableBvCarousel[0] === 'true');
            }, function (rejection) {
                $element.hide();
                errorService.warn(rejection);
            });
        }

        function getTitleTranslations() {
            var cachedTranslations = sessionStorageService.get('local[general-translations]');

            if (cachedTranslations) {
                ctrl.translations = cachedTranslations.fields;
            } else {
                directiveData.getLocal('general-translations').then(function (response) {
                    ctrl.translations = response.data.fields;
                });
            }
        }

        function showReviews(value) {
            $rootScope.$emit('showReviewsPopup', value);
        }

        function runSlickConfig() {
            $element.find('.reviews-list:not(.slick-initialized):not(.bv-slides)').slick(slickConfig);
            $element.find('.reviews-list.bv-slides:not(.slick-initialized)').slick(angular.extend({}, slickConfig, {
                'slidesToShow': 1,
                'slidesToScroll': 1,
                'responsive': [{
                    'breakpoint': isRTL ? 769 : 901,
                    'settings': {
                        'slidesToShow': 1,
                        'slidesToScroll': 1
                    }
                }, {
                    'breakpoint': isRTL ? 600 : 769,
                    'settings': {
                        'slidesToShow': 1,
                        'slidesToScroll': 1
                    }
                }, {
                    'breakpoint': 480,
                    'settings': {
                        'slidesToShow': 1,
                        'slidesToScroll': 1
                    }
                }]
            }));
        }

        function runScripts() {
            $('.ellipsis').dotdotdot({
                'callback': function callback() {
                    $timeout(function () {
                        runSlickConfig();
                    }, 100);
                },
                'ellipsis': '... ',
                'height': 140
            });

            ngRender();
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('safeKids', {
        'bindings': {
            'copy': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/safe-kids/templates/safe-kids.html',
        'controller': 'safeKidsController'
    });
})();
'use strict';

(function () {
    'use strict';

    safeKidsController.$inject = ["$rootScope", "$scope", "$anchorScroll", "rootScopeHelper", "$location", "directiveData", "priceData", "appHelperService", "buyblockService", "errorService"];
    angular.module('kappGlobal.b2c').controller('safeKidsController', safeKidsController);

    function safeKidsController($rootScope, $scope, $anchorScroll, rootScopeHelper, $location, directiveData, priceData, appHelperService, buyblockService, errorService) {
        var ctrl = this,
            currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange);

        ctrl.data = {};
        ctrl.syncPriceList = {};
        ctrl.currency = buyblockService.getCurrency(ctrl);
        ctrl.$onInit = activate;

        function activate() {
            getData();
            $scope.$on('$destroy', handleScopeDestroyed);
        }

        function getData() {
            return directiveData.get('/b2c-tools/ksk/kss-section.json').then(function (response) {
                ctrl.data = response.data.fields;
                if (!appHelperService.assertStateByName('product-ksk-affiliate')) {
                    setupPriceList();
                }
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function setupPriceList() {
            ctrl.syncPriceList.active = ctrl.data.priceList[0] === 'active';
            if (ctrl.syncPriceList.active && ctrl.data.priceListId) {
                ctrl.syncPriceList.priceListCTA = ctrl.data.priceListCTA;
                getPriceList();
            }
        }

        function getPriceList() {
            return priceData.getPrice(ctrl.data.priceListId, 'purchase', ctrl.currency).then(function (response) {
                ctrl.syncPriceList.priceList = response.data[0];
                if (!angular.isObject(ctrl.syncPriceList.priceList)) {
                    return handlePriceError('API not available');
                }
                ctrl.syncPriceList.productPricesExist = true;
                return getBuyUrl();
            }, handlePriceError);
        }

        /**
         * Handles product not found, prices or service not available
         * @param  {String} response
         */
        function handlePriceError(response) {
            ctrl.syncPriceList.productPricesExist = false;
            ctrl.isBBReady = true;
            $rootScope.buyBlockReady();
            errorService.warn(response);
            return false;
        }

        function getBuyUrl() {
            ctrl.syncPriceList.priceId = ctrl.syncPriceList.priceList.id;
            return priceData.getCartLink(ctrl.syncPriceList.priceList.product_id, ctrl.syncPriceList.priceId, 'purchase').then(function (response) {
                ctrl.syncPriceList.buyLink = response.data;
                $rootScope.buyBlockReady();
            }, handleRejection);
        }

        function handleCurrencyChange() {
            ctrl.currency = $rootScope.currency;
            if (ctrl.syncPriceList.active && ctrl.data.priceListId) {
                getPriceList();
            }
        }

        function handleScopeDestroyed() {
            currencyChange();
        }

        function scrollTo() {
            if ($location.hash() === 'installation') {
                $location.hash('installation');
                $anchorScroll();
            } else if ($location.hash() === 'download') {
                $location.hash('download');
                $anchorScroll.yOffset = 100;
                $anchorScroll();
            } else if ($location.hash() === 'compare') {
                $location.hash('compare');
                $anchorScroll.yOffset = 100;
                $anchorScroll();
            }
        }

        rootScopeHelper.on($scope, 'ngRender', scrollTo);
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('secondaryList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/secondary-list/templates/secondary-list.html',
        'controller': 'secondaryListController'

    }).component('secondaryListDocumentationItem', {
        'bindings': {
            'productGroup': '<'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/secondary-list/templates/secondary-list-documentation-item.html',
        'controller': 'secondaryListDocumentationItemController'
    });
})();
'use strict';

(function () {
    'use strict';

    secondaryListController.$inject = ["$element", "$timeout", "directiveData", "errorService"];
    secondaryListDocumentationItemController.$inject = ["$element", "$timeout", "downloadLinks", "ENV", "errorService"];
    angular.module('kappGlobal.b2c').controller('secondaryListController', secondaryListController).controller('secondaryListDocumentationItemController', secondaryListDocumentationItemController);

    function secondaryListController($element, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.buttonMore = true;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'secondary-list').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScript() {
            $timeout(function () {
                $($element).find('.section-footer .button').click(function (e) {
                    e.preventDefault();
                });
            });
        }

        ctrl.showMore = function () {
            if (ctrl.buttonMore) {
                $element.find('li').addClass('hide-previous');
                $element.find('.previous-wrapper').slideDown();
                $element.find('li').toggleClass('show-previous', true);
            } else {
                $element.find('li').addClass('show-previous');
                $element.find('.previous-wrapper').slideUp();
                $element.find('li').toggleClass('show-previous', false);
            }

            ctrl.buttonMore = !ctrl.buttonMore;
        };
    }

    function secondaryListDocumentationItemController($element, $timeout, downloadLinks, ENV, errorService) {
        var ctrl = this,
            application = '',
            docSettings = {};
        ctrl.productGroup = ctrl.productGroup || {
            'productListTaxonomy': [], 'selectedLanguagesCodes': '',
            'fallbackLanguageCode': '', 'productsList': [], 'websiteCountryCode': ''
        };
        ctrl.$onInit = activate;

        function activate() {
            setupProductGroupOptions();
            getData();
        }

        function setupProductGroupOptions() {
            if (ctrl.productGroup.productListTaxonomy && ctrl.productGroup.productListTaxonomy.length > 0) {
                application = ctrl.productGroup.productListTaxonomy.map(function (item) {
                    return item.key;
                });
            }
            if (ctrl.productGroup.selectedLanguagesCodes && !angular.isString(ctrl.productGroup.selectedLanguagesCodes)) {
                ctrl.productGroup.selectedLanguagesCodes = ctrl.productGroup.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }
            if (ctrl.productGroup.fallbackLanguageCode && !angular.isString(ctrl.productGroup.fallbackLanguageCode)) {
                ctrl.productGroup.fallbackLanguageCode = ctrl.productGroup.fallbackLanguageCode.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }
            docSettings = {
                'applications': application || ctrl.productGroup.productsList.split(','),
                'options': {
                    'links_type': 'Docs',
                    'locale_selection_type': ctrl.productGroup.localeSelectionType,
                    'selected_languages_codes': ctrl.productGroup.selectedLanguagesCodes,
                    'fallback_language_code': ctrl.productGroup.fallbackLanguageCode || 'en',
                    'website_country_code': ctrl.productGroup.websiteCountryCode || ENV.locale.substr(3, 5),
                    'website_language_code': 'en',
                    'website_fallback_language': '',
                    'lang_locale_link_selection_amount': null,
                    'show_release_version_type': null,
                    'use_aux_lang_for_app_plugins': null
                }
            };
        }

        function getData() {
            return downloadLinks.getByApp('', docSettings).then(function (response) {
                ctrl.downloadsData = response.data;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScript() {
            $timeout(function () {
                $($element).find('.toggle').click(function (e) {
                    e.preventDefault();
                    $(this).parents('li').toggleClass('show-previous');
                    $(this).parent().siblings('.previous-wrapper').slideToggle();
                });
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('simpleTable', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/simple-table/templates/simple-table.html',
        'controller': 'simpleTableController'
    });
})();
'use strict';

(function () {
    'use strict';

    simpleTableController.$inject = ["directiveData", "$element", "$timeout", "errorService"];
    angular.module('kappGlobal.b2c').controller('simpleTableController', simpleTableController);

    function simpleTableController(directiveData, $element, $timeout, errorService) {
        var ctrl = this;
        ctrl.chart = 0;
        ctrl.cols = 0;
        ctrl.attr = 0;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'simple-table').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.cols = ctrl.data.rows[0].rowTxt.length;
                ctrl.chart = ctrl.cols - 1;
                ctrl.attr = ctrl.chart * ctrl.cols;
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        //////////////////////////////////////////
        // Comparison chart nav
        //////////////////////////////////////////

        function runScripts() {
            // Check if current page has comparison charts on it
            if ($element.length) {
                // Loop through each comparison chart and set the default column
                var mobileDefault = $element.data('comparison-default');
                $element.find(mobileDefault).addClass('currently-active');
                // $('.comparison-chart .'+mobileDefault).addClass('currently-active');
            }

            $($element).find('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this);

                // Get navigation direction
                var direction = $this.data('comparison-nav-direction');

                // Get chart ID from the data attribute
                var chartID = $this.closest('.comparison-nav').data('comparison-chart');

                // Get comparison chart using that ID
                var $comparisonChart = $element.find('[data-comparison-chart="' + chartID + '"]');

                // Get comparison chart mobile nav
                var $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]');

                // Remove featured style from the comparison chart mobile nav
                $comparisonChartNav.find('li a.feat').removeClass('feat');

                // Get current column
                var $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active');
                var currentTitle = $currentColumn.find('p.product-title span').clone();
                var currentID = parseInt($currentColumn.data('column'));
                var nextID = parseInt(currentID + 1);
                var prevID = parseInt(currentID - 1);
                var nextNavID = parseInt(currentID + 2);
                var prevNavID = parseInt(currentID - 2);

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' p.product-title span').clone();
                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' p.product-title span').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }
                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' p.product-title span').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }
                    $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.children());
                    $comparisonChartNav.find('li.nav-next a').html(currentTitle.children());
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' p.product-title span').clone();
                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' p.product-title span').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }
                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' p.product-title span').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }
                    $comparisonChartNav.find('li.nav-next a').html(newNextTitle.children());
                    $comparisonChartNav.find('li.nav-prev a').html(currentTitle.children());
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('softwareDocs', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/software-docs/templates/software-docs.html',
        'controller': 'softwareDocsController'

    });
})();
'use strict';

(function () {
    'use strict';

    softwareDocsController.$inject = ["$q", "ENV", "directiveData", "downloadLinks", "errorService", "$rootScope", "$anchorScroll"];
    angular.module('kappGlobal.b2c').controller('softwareDocsController', softwareDocsController);

    function softwareDocsController($q, ENV, directiveData, downloadLinks, errorService, $rootScope, $anchorScroll) {
        var ctrl = this,
            application = '',
            docSettings = {},
            hideAlphabets = [];
        ctrl.downloadData = [];
        ctrl.downloads = [];
        ctrl.downloadVer = [];
        ctrl.filteredDownloads = [];
        ctrl.mergedDownloads = [];
        ctrl.langArray = [];
        ctrl.onLanguageChange = onLanguageChange;
        ctrl.$onInit = activate;
        // Year dropdown and functionality removed in this sha 16643d9c8036ec7701e4d57571b88fa1e2d06413

        var ngRender = $rootScope.$on('ngRender', function () {
            $anchorScroll();
            ngRender();
        });

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function activate() {
            var promises = [getGeneralSettings(), getProductDownloadData()];
            $q.all(promises);
        }

        function getGeneralSettings() {
            return directiveData.getLocal('general-settings').then(function (response) {
                var res = response.data.fields;
                if (res && res.hideAlphabets) return hideAlphabets = res.hideAlphabets;
            }, handleRejection);
        }

        function getProductDownloadData() {
            return directiveData.getByUrl(ctrl.resource || 'software-docs').then(function (response) {
                ctrl.data = response.data.fields;
                setupDownload();
            }, handleRejection);
        }

        function setupDownload() {
            if (ctrl.data.prodTax && ctrl.data.prodTax.length > 0) {
                application = ctrl.data.prodTax.map(function (item) {
                    return item.key;
                });
            }
            if (!angular.isString(ctrl.data.selectedLanguagesCodes)) {
                ctrl.data.selectedLanguagesCodes = ctrl.data.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }
            if (!angular.isString(ctrl.data.fallbackLanguageCode)) {
                ctrl.data.fallbackLanguageCode = ctrl.data.fallbackLanguageCode.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }

            docSettings = {
                'applications': application,
                'options': {
                    'links_type': ctrl.data.linksType.toString(),
                    'locale_selection_type': ctrl.data.localeSelectionType,
                    'selected_languages_codes': ctrl.data.selectedLanguagesCodes,
                    'fallback_language_code': ctrl.data.fallbackLanguageCode || 'en',
                    'website_country_code': ctrl.data.websiteCountryCode || ENV.locale.substr(3),
                    'website_language_code': ctrl.data.websiteLanguageCode || 'en',
                    'website_fallback_language': 'en',
                    'lang_locale_link_selection_amount': null,
                    'show_release_version_type': null,
                    'use_aux_lang_for_app_plugins': null,
                    'cpp_id': null
                }
            };
            getDownloadLinks();
        }

        function getDownloadLinks() {
            return downloadLinks.getByApp('', docSettings).then(function (response) {
                for (var i = 0, length = response.data.length; i < length; i++) {
                    if (response.data[i].link_type === 'OnlineHelp') {
                        response.data[i].link_type = ctrl.data.manualText;
                    } else if (response.data[i].link_type === 'Eulas') {
                        response.data[i].link_type = ctrl.data.eulaText;
                    }
                    for (var j = 0, _length = response.data[i].applications.length; j < _length; j++) {
                        response.data[i].applications[j]['link_type'] = response.data[i].link_type;
                    }
                }

                ctrl.downloadData = _.concat(response.data[0].applications, response.data[1].applications);

                var _loop = function _loop(_i, _length2) {
                    _.forEach(ctrl.downloadData[_i].groups, function (value, key) {
                        if (value.downloads && key > 0) {
                            ctrl.downloadData[_i].groups[0].downloads = _.concat(ctrl.downloadData[_i].groups[0].downloads, value.downloads);
                            delete ctrl.downloadData[_i].groups[key];
                        }
                    });
                    ctrl.downloadData[_i].groups[0]['product_name'] = ctrl.downloadData[_i].name;
                    ctrl.downloadData[_i].groups[0]['link_type'] = ctrl.downloadData[_i].link_type;
                    ctrl.downloadData[_i]['groups'].map(function (value) {
                        ctrl.downloadVer.push(value);
                    });
                };

                for (var _i = 0, _length2 = ctrl.downloadData.length; _i < _length2; _i++) {
                    _loop(_i, _length2);
                }

                ctrl.downloadVer.map(function (downloadVer) {
                    downloadVer['downloads'].map(function (download) {
                        download['product_name'] = downloadVer['product_name'];
                        download['link_type'] = downloadVer['link_type'];
                        download['display_name_alphabet'] = (download.language_loc_name + ' ' + download.alphabet_loc_name).trim();
                        hideAlphabets.forEach(function (item) {
                            if (item !== download.alphabet) {
                                ctrl.downloads.push(download);
                                ctrl.langArray.push(download.display_name_alphabet);
                            }
                        });
                    });
                });

                ctrl.langArray = _.uniqBy(ctrl.langArray);

                filterDownloads(ctrl.langArray[0]);
                setDropDownDefaults();
            }, handleRejection);
        }

        function filterDownloads(lang) {
            ctrl.filteredDownloads = [];
            for (var i = 0, length = ctrl.downloads.length; i < length; i++) {
                if (ctrl.downloads[i].display_name_alphabet === lang) {
                    ctrl.filteredDownloads.push(ctrl.downloads[i]);
                }
            }
            ctrl.mergedDownloads = _.groupBy(ctrl.filteredDownloads, 'product_name');
        }

        function setDropDownDefaults() {
            if (ctrl.filteredDownloads[0]) {
                ctrl.selectedLanguage = ctrl.filteredDownloads[0].display_name_alphabet;
            }
        }

        function onLanguageChange(lang) {
            filterDownloads(lang);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').component('specialOffersItem', {
        'bindings': {
            'resource': '@',
            'offerData': '<'
        },
        'controller': 'SpecialOffersItemController',
        'templateUrl': '/resources/template/html/modules/b2c/components/special-offers/templates/special-offers-item.html'
    });
})();
'use strict';

(function () {
    'use strict';

    SpecialOffersItemController.$inject = ["windowHelperService", "$scope"];
    angular.module('kappGlobal.b2c').controller('SpecialOffersItemController', SpecialOffersItemController);

    function SpecialOffersItemController(windowHelperService, $scope) {
        var ctrl = this;

        var dateWatcher = $scope.$watch('$ctrl.offerData.dates', function (newVal) {
            if (newVal) {
                ctrl.offerData.summaryDate = ctrl.offerData.dates.replace(/<(?:.|\n)*?>/gm, '');
                dateWatcher();
            }
        });

        ctrl.handleLink = function ($event) {
            var data = ctrl.offerData,
                newTab = data.newTab && data.newTab[0] === 'true';

            if (data.overrideLink || newTab) {
                $event.preventDefault();

                windowHelperService.goToUrl(data.overrideLink || data.url, newTab);
            }
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').component('specialOffersList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/special-offers/templates/special-offers-list.html',
        'controller': 'SpecialOffersController'
    });
})();
'use strict';

(function () {
    'use strict';

    SpecialOffersController.$inject = ["directiveData", "$q", "$state", "errorService"];
    angular.module('kappGlobal.b2c').controller('SpecialOffersController', SpecialOffersController);

    function SpecialOffersController(directiveData, $q, $state, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;
        ctrl.itemsRendered = 0;

        var getSpecialOffers = function getSpecialOffers(links) {
            var promises = links.map(function (item) {
                return directiveData.getByUrl(item).then(function (response) {
                    return angular.extend(response.data.fields, { 'title': response.data.title, 'url': $state.current.url + '/' + response.data.title });
                }, handleRejection);
            });

            return $q.all(promises);
        };

        var getData = function getData() {
            return directiveData.getByUrl(ctrl.resource || 'special-offers-list').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.title = response.data.title;
                getSpecialOffers(ctrl.data.specialOffersLinks).then(function (res) {
                    ctrl.data.specialOffersData = res;
                });
            }, handleRejection);
        };

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('tabsSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/tabs-section/templates/tabs-section.html',
        'controller': 'tabsSectionController'
    });
})();
'use strict';

(function () {
    tabsSectionController.$inject = ["$timeout", "directiveData", "$element", "errorService"];
    angular.module('kappGlobal.b2c').controller('tabsSectionController', tabsSectionController);

    function tabsSectionController($timeout, directiveData, $element, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'b2c-tabs-section').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScript() {
            $timeout(function () {
                $element.find('.anchorLink').on('click', function (e) {
                    e.preventDefault();
                    var anchor = $(this).attr('href');
                    $('body').animate({ 'scrollTop': $(anchor).offset().top }, 'slow');
                });

                // Tabs
                $element.find('.tab-title a').on('click', function (e) {
                    e.preventDefault();
                    var $this = $(this);
                    var $parent = $this.parent();

                    // Get the name of tab content that should be controled
                    var current = $parent.closest('.tabs-title-wrapper').attr('data-tab');

                    // Remove selected class from all tab titles and add it to the one just clicked
                    $element.find('.tabs-title-wrapper[data-tab=\'' + current + '\'] .tab-title').removeClass('selected');
                    $parent.addClass('selected');

                    // Check clicked link href and show matching tab content
                    var tab = $this.attr('href');
                    $element.find('.tab-content-wrapper[data-tab=\'' + current + '\'] .tab-content-single').not(tab).removeClass('tab-show');
                    $element.find(tab).addClass('tab-show');
                });

                // Tabs desktop -> Dropdown mobile
                // Get the name of currently active tab for mobile list
                var SelectedName = $element.find('.tab-nav').parent().find('ul.tabs li.selected a').first().text();

                $element.find('.tab-nav').append('<div class="tab-label">' + SelectedName + '</div>');
                $element.find('.tab-nav').click(function (e) {
                    e.stopPropagation();
                    $(this).toggleClass('active');
                });

                // Close it if user clicks outside
                $('body').click(function () {
                    $element.find('.tab-nav').removeClass('active');
                });

                $element.find('.tab-nav .tabs').click(function (e) {
                    e.stopPropagation();
                });

                // Check when item is clicked and update active tab label
                $element.find('.tab-nav .tabs li').click(function (e) {
                    e.preventDefault();
                    var $this = $(this);
                    $this.parent().siblings().remove();
                    $this.closest('.tab-nav').append('<div class=tab-label></div>');
                    $this.closest('.tab-nav').find('.tab-label').text($(this).text());
                    $this.parent().parent().toggleClass('active');
                });

                // Accordion
                $('.accordion-section > li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                    $(this).parent().toggleClass('open');
                    $(this).siblings().slideToggle();
                });
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cThankYouV2Header', {
        'templateUrl': '/resources/template/html/modules/b2c/components/thank-you-v2-header/templates/thank-you-v2-header.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cThankYouItem', {
        'bindings': {
            'componentData': '<',
            'productId': '@'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/thankyou-section/templates/thank-you-item.html',
        'controller': 'b2cThankYouItemController'
    });
})();
'use strict';

(function () {
    b2cThankYouItemController.$inject = ["downloadLinks", "$scope", "productData", "productDownloadHelper", "appHelperService", "errorService"];
    angular.module('kappGlobal.b2c').controller('b2cThankYouItemController', b2cThankYouItemController);

    function b2cThankYouItemController(downloadLinks, $scope, productData, productDownloadHelper, appHelperService, errorService) {
        var ctrl = this,
            isTrue = appHelperService.isTrue;
        var docSettings = {};

        ctrl.data = {};
        ctrl.products = {};
        ctrl.showDownloadDropDowns = true;
        ctrl.showGlobalDownloadDropDown = true;
        ctrl.ShowDownloadButtonFromComponent = false;
        ctrl.downloadData = [];
        ctrl.downloads = [];
        ctrl.downloadVer = [];
        ctrl.showVersion = true;
        ctrl.downloadLocales = productDownloadHelper.getDownloadLocales();
        ctrl.getProductDownloadData = getProductDownloadData;
        ctrl.onVersionChange = onVersionChange;
        ctrl.changeRegion = changeRegion;
        ctrl.handleClick = handleClick;
        ctrl.isPopupOpen = false;
        ctrl.$onInit = activate;

        function handleClick($event) {
            $event.stopPropagation();

            var data = ctrl.componentData;

            if (isTrue(data.showDialog)) {
                return openDialog();
            }

            startDownload(true);
        }

        function openDialog() {
            $scope.$emit('dl-open-form-popup', {
                'link': getDownloadLink(),
                'startOnClose': ctrl.componentData.startOnClose[0] === 'True',
                'form': {
                    'url': ctrl.componentData.formUrl,
                    'width': ctrl.componentData.formWidth,
                    'height': ctrl.componentData.formHeight
                }
            });
        }

        function openCrossSellPopup() {
            var data = ctrl.componentData;

            if (!data.crossSellPopup || !isTrue(data.crossSellPopup.enableCrossSellPopup)) return;

            $scope.$emit('dl-open-cross-sell-popup', data);
        }

        function activate() {
            setUpComponentData();
            getProductInfo();
            hideDropdownVersion();
            getProductDownloadData();
        }

        function getProductInfo() {
            if (ctrl.componentData.product && ctrl.componentData.product.split(',').length >= 1) {
                ctrl.product = ctrl.componentData.product.split(',');
                productData.getb2c(ctrl.product[0]).then(function (response) {
                    ctrl.productInfo = response.data.fields;
                }, function (rejection) {
                    errorService.warn(rejection);
                });
            }
        }

        function hideDropdownVersion() {
            var prods = ['ktsmd', 'kis', 'kav', 'kfa'];
            if (prods.indexOf(ctrl.product[0]) > -1) {
                ctrl.showVersion = false;
            }
        }

        function filterDownloadVersions() {
            if (ctrl.product[0] === 'kismac') {
                var numberOfVersionsToDisplay = ctrl.componentData['productTaxonomy'].length;

                ctrl.downloadVer = _.chain(ctrl.downloadVer).filter(function (downloadVer) {
                    return downloadVer['file_extension'] === '.dmg';
                }).groupBy(function (downloadVer) {
                    return downloadVer['release_version']['major'];
                }).toPairs().orderBy(function (value) {
                    return parseInt(value[0]);
                }, 'desc').take(numberOfVersionsToDisplay).map(function (value) {
                    return _.chain(value[1]).orderBy('release_date', 'desc').first().value();
                }).value();
            }
        }

        function getProductDownloadData() {
            docSettings.options.selected_languages_codes = ctrl.selectedLanguagesCodesOverride || docSettings.options.selected_languages_codes;
            return downloadLinks.getByApp('', docSettings).then(function (response) {
                resetDropDowns();
                ctrl.downloadData = _.clone(response.data[0].applications);
                ctrl.dropDown = { 'languages': [], 'uniqueLanguages': [] };

                ctrl.downloadVer = _.chain(ctrl.downloadData).map('groups').flatten().each(function (value) {
                    value['display_name'] = getDisplayText(value['release_version']);
                }).value();
                filterDownloadVersions();

                ctrl.downloadVer.map(function (downloadVer) {
                    downloadVer['downloads'].map(function (download) {
                        download['display_name'] = downloadVer['display_name'];
                        ctrl.downloads.push(download);
                    });
                });

                setupDropDownAndDownloadControlDisplays();
                setDropDownDefaults();
                startDownload();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function setupDropDownAndDownloadControlDisplays() {
            var overrideDownloadLink = ctrl.componentData['overrideDownloadLink'];
            ctrl.ShowDownloadButtonFromComponent = angular.isDefined(overrideDownloadLink);
            ctrl.showGlobalDownloadDropDown = !ctrl.ShowDownloadButtonFromComponent;
            ctrl.showDownloadDropDowns = ctrl.downloads.length && ctrl.downloadVer.length && !ctrl.ShowDownloadButtonFromComponent;
            if (ctrl.showDownloadDropDowns) {
                ctrl.ShowDownloadButtonFromComponent = true;
            }
        }

        function setDropDownDefaults() {
            if (ctrl.downloadVer[0]) {
                ctrl.selectedVersion = ctrl.downloadVer[0];
                ctrl.downloadVersion = ctrl.selectedVersion['downloads'][0];
            }
        }

        function getDownloadLink() {
            var downloadLink = ctrl.componentData.overrideDownloadLink;

            if (!downloadLink) {
                downloadLink = ctrl.downloadVersion && ctrl.downloadVersion.download_url ? ctrl.downloadVersion.download_url : '';
            }

            return downloadLink;
        }

        function startDownload(start) {
            if (isTrue(ctrl.componentData.autoDownload, 'active') || start === true) {
                openCrossSellPopup();
                $scope.$emit('dl-start-download', getDownloadLink(), ctrl.componentData.linksType);
            }
        }

        function setRegionDefault() {
            ctrl.downloadLocale = ctrl.downloadLocale || ctrl.downloadLocales[0];
        }

        function setUpComponentData(localeDocUpdates) {
            if (!angular.isString(ctrl.componentData.selectedLanguagesCodes)) {
                ctrl.componentData.selectedLanguagesCodes = ctrl.componentData.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }
            if (!angular.isString(ctrl.componentData.fallbackLanguageCode)) {
                ctrl.componentData.fallbackLanguageCode = ctrl.componentData.fallbackLanguageCode.reduce(function (prev, cur, index) {
                    return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                }, '');
            }

            var application = productDownloadHelper.getApplication(ctrl.componentData);

            setRegionDefault();
            localeDocUpdates = localeDocUpdates || productDownloadHelper.constructLocale(ctrl.downloadLocale);
            docSettings = productDownloadHelper.getDocSettings(application, localeDocUpdates, ctrl.componentData);
        }

        function getDisplayText(value) {
            return value.major + '.' + value.minor + '.' + value.build + '.' + value.revision + value.subrevision;
        }

        function onVersionChange(version) {
            ctrl.downloadVersion = version['downloads'][0];
        }

        function changeRegion(region) {
            var locale = productDownloadHelper.constructLocale(region);
            setUpComponentData(locale);
            return getProductDownloadData();
        }

        function resetDropDowns() {
            ctrl.downloadData = [];
            ctrl.downloadVer = [];
            ctrl.selectedVersion = [];
            ctrl.downloadVersion = [];
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cThankYou', {
        'bindings': {
            'productName': '<',
            'version': '@',
            'resource': '@',
            'product': '<'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/thankyou-section/templates/thank-you.html',
        'controller': 'b2cThankYouController'
    });
})();
'use strict';

(function () {
    b2cThankYouController.$inject = ["ENV", "$window", "$document", "$rootScope", "$scope", "$q", "$http", "appHelperService", "directiveData", "productData", "errorService", "ngDialog", "$sce"];
    angular.module('kappGlobal.b2c').controller('b2cThankYouController', b2cThankYouController);

    function b2cThankYouController(ENV, $window, $document, $rootScope, $scope, $q, $http, appHelperService, directiveData, productData, errorService, ngDialog, $sce) {
        var ctrl = this,
            isTrue = appHelperService.isTrue;

        ctrl.downloadsList = {};
        ctrl.$onInit = activate;

        var unsubDL2 = $document.on('dl2-block-download-click', function (e) {
            if (!e.detail || !e.detail.CodeName || !angular.isArray(ctrl.downloadsList.downloadBlocks)) return;

            var matchingProduct = getMatchingProduct(e.detail.CodeName);

            // allow the dl to start when no product matches
            if (!matchingProduct) return;

            if (isTrue(matchingProduct.showDialog)) {
                // prevent the download to start
                e.originalEvent.nativeEvent.preventDefault();
                showDownloadForm(matchingProduct, e.detail.Link);
            } else if (matchingProduct.crossSellPopup && isTrue(matchingProduct.crossSellPopup.enableCrossSellPopup)) {
                e.originalEvent.nativeEvent.preventDefault(); // prevent default and use event to add tracking
                startDownload(e.detail.Link, matchingProduct.linksType);
                openCrossSellPopup(matchingProduct);
            }
        });

        $scope.$on('dl-open-form-popup', function (evt, options) {
            return openFormDialog(options);
        });
        $scope.$on('dl-open-cross-sell-popup', function (evt, options) {
            return openCrossSellPopup(options);
        });
        $scope.$on('dl-start-download', function (evt, link, type) {
            return startDownload(link, type);
        });
        $scope.$on('$destroy', function () {
            return unsubDL2();
        });

        function getMatchingProduct(codeName) {
            return ctrl.downloadsList.downloadBlocks.find(function (block) {
                if (block.dl2ProductCodeName === codeName) return true;

                return block.productTaxonomy && block.productTaxonomy.find(function (prod) {
                    return prod.key === codeName;
                });
            });
        }

        function showDownloadForm(product, link) {
            openFormDialog({
                'form': {
                    'url': product.formUrl,
                    'width': product.formWidth,
                    'height': product.formHeight
                },
                'startOnClose': isTrue(product.startOnClose),
                'linksType': product.linksType,
                'link': link
            });
        }

        function activate() {
            ctrl.resource = ctrl.resource || null;
            getDownloadsList();
            resetCrossSellDialogData();
        }

        function getDownloadsList() {
            return directiveData.getByUrl(ctrl.resource || 'download-settings').then(function (response) {
                return ctrl.downloadsList = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function openFormDialog(options) {
            var embedSrc = $sce.trustAsResourceUrl(options.form.url);

            ngDialog.open({
                'template': '\n                  <div class="modal-header">\n                    <a ng-click="closeThisDialog()" class="modal-button modal-close modal-lrc-close">\n                      <span class="font-icons icon-cancel"></span>\n                    </a>\n                  </div>\n                  <div class="ngdialog-iframe-wrapper">\n                    <iframe class="ngdialog-iframe" src="' + embedSrc + '" frameborder="0" allowfullscreen=""></iframe>\n                  </div>',
                'className': 'ngdialog-iframe ngdialog-flyout',
                'showClose': false,
                'scope': $scope,
                'plain': true,
                'name': 'video-popup',
                'width': parseInt(options.form.width),
                'height': parseInt(options.form.height),
                'preCloseCallback': function preCloseCallback() {
                    if (options.startOnClose) startDownload(options.link, options.linksType);
                    return true;
                },
                'onOpenCallback': function onOpenCallback() {
                    if ($window.trackPageView) $window.trackPageView($rootScope.kaspersky.pageName + ' > Email Form Popup\'');
                }
            });
        }

        function startDownload(link, type) {
            if (!link) return;

            if (angular.isFunction($window.trackDownload)) $window.trackDownload(link, type, 'click');
            $window.open(link, '_self');
        }

        function openCrossSellPopup(product) {
            $q.all([getProductPopupData(product), getProductCrossSellProductsData(product)]).then(function () {
                ngDialog.open({
                    'template': '/resources/template/html/modules/b2c/components/thankyou-section/templates/cross-sell-popup.html',
                    'className': 'ngdialog-flyout thank-you-popup-bg',
                    'name': 'cross-sell-popup',
                    'data': ctrl._crossSellDialogData,
                    'preCloseCallback': function preCloseCallback() {
                        ctrl.isPopupOpen = false;
                        resetCrossSellDialogData();
                    }
                });
            });
        }

        function getProductPopupData() {
            return $http.get('/content/' + ENV.locale + '/home-security/cross-sell-popup.json').then(function (response) {
                ctrl._crossSellDialogData.data = response.data.fields;
            });
        }

        function getProductCrossSellProductsData(product) {
            return $q.all(product.crossSellPopup.products.map(function (prodKey) {
                return productData.getb2c(prodKey);
            })).then(function (responses) {
                ctrl._crossSellDialogData.products = responses.map(function (response) {
                    return response.data.fields;
                });
            });
        }

        function resetCrossSellDialogData() {
            ctrl._crossSellDialogData = {
                'data': {},
                'products': {}
            };
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cThreatsPostHeader', {
        'templateUrl': '/resources/template/html/modules/b2c/components/threats-post-header/templates/threats-post-header.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('b2cThankYouV1Header', {
        'templateUrl': '/resources/template/html/modules/b2c/components/thank-you-v1-header/templates/thank-you-v1-header.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('kpmSection', {
        'templateUrl': '/resources/template/html/modules/b2c/components/tools/templates/kpm-section.html',
        'controller': 'b2cController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').component('kssSection', {
        'bindings': {
            'type': '@',
            'copy': '@',
            'syncPriceList': '='
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/tools/templates/kss-section.html',
        'controller': 'kssSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    kssSectionController.$inject = ["$element", "$timeout", "directiveData", "appHelperService", "$http", "ENV", "tracking", "windowHelperService", "errorService", "angularLoad", "$document", "geoLocationManager"];
    angular.module('kappGlobal.b2c').controller('kssSectionController', kssSectionController);

    function kssSectionController($element, $timeout, directiveData, appHelperService, $http, ENV, tracking, windowHelperService, errorService, angularLoad, $document, geoLocationManager) {
        var ctrl = this,
            magnificPopupConfig = {
            'delegate': 'a',
            'type': 'image',
            'closeOnContentClick': false,
            'closeBtnInside': false,
            'mainClass': 'mfp-with-zoom mfp-img-mobile',
            'image': {
                'verticalFit': true
            },
            'gallery': {
                'enabled': true
            },
            'zoom': {
                'enabled': true,
                'duration': 300,
                'opener': function opener(element) {
                    return element.find('img');
                }
            }
        },
            gallerySlider2Config = {
            'infinite': true,
            'slidesToShow': 2,
            'dots': true,
            'draggable': false,
            'centerMode': true,
            'nextArrow': '<a type="button" href="" class="next-slide"></a>',
            'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
            'rtl': appHelperService.isPageDirectionRTL(),
            'responsive': [{
                'breakpoint': 480,
                'settings': {
                    'slidesToShow': 1
                }
            }]
        };

        ctrl.isAffiliate = appHelperService.assertStateByName('product-ksk-affiliate');
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.currentLocale = ENV.locale;
        ctrl.$onInit = activate;
        ctrl.isBuyblockAvailable = isBuyblockAvailable;

        function activate() {
            getData();
            buyblockSetup();

            if (appHelperService.assertStateByName('product-kscloud-free')) blockProhibitedCountries();
        }

        function blockProhibitedCountries() {
            if (ctrl.currentLocale === 'en\-global' && geoLocationManager.isKscProhibitedCountry() || ctrl.currentLocale === 'ru-ru' && geoLocationManager.getUserGeoIp() === 'by') ctrl.isProductBlocked = true;
        }

        function buyblockSetup() {
            return directiveData.getLocal('buyblock/buyblock-texts').then(function (response) {
                ctrl.buyblockData = response.data.fields;
            });
        }

        function loadBodyMovin() {
            if (!ctrl.data.animations) return;
            angularLoad.loadScript('resources/template/js/bodymovin_light.4.13.0.min.js').then(function () {
                ctrl.data.animations.forEach(function (animation) {
                    var params = {
                        'container': angular.element($document[0].getElementById(animation.id))[0],
                        'renderer': 'svg',
                        'loop': true,
                        'autoplay': true,
                        'animationData': JSON.parse(animation.animationData)
                    };

                    if (params.container && params.animationData) bodymovin.loadAnimation(params);
                });
            });
        }

        function removeHtml(str) {
            return str.replace(/(<([^>]+)>)/ig, '');
        }

        function isBuyblockAvailable() {
            return ctrl.syncPriceList && ctrl.syncPriceList.active && !ctrl.syncPriceList.productPricesExist && angular.isDefined(ctrl.syncPriceList.productPricesExist);
        }

        function checkBuyLink(link) {
            return link.indexOf('https://store.kaspersky') > -1;
        }

        function getData() {
            return directiveData.getByUrl('kss-section').then(function (response) {
                ctrl.data = response.data.fields;
                var imgAlt = removeHtml(ctrl.data.productBrand + ' ' + ctrl.data.productName);
                if (ctrl.data.mainImage && ctrl.data.mainImage[0]) ctrl.data.mainImage[0].imageAlt = imgAlt;
                ctrl.isBuyLink = checkBuyLink(ctrl.data.downloadLink || '');
                runScript();

                loadBodyMovin();

                if (ctrl.data.quickmenuButtons) {
                    ctrl.data.quickmenuButtons.forEach(function (item, index) {
                        if (item['product'] && item['product'].match(/\.json/)) {
                            return $http.get(item['product']).then(function (response) {
                                return ctrl.data.quickmenuButtons[index].product = response.data.fields;
                            }, handleRejection);
                        }
                    });
                }
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runScript() {
            $timeout(function () {

                $($element).find('.popup-gallery div').magnificPopup(magnificPopupConfig);

                function initGallerySlider2() {
                    return gallerySlider2Config;
                }

                $($element).find('.gallery-slider-2').slick(initGallerySlider2());
            });
        }

        ctrl.sendToBuyUrl = function (buyLink) {
            var link = ctrl.syncPriceList && ctrl.syncPriceList.buyLink || buyLink;
            windowHelperService.goToUrl(tracking.formatQueryString(link));
        };

        ctrl.addSalesTrackingParameters = function (event, buyLink) {
            if (event) event.preventDefault();
            ctrl.sendToBuyUrl(buyLink);
        };
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.b2c').component('welcomeSection', {
        'bindings': {
            'type': '@',
            'productInfo': '<'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/welcome-section/templates/welcome-section.html',
        'controller': 'welcomeSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.b2c').controller('welcomeSectionController', welcomeSectionController);

    function welcomeSectionController() {
        var ctrl = this;
        ctrl.popupGallery = popupGallery;

        function popupGallery() {
            $('.popup-gallery div').magnificPopup({
                'delegate': 'a',
                'type': 'image',
                'closeOnContentClick': false,
                'closeBtnInside': false,
                'mainClass': 'mfp-with-zoom mfp-img-mobile',
                'image': {
                    'verticalFit': true
                },
                'gallery': {
                    'enabled': true
                },
                'zoom': {
                    'enabled': true,
                    'duration': 300,
                    'opener': function opener(element) {
                        return element.find('img');
                    }
                }
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entArticle', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'type': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/article/templates/article.html',
        'controller': 'entArticleController'
    });
})();
'use strict';

(function () {
    'use strict';

    entArticleController.$inject = ["$timeout", "$element", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entArticleController', entArticleController);

    function entArticleController($timeout, $element, directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-articles').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    $($element).find('.image-link').magnificPopup({
                        'type': 'image',
                        'closeOnContentClick': false,
                        'closeBtnInside': true
                    });

                    $($element).find('.popup-link').magnificPopup({
                        'type': 'iframe',
                        'closeOnContentClick': false,
                        'closeBtnInside': true
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entAwardsExtended', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/awards/templates/awards-extended.html',
        'controller': 'entAwardsController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entAwards', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/awards/templates/awards.html',
        'controller': 'entAwardsController'
    });
})();
'use strict';

(function () {
    'use strict';

    entAwardsController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entAwardsController', entAwardsController);
    function entAwardsController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-awards').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entBanner', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/banner/templates/banner.html',
        'controller': 'entBannerController'
    });
})();
'use strict';

(function () {
    'use strict';

    entBannerController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entBannerController', entBannerController);
    function entBannerController(directiveData, errorService) {
        var ctrl = this;
        ctrl.hasColor = false;
        ctrl.hasImg = false;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-banner').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data.bannerBgColor) ctrl.hasColor = true;
                if (ctrl.data.bannerBgImg) ctrl.hasImg = true;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entBenefitsSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/benefits-section/templates/benefits-section.html',
        'controller': 'enterpriseController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('bttBtn', {
        'templateUrl': '/resources/template/html/modules/enterprise/components/btt-btn/templates/scroll-button.html',
        'controller': 'bttBtnController'
    });
})();
'use strict';

(function () {
    'use strict';

    bttBtnController.$inject = ["$rootScope", "$scope", "$window", "$document"];
    angular.module('kappGlobal.enterprise').controller('bttBtnController', bttBtnController);

    function bttBtnController($rootScope, $scope, $window, $document) {
        var ctrl = this,
            ngRender = $rootScope.$on('ngRender', function () {
            loadBtt();

            ngRender();
        });

        ctrl.$onDestroy = destroyGlobalListeners;

        function destroyGlobalListeners() {
            angular.element($window).off('scroll.bttBtnController');
        }

        function loadBtt() {
            // section object and positions

            var $sections = $document.find('.btt-section, .ent-section').filter(function (index, value) {
                return $(value).contents().filter(function () {
                    return this.nodeType === 1;
                }).length > 0;
            }),
                sectionsLength = $sections.length,
                $last = void 0,
                $btt = $document.find('.scroll-button'),
                $btt_back_class = 'scroll-button-top',
                $inViewOnPageLoad = void 0;

            // return closest position

            function findNearest(obj, value) {
                var nearest = void 0,
                    next = void 0,
                    prev = void 0,
                    percentage = void 0;

                for (var i in obj) {
                    if (value > obj[i].topPos) prev = obj[i].topPos;else if (value <= obj[i].topPos) {
                        next = obj[i].topPos;
                        percentage = Math.abs(value - prev) < Math.abs(next - value) ? prev : next;

                        nearest = parseInt(Object.keys(obj).filter(function (key) {
                            return obj[key].topPos === percentage;
                        })[0]);

                        break;
                    }
                }

                return nearest;
            }

            $sections.each(function (index, value) {
                $(value).prop('topPos', $(value).offset().top);

                if (index === sectionsLength - 1) {
                    $last = value;
                }
            });

            $inViewOnPageLoad = findNearest($sections, Math.abs($document[0].body.getBoundingClientRect().top));

            // scroll event

            var goTo = $inViewOnPageLoad || 0,
                currentScrollPosition = void 0,
                lastElemPosition = void 0;

            angular.element($window).on('scroll', onScrollEvent);

            $scope.$on('$destroy', function () {
                angular.element($window).off('scroll', onScrollEvent);
            });

            function onScrollEvent() {
                goTo = findNearest($sections, currentScrollPosition);
                currentScrollPosition = $(document).scrollTop();
                lastElemPosition = currentScrollPosition + $(window).height() - $last.getBoundingClientRect().top + 50;

                if (currentScrollPosition <= lastElemPosition || goTo < 0 || angular.isUndefined(goTo)) {
                    goTo = 0;

                    $btt.addClass($btt_back_class);
                } else {
                    $btt.removeClass($btt_back_class);
                }

                if (currentScrollPosition + $(window).height() > $(document).height() - 200 && goTo !== 0) {
                    goTo = 0;
                }
            }

            // btn click event

            ctrl.btt = function ($event) {
                $event.preventDefault();

                $sections.each(function (index, value) {
                    $(value).prop('topPos', $(value).offset().top);
                });

                if (goTo <= $sections.length - 1 && !$btt.hasClass($btt_back_class)) {
                    goTo += 1;
                } else {
                    goTo = 0;
                }

                if (!$('html, body').is(':animated')) {
                    $('html, body').animate({
                        'scrollTop': goTo === 0 ? 0 : $sections[goTo].topPos - 106
                    }, 500, 'swing');
                }
            };
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entCaseStudies', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/case-studies/templates/case-studies.html',
        'controller': 'entCaseStudiesController'
    });
})();
'use strict';

(function () {
    'use strict';

    entCaseStudiesController.$inject = ["$http", "$rootScope", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entCaseStudiesController', entCaseStudiesController);
    function entCaseStudiesController($http, $rootScope, directiveData, errorService) {
        var ctrl = this;
        ctrl.show = false;
        ctrl.solutions = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl(ctrl.resource || 'case-studies').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.data.solutions.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        $http.get(item).then(function (response) {
                            ctrl.solutions[index] = response.data.fields;
                            if (angular.isDefined(ctrl.solutions[index].ArticleTitle)) {
                                ctrl.solutions[index].ArticleTitle = String(ctrl.solutions[index].ArticleTitle).replace(/<[^>]+>/gm, '');
                            }
                        }, handleRejection).then(function () {
                            if (!angular.equals({}, ctrl.solutions)) ctrl.show = true;
                        });
                    }
                });
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        var ngRender = $rootScope.$on('ngRender', runScripts);

        function runScripts() {
            $('.play-video').magnificPopup({
                'type': 'iframe',
                'closeOnContentClick': false,
                'closeBtnInside': true
            });
            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('categoryMenuProducts', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/category-menu/templates/category-menu-products.html',
        'controller': 'categoryMenuController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('categoryMenu', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/category-menu/templates/category-menu.html',
        'controller': 'categoryMenuController'
    });
})();
'use strict';

(function () {
    'use strict';

    categoryMenuController.$inject = ["$rootScope", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('categoryMenuController', categoryMenuController);

    function categoryMenuController($rootScope, directiveData, errorService) {
        var ctrl = this;
        ctrl.template = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        var ngRender = $rootScope.$on('ngRender', runScripts);

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'category-menu').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            angular.forEach(angular.element.find('.title.title-enterprise-solution'), function (value) {
                var computedHeight = (110 - value.offsetHeight) / 2 - 10;
                value.style.top = computedHeight.toString() + 'px';
            });
            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entContactForm', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/contact-form/templates/contact-form.html',
        'controller': 'entContactFormController'
    });
})();
'use strict';

(function () {
    'use strict';

    entContactFormController.$inject = ["directiveData", "$scope", "marketoHelperService", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entContactFormController', entContactFormController);
    function entContactFormController(directiveData, $scope, marketoHelperService, errorService) {
        var ctrl = this;
        ctrl.formId = '';
        ctrl.formNr = 0;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-contact-form').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.formId = ctrl.data.formId;
                ctrl.formNr = parseInt(ctrl.data.formNr);
                runMarketo(ctrl.formId, ctrl.formNr);
            }, handleRejection);
        }

        function runMarketo(mId, mNr) {
            marketoHelperService.loadMarketo(mId, mNr, $scope);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entContent', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/content/templates/content.html',
        'controller': 'entContentController'
    });
})();
'use strict';

(function () {
    'use strict';

    entContentController.$inject = ["$element", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entContentController', entContentController);

    function entContentController($element, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('ent-content').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    $($element).find('.popup-link').magnificPopup({
                        'closeOnContentClick': false,
                        'closeBtnInside': true,
                        'fixedContentPos': true,
                        'mainClass': 'mfp-no-margins mfp-with-zoom',
                        'image': {
                            'verticalFit': true
                        },
                        'zoom': {
                            'enabled': true,
                            'duration': 300
                        }
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entDisclaimer', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/disclaimer/templates/disclaimer.html',
        'controller': 'enterpriseController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entGrid', {
        'bindings': {
            'resource': '@',
            'type': '@'
        },
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'ent-grid';

            switch ($attrs.type) {
                case 'related-products':
                    template = 'related-products';
                    break;
                case 'res-article':
                    template = 'res-articles';
                    break;
                case '2.0-related-products':
                    template = 'related-products';
                    break;
            }

            if ($attrs.resource && $attrs.resource !== 'ent-solution-grid-2' && !$attrs.resource.match(/related-products-(.*)/)) template = $attrs.resource;

            return '/resources/template/html/modules/enterprise/components/ent-grid/templates/' + template + '.html';
        }],
        'controller': 'entGridController'
    });
})();
'use strict';

(function () {
    'use strict';

    entGridController.$inject = ["directiveData", "appHelperService", "$element", "$http", "$q", "$scope", "$timeout", "errorService", "$state", "ENV"];
    angular.module('kappGlobal.enterprise').controller('entGridController', entGridController);

    function entGridController(directiveData, appHelperService, $element, $http, $q, $scope, $timeout, errorService, $state, ENV) {
        var ctrl = this;
        ctrl.entBlockType = ' ellipsis ';
        ctrl.summaryDisplay = '';
        ctrl.tab = 0;
        ctrl.setTab = setTab;
        ctrl.isSet = isSet;
        ctrl.scopeId = $scope.$id;
        ctrl.$onInit = activate;
        ctrl.locale = ENV.locale;
        ctrl.$onDestroy = function () {
            ctrl.dotdotdotObj && ctrl.dotdotdotObj.destroy();
            $($element).find('.solutions-slider:not(.slick-initialized):not(.solutions-slider-disabled).solutions-slider-' + ctrl.scopeId).slick('unslick');
        };

        // slider option definitions

        var slickConfig = {
            'slidesToShow': 1,
            'prevArrow': '<button type="button" class="slick-prev"></button>',
            'nextArrow': '<button type="button" class="slick-next"></button>',
            'dots': $state.current.name !== 'enterprise-wiki-section',
            'accessibility': false,
            'rtl': appHelperService.isPageDirectionRTL(),
            'mobileFirst': true,
            'responsive': [{
                'breakpoint': 992,
                'settings': {
                    'slidesToShow': 3,
                    'slidesToScroll': 3,
                    'arrows': true
                }
            }, {
                'breakpoint': 600,
                'settings': {
                    'slidesToShow': 2,
                    'slidesToScroll': 2
                }
            }]
        };

        // magnificPopup plugin option definitions

        var magnificPopupConfig = {
            'type': 'iframe',
            'closeOnContentClick': false,
            'closeBtnInside': true
        };

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            var blockType = 'ent-solution-grid';

            switch (ctrl.type) {
                case 'res-article':
                    blockType = 'ent-res-articles';
                    break;
                case 'related-products':
                    blockType = 'ent-product-slider';
                    break;
                case '2.0-related-products':
                    blockType = '2.0-related-products';
                    break;
                case '2.0-case-studies':
                    blockType = '2.0-case-studies';
                    break;
                case '2.0-white-papers':
                    blockType = '2.0-white-papers';
                    break;
            }

            return directiveData.getByUrl(ctrl.resource || blockType).then(function (response) {
                ctrl.data = response.data.fields;
                if (blockType === 'ent-product-slider' || blockType === '2.0-related-products') {
                    var promises = ctrl.data.products.map(function (item, index) {
                        if (item.match(/\.json/)) {
                            return $http.get(item).then(function (response) {
                                return ctrl.data.products[index] = response.data.fields;
                            }, handleRejection);
                        }
                    });
                    $q.all(promises).then(function () {
                        loadScripts();
                    }, handleRejection);
                } else {
                    var _promises = [];
                    ctrl.data.sections.forEach(function (item, index1) {
                        var solutionPromises = item.solutions.map(function (item, index2) {
                            if (item.match(/\.json/)) {
                                return $http.get(item).then(function (response) {
                                    var states = ['enterprise-home', 'enterprise-resource', 'enterprise-resources'];
                                    if (response.data.fields.HideSummary && response.data.fields.HideSummary[0] === 'True' && !appHelperService.assertStateByName(states)) {
                                        ctrl.summaryDisplay = 'hide-summary';
                                    }

                                    return ctrl.data.sections[index1].solutions[index2] = response.data.fields;
                                }, handleRejection);
                            }
                        });
                        _promises = _promises.concat(solutionPromises);
                    });
                    $q.all(_promises).then(function () {
                        loadScripts();
                    }, handleRejection);
                }
            }, handleRejection);
        }

        function updateSlider() {
            $($element).find('.ellipsis .content').trigger('update.dot');
        }

        function setTab(newTab) {
            ctrl.tab = newTab;

            $timeout(function () {
                $($element).find('.slider-' + newTab + '--slider .solutions-slider').slick('setPosition');
                updateSlider();
            });
        }

        function isSet(tabNum) {
            return ctrl.tab === tabNum;
        }

        function activateSliders() {
            var slider = '.solutions-slider:not(.slick-initialized):not(.solutions-slider-disabled).solutions-slider-' + ctrl.scopeId,
                dotdotdotSelector = ['.ellipsis-short .content', '.ellipsis-short .content p', '.ellipsis-short product-title h3', '.ellipsis .content product-desc p', '.ellipsis .content article-title h3', '.ellipsis .content solution-summary'].join(', '),
                elt = $($element),
                sliderElt = elt.find(slider);

            sliderElt.on('init', function () {
                ctrl.dotdotdotObj && ctrl.dotdotdotObj.destroy && ctrl.dotdotdotObj.destroy();

                var $selectedElts = $(elt[0].querySelectorAll(dotdotdotSelector));

                ctrl.dotdotdotObj = $selectedElts.dotdotdot({
                    'watch': true,
                    'ellipsis': '... ',
                    'height': 80
                }).data('dotdotdot');
            });

            sliderElt.slick(slickConfig);

            elt.find('.solutions-slider.solutions-slider-' + ctrl.scopeId).on('breakpoint', function () {
                updateSlider();
            });
        }

        function loadScripts() {

            $timeout(function () {
                activateSliders();
                $($element).find('.videoPopup, .ent-btn.play').magnificPopup(magnificPopupConfig);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entFeatureCaseStudy', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/feature-case-study/templates/feature-case-study.html',
        'controller': 'entFeatureCaseStudyController'
    });
})();
'use strict';

(function () {
    'use strict';

    entFeatureCaseStudyController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entFeatureCaseStudyController', entFeatureCaseStudyController);
    function entFeatureCaseStudyController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'feature-case-study').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entFeatures', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/features/templates/features.html',
        'controller': 'entFeaturesController'
    });
})();
'use strict';

(function () {
    'use strict';

    entFeaturesController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entFeaturesController', entFeaturesController);
    function entFeaturesController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-features').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entGallerySlider', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/gallery-slider/templates/gallery-slider.html',
        'controller': 'entGallerySliderController'
    });
})();
'use strict';

(function () {
    'use strict';

    entGallerySliderController.$inject = ["$timeout", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entGallerySliderController', entGallerySliderController);

    function entGallerySliderController($timeout, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('ent-gallery-slider').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    //////////////////////////////////////////
                    // Slider
                    //////////////////////////////////////////
                    var slickConfig = {
                        'slidesToShow': 1,
                        'prevArrow': '<button type="button" class="slick-prev"></button>',
                        'nextArrow': '<button type="button" class="slick-next"></button>',
                        'arrows': true,
                        'dots': true,
                        'rtl': appHelperService.isPageDirectionRTL(),
                        'responsive': [{
                            'breakpoint': 769,
                            'settings': {
                                'arrows': false,
                                'dots': true
                            }
                        }]
                    };
                    $('.gallery-slider').each(function () {
                        $(this).slick(slickConfig);
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entHeader', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'overlay': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/header/templates/header.html',
        'controller': 'entHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    entHeaderController.$inject = ["$anchorScroll", "$location", "directiveData", "windowHelperService", "$scope", "$timeout", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entHeaderController', entHeaderController);

    function entHeaderController($anchorScroll, $location, directiveData, windowHelperService, $scope, $timeout, errorService) {
        var ctrl = this;
        ctrl.changeMenu = changeMenu;
        ctrl.animatedScrollTo = animatedScrollTo;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        $scope.$on('$destroy', runScripts);

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-header').then(function (response) {
                ctrl.data = response.data.fields;
                setMenuDefault();
                $timeout(function () {
                    runScripts();
                }, 200);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            var $window = $(window);

            ctrl.scrollTo = function (id) {
                $location.hash(id);
                $anchorScroll();
            };

            function updateSideNav($nav, $navItems, $navWrap, $sections, navWrapOffsetTop) {
                var windowMiddle = $window.scrollTop() + $window.height() / 3;

                if ($window.scrollTop() < navWrapOffsetTop) {
                    $navWrap.removeClass('stuck');
                    $navItems.removeClass('active');
                    return;
                }

                $navWrap.addClass('stuck');
                $sections.each(function () {
                    var $elt = $(this);
                    // var offsetBottom = $(this).offset().top + $(this).outerHeight(true);
                    // if (windowMiddle >= offsetTop && windowMiddle < offsetBottom) {
                    if (windowMiddle < $elt.offset().top) {
                        return;
                    }

                    var getNavItemFromHref = function getNavItemFromHref(href) {
                        return $nav.find('a[href$="#' + href + '"]').first();
                    },

                    // case 1: the anchor is a child element
                    $navItem = getNavItemFromHref($elt.find('a[id]').attr('id'));

                    // case 2: the anchor is a previous sibling
                    $navItem = $navItem.length !== 0 ? $navItem : getNavItemFromHref($elt.parent().find('a').attr('id'));

                    if ($navItem.length) {
                        $navItems.removeClass('active');
                        $navItem.parent().addClass('active');
                    }
                });
            }

            var mainnavHeight2 = $('#site-header .main-nav').outerHeight(true),
                $siteTop = $('.site-top'),
                $siteHeaderTitle = $('.site-header .site-title'),
                totalHeight = $siteTop.outerHeight(true) + $siteHeaderTitle.outerHeight(true),
                headerHeight = $siteTop.outerHeight(true) + $('.site-header').outerHeight(true) + $('.page-header').outerHeight(true) - $('.page-nav').outerHeight(true),
                sections = $('.ent-section > section:not(:empty)'),
                nav = $('#page-nav');

            function handleStickyHeaderOnScroll() {
                var scroll = $window.scrollTop();
                var $body = $('body');

                if (scroll >= totalHeight) {
                    $body.addClass('sticky-header-on');
                } else {
                    $body.removeClass('sticky-header-on');
                }
                if (scroll >= headerHeight) {
                    $body.addClass('sticky-pagenav-on');
                    if ($window.width() > 768) {
                        $('#page-nav').css('top', mainnavHeight2);
                    }
                } else {
                    $body.removeClass('sticky-pagenav-on');
                    $('#page-nav').css('top', 'auto');
                }
            }

            function handleInnerEntScroll() {
                var cur_pos = $(this).scrollTop();

                sections.each(function () {
                    var $elt = $(this),
                        top = $elt.offset().top - nav.outerHeight(true) - 200;

                    if (cur_pos >= top) {
                        nav.find('a').removeClass('active');
                        sections.removeClass('active');

                        $elt.addClass('active');

                        var href = $elt.attr('id');
                        nav.find('a[href="#' + href + '"]').addClass('active');
                    }
                });
            }

            if (ctrl.template !== '2.1' && ctrl.template !== 'ent-3.0') {
                var $navWrap = $('.enterprise-solutions-nav-wrapper');

                if (!$navWrap.length) {
                    return;
                }

                var $nav = $navWrap.find('.enterprise-solutions-nav'),
                    $navItems = $nav.find('> li'),
                    $mainNav = $('#site-header .main-nav'),
                    navWrapOffsetTop = $navWrap.offset().top + $mainNav.height() - 96,
                    $sections = $();

                // build up the selection of sections and subsections (multiple a[id] inside one section)
                $('.section').each(function () {
                    var $elt = $(this),
                        parentAnchor = $elt.parent().find('a').attr('id'),
                        anchoredSubSections = $elt.find('a[id]');

                    if (parentAnchor) {
                        $sections = $sections.add($elt);
                    }

                    anchoredSubSections.each(function () {
                        if (this.id) {
                            $sections = $sections.add($(this).closest('.row'));
                        }
                    });
                });

                $navItems.find('> a').click(function (e) {
                    e.preventDefault();
                    var $scrollToSection = $($(this).attr('href'));
                    if ($scrollToSection.length) {
                        // $('html, body').animate({scrollTop: ($scrollToSection.offset().top - ($mainNav.height() + $nav.height()))}, 700);
                        $('html, body').animate({ 'scrollTop': $scrollToSection.offset().top }, 700);
                    }
                });

                updateSideNav($nav, $navItems, $navWrap, $sections, navWrapOffsetTop);

                angular.element($window).on('scroll.entHeader', function () {
                    updateSideNav($nav, $navItems, $navWrap, $sections, navWrapOffsetTop);
                });

                angular.element($window).on('resize.entHeader', function () {
                    updateSideNav($nav, $navItems, $navWrap, $sections, navWrapOffsetTop);
                });

                $scope.$on('$destroy', function () {
                    $($window).off('scroll.entHeader');
                    $($window).off('resize.entHeader');
                });
            } else if (ctrl.template === '2.1' || ctrl.template === 'ent-3.0') {
                angular.element($window).on('scroll.stickyNav', handleStickyHeaderOnScroll);
                angular.element($window).on('scroll.innerEnt', handleInnerEntScroll);

                $scope.$on('$destroy', function () {
                    $($window).off('scroll.stickyNav');
                    $($window).off('scroll.innerEnt');
                });
            }
        }

        function animatedScrollTo(id, $event) {
            $event.preventDefault();
            $event.stopPropagation();

            var target = $('#' + id);
            var offset = $('.main-menu').outerHeight(true) + $('.page-nav').outerHeight(true);

            if (!target.length) return errorService.warn('Couldn\'t find [' + id + '] on the page');

            $('html, body').animate({
                'scrollTop': target.offset().top - offset
            }, 500);
        }

        function changeMenu(menu) {
            windowHelperService.goToUrl(menu.link);
        }

        function setMenuDefault() {
            if (ctrl.data.headerMenu) ctrl.selectedMenu = ctrl.data.headerMenu[0];
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entHpMenu', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/hp-menu/templates/hp-menu.html',
        'controller': 'entHpMenuController'
    });
})();
'use strict';

(function () {
    'use strict';

    entHpMenuController.$inject = ["$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entHpMenuController', entHpMenuController);

    function entHpMenuController($timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.template = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-hp-menu').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.template = ctrl.data.template || '1.0';
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            angular.forEach(angular.element.find('.title.title-enterprise-solution'), function (value) {
                var computedHeight = (110 - value.offsetHeight) / 2 - 10;
                value.style.top = computedHeight.toString() + 'px';
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entOfferSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/offer-section/templates/offer-section.html',
        'controller': 'entOfferSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    entOfferSectionController.$inject = ["$http", "$element", "$scope", "$timeout", "ngDialog", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entOfferSectionController', entOfferSectionController);

    function entOfferSectionController($http, $element, $scope, $timeout, ngDialog, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;
        ctrl.openPopup = openPopup;

        function activate() {
            getData();
            ctrl.getSectionClass = getSectionClass;
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getSectionClass() {
            var classes = [];

            if (ctrl.data.diamondList === 'Yes') {
                classes.push('diamond-list');
            }
            if (ctrl.data.products.length < 6 && ctrl.data.products.length !== 4 && ctrl.data.products.length !== 3) {
                classes.push('section-col-l-' + ctrl.data.products.length);
            }

            if (ctrl.data.products.length % 4 === 0) {
                classes.push('section-col-l-4');
            } else if (ctrl.data.products.length % 3 === 0) {
                classes.push('section-col-l-3');
            }

            return classes.join(' ');
        }

        function openPopup() {
            ngDialog.open({
                'plain': true,
                'template': '<div class="cyber-incident-banner-popup"><img ng-src="{{ngDialogData.data.article.articleImg}}"></div>',
                'className': 'cyber-incident-banner-popup',
                'data': ctrl,
                'scope': $scope
            });
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-offer-section').then(function (response) {
                function init_carousel() {
                    $timeout(function () {

                        //////////////////////////////////////////
                        // Slider
                        //////////////////////////////////////////

                        $($element).find('.solutions-slider').addClass('solutions-slider-' + $scope.$id);

                        $('.solutions-slider.solutions-slider-' + $scope.$id).each(function () {
                            var slickConfig = {
                                'slidesToShow': 3,
                                'prevArrow': '<button type="button" class="slick-prev"></button>',
                                'nextArrow': '<button type="button" class="slick-next"></button>',
                                'rtl': appHelperService.isPageDirectionRTL(),
                                'responsive': [{
                                    'breakpoint': 992,
                                    'settings': {
                                        'slidesToShow': 2
                                    }
                                }, {
                                    'breakpoint': 769,
                                    'settings': {
                                        'slidesToShow': 1,
                                        'arrows': false,
                                        'dots': true
                                    }
                                }]
                            };
                            $(this).slick(slickConfig);
                        });
                    });
                }

                var loop_counter = 0;
                ctrl.data = response.data.fields;
                ctrl.data.products.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            loop_counter++;
                            if (loop_counter === ctrl.data.products.length) {
                                init_carousel();
                            }
                            return ctrl.data.products[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entOverview', {
        'bindings': {
            'resource': '@',
            'template': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/overview/templates/overview.html',
        'controller': 'entOverviewController'
    });
})();
'use strict';

(function () {
    'use strict';

    entOverviewController.$inject = ["$http", "directiveData", "errorService", "$timeout", "$element"];
    angular.module('kappGlobal.enterprise').controller('entOverviewController', entOverviewController);
    function entOverviewController($http, directiveData, errorService, $timeout, $element) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
            openPopup();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function openPopup() {
            $timeout(function () {
                $($element).find('.image-link').magnificPopup({
                    'type': 'image',
                    'closeOnContentClick': false,
                    'closeBtnInside': true
                });

                $($element).find('.video-link').magnificPopup({
                    'type': 'iframe',
                    'closeOnContentClick': false,
                    'closeBtnInside': true
                });
            }, 1000);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-overview').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.data.products.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            return ctrl.data.products[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entPost', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/post/templates/post.html',
        'controller': 'entPostController'
    });
})();
'use strict';

(function () {
    'use strict';

    entPostController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entPostController', entPostController);

    function entPostController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-post').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entPromo', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/promo/templates/promo.html',
        'controller': 'entPromoController'
    });
})();
'use strict';

(function () {
    'use strict';

    entPromoController.$inject = ["$timeout", "$element", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entPromoController', entPromoController);
    function entPromoController($timeout, $element, directiveData, errorService) {
        var ctrl = this;
        ctrl.autoPlay = false;
        ctrl.autoPlaySpeed = 0;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-promo').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.promoType = ctrl.data.promoType || 'banner';

                if (ctrl.data.autoPlaySpeed) {
                    ctrl.autoPlay = true;
                    ctrl.autoPlaySpeed = ctrl.data.autoPlaySpeed * 1000;
                }
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                $element.hide();
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            $($element).find('.slides-1-fade').not('.activate-auto-play').slick({
                'infinite': true,
                'slidesToShow': 1,
                'slidesToScroll': 1,
                'dots': true,
                'draggable': false,
                'fade': true,
                'arrows': true,
                'nextArrow': '<a type="button" href="" class="next-slide slick-arrow"></a>',
                'prevArrow': '<a type="button" href="" class="prev-slide slick-arrow"></a>'
            });

            $($element).find('.slides-1-fade.activate-auto-play').slick({
                'infinite': true,
                'slidesToShow': 1,
                'slidesToScroll': 1,
                'dots': true,
                'draggable': false,
                'fade': true,
                'arrows': true,
                'nextArrow': '<a type="button" href="" class="next-slide slick-arrow"></a>',
                'prevArrow': '<a type="button" href="" class="prev-slide slick-arrow"></a>',
                'autoplay': ctrl.autoPlay,
                'autoplaySpeed': ctrl.autoPlaySpeed
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entPyramid', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/pyramid/templates/pyramid.html',
        'controller': 'entPyramidController'
    });
})();
'use strict';

(function () {
    'use strict';

    entPyramidController.$inject = ["directiveData", "windowHelperService", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entPyramidController', entPyramidController);

    function entPyramidController(directiveData, windowHelperService, errorService) {
        var ctrl = this;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('ent-pyramid').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entRelatedProducts', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/related-products/templates/related-products.html',
        'controller': 'entRelatedProductsController'
    });
})();
'use strict';

(function () {
    'use strict';

    entRelatedProductsController.$inject = ["$http", "$rootScope", "directiveData", "$timeout", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entRelatedProductsController', entRelatedProductsController);

    function entRelatedProductsController($http, $rootScope, directiveData, $timeout, errorService) {
        var ctrl = this;
        ctrl.show = false;
        ctrl.products = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-related-products').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.data.products.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        $http.get(item).then(function (response) {
                            ctrl.products[index] = response.data.fields;
                            ctrl.products[index].ArticleTitle = String(ctrl.products[index].ArticleTitle).replace(/<[^>]+>/gm, '');
                        }, handleRejection).then(function () {
                            if (!angular.equals({}, ctrl.products)) ctrl.show = true;
                        });
                    }
                });
            }, handleRejection);
        }

        var ngRender = $rootScope.$on('ngRender', runScripts);

        function runScripts() {
            $timeout(function () {
                $('.related-products-section .slides').not('.slick-initialized').slick({
                    'infinite': true,
                    'slidesToShow': 3,
                    'slidesToScroll': 3,
                    'dots': true,
                    'draggable': false,
                    'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                    'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                    'responsive': [{
                        'breakpoint': 769,
                        'settings': {
                            'slidesToShow': 2,
                            'slidesToScroll': 2,
                            'infinite': true,
                            'arrows': false,
                            'dots': true
                        }
                    }, {
                        'breakpoint': 600,
                        'settings': {
                            'slidesToShow': 2,
                            'slidesToScroll': 2,
                            'arrows': false
                        }
                    }, {
                        'breakpoint': 480,
                        'settings': {
                            'slidesToShow': 1,
                            'slidesToScroll': 1,
                            'arrows': false
                        }
                    }]
                });
            }, 1000);

            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entResArticles', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/res-articles/templates/res-articles.html',
        'controller': 'entResArticlesController'
    });
})();
'use strict';

(function () {
    'use strict';

    entResArticlesController.$inject = ["$http", "$timeout", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entResArticlesController', entResArticlesController);

    function entResArticlesController($http, $timeout, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.entBlockType = ' item-short ellipsis-short ';
        ctrl.summaryDisplay = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('ent-res-articles').then(function (response) {
                var states = ['enterprise-home', 'enterprise-resource', 'enterprise-resources'];
                if (appHelperService.assertStateByName(states)) ctrl.entBlockType = 'ellipsis';

                ctrl.data = response.data.fields;
                ctrl.data.sections.forEach(function (item, index) {
                    item.solutions.forEach(function (solution, ind) {
                        if (solution.match(/\.json/)) {
                            return $http.get(solution).then(function (response) {
                                return ctrl.data.sections[index].solutions[ind] = response.data.fields;
                            }, handleRejection);
                        }

                        ctrl.data.sections[index].solutions[ind].Filters.forEach(function (filter, i) {
                            if (filter.match(/\.json/)) {
                                return $http.get(filter).then(function (response) {
                                    return ctrl.data.solutions[ind].Filters[i] = response.data.fields;
                                }, handleRejection);
                            }
                        });
                    });
                });
                angular.element(document).ready(function () {
                    init_scripts();
                });
            }, handleRejection);
        }

        function init_scripts() {
            $timeout(function () {
                // ellipsis
                $('.ellipsis .content h3').css('fontSize', '20px');

                $('.ellipsis .content').dotdotdot({
                    'ellipsis': '... ',
                    'height': 170,
                    'callback': function callback(isTruncated) {
                        if (isTruncated) {
                            $(this).animate({ 'opacity': 1 }, 'fast');
                        }
                    }
                });
                $('.ellipsis-short .content').dotdotdot({
                    'ellipsis': '... ',
                    'height': 85,
                    'callback': function callback(isTruncated) {
                        if (isTruncated) {
                            $(this).animate({ 'opacity': 1 }, 'fast');
                        }
                    }
                });

                //////////////////////////////////////////
                // Slider
                //////////////////////////////////////////

                $('.solutions-slider').not('.slick-initialized').each(function () {
                    var slickConfig = {
                        'slidesToShow': 3,
                        'prevArrow': '<button type="button" class="slick-prev"></button>',
                        'nextArrow': '<button type="button" class="slick-next"></button>',
                        'rtl': appHelperService.isPageDirectionRTL(),
                        'responsive': [{
                            'breakpoint': 992,
                            'settings': {
                                'slidesToShow': 2
                            }
                        }, {
                            'breakpoint': 769,
                            'settings': {
                                'slidesToShow': 1,
                                'arrows': false,
                                'dots': true
                            }
                        }]
                    };
                    $(this).slick(slickConfig);
                });

                $('.videoPopup, .ent-btn.play').magnificPopup({
                    'type': 'iframe',
                    'closeOnContentClick': false,
                    'closeBtnInside': true
                });
            }, 1000);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entResItem', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'resourceName': '@',
            'currentData': '='
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/res-item/templates/res-item.html',
        'controller': 'entResItemController'
    });
})();
'use strict';

(function () {
    'use strict';

    entResItemController.$inject = ["$http", "directiveData", "$timeout", "$window", "$element", "$q", "$rootScope", "appHelperService", "$scope", "errorService", "ENV"];
    angular.module('kappGlobal.enterprise').controller('entResItemController', entResItemController);
    function entResItemController($http, directiveData, $timeout, $window, $element, $q, $rootScope, appHelperService, $scope, errorService, ENV) {
        var ctrl = this;
        ctrl.windowWidth = $window.innerWidth;
        ctrl.entBlockType = ' item-short ellipsis-short ';
        ctrl.summaryDisplay = '';
        ctrl.$onInit = activate;
        ctrl.$donDestroy = destroyGlobalListeners;
        ctrl.currentPage = 1;
        ctrl.pageSize = 9;
        ctrl.reverse = false;
        ctrl.newData = [];
        ctrl.locale = ENV.locale;

        ctrl.resFilter = function (artArray) {
            var counter = 0,
                resFilter = '^';

            for (var i = 0; i < ctrl.currentData.length; i++) {
                if (ctrl.currentData[i] !== 'all') {
                    resFilter += '(?=.*\\b' + ctrl.currentData[i] + '\\b)';
                }
            }
            resFilter += '.*$';

            var re = new RegExp(resFilter);

            ctrl.currentData.forEach(function (item) {
                if (item === 'all') {
                    counter++;
                }
            });
            if (counter === ctrl.currentData.length) {
                return artArray;
            } else {
                return artArray.filter(function (item) {
                    if (item.itemClass.match(re)) {
                        return item;
                    }
                });
            }
        };

        function activate() {
            setEntBlockType();
            getData();
        }

        function destroyGlobalListeners() {
            angular.element(window).off('resize.resItem');
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            var allDone = $q.defer(),
                articlePromises = [],
                filterPromises = [];
            return directiveData.getByUrl('ent-res-item').then(function (response) {
                ctrl.data = response.data.fields.article;
                ctrl.data.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        articlePromises.push($http.get(item).then(function (response) {
                            ctrl.data[index] = response.data.fields;
                            ctrl.data[index].Filters.forEach(function (filter) {
                                if (filter.match(/\.json/)) {
                                    filterPromises.push($http.get(filter).then(function (response) {
                                        if (angular.isUndefined(ctrl.data[index].itemClass)) ctrl.data[index].itemClass = '';
                                        return ctrl.data[index].itemClass += 'enterprise-category--' + response.data.fields.FilterID + ' ';
                                    }, handleRejection));
                                }
                            });
                        }, handleRejection).then(function () {
                            var states = ['enterprise-home', 'enterprise-resource', 'enterprise-resources'];
                            if (response.data.fields.HideSummary && response.data.fields.HideSummary[0] === 'True' && !appHelperService.assertStateByName(states)) {
                                ctrl.summaryDisplay = 'hide-summary';
                            }
                        }));
                    }
                });
                $q.all(articlePromises).then(function () {
                    $q.all(filterPromises).then(function () {
                        // ctrl.newData = ctrl.resFilter(ctrl.data);   Causes a problem for case-studies. Legacy code before SPA
                        $scope.$watch('$ctrl.currentData', function (newVal) {
                            if (newVal) {
                                ctrl.newData = ctrl.resFilter(ctrl.data);
                            }
                        }, true);
                    });
                });

                allDone.resolve();
            }, handleRejection);
        }

        function setEntBlockType() {
            var states = ['enterprise-home', 'enterprise-resource', 'enterprise-resources'];
            if (appHelperService.assertStateByName(states)) ctrl.entBlockType = 'ellipsis';
        }

        function updateSlider() {
            $($element).find('.ellipsis .content').trigger('update.dot');
        }

        var throttleTimer = void 0;

        angular.element($window).on('resize.resItem', function () {
            clearTimeout(throttleTimer);
            throttleTimer = $timeout(function () {
                updateSlider();
            }, 250);
        });

        var ngRender = $rootScope.$on('ngRender', loadScripts);

        function loadScripts() {
            $timeout(function () {

                $($element).find('.ellipsis .content').dotdotdot({
                    'ellipsis': '... ',
                    'height': 150,
                    'callback': function callback(isTruncated) {
                        if (isTruncated) {
                            $(this).animate({ 'opacity': 1 }, 'fast');
                        }
                    }
                });

                $($element).find('.ellipsis-short .content').dotdotdot({
                    'ellipsis': '... ',
                    'height': 85,
                    'callback': function callback(isTruncated) {
                        if (isTruncated) {
                            $(this).animate({ 'opacity': 1 }, 'fast');
                        }
                    }
                });

                $($element).find('.solutions-slider').not('.slick-initialized').each(function () {
                    var slickConfig = {
                        'slidesToShow': 1,
                        'arrows': false,
                        'dots': true,
                        'mobileFirst': true,
                        'prevArrow': '<button type="button" class="slick-prev"></button>',
                        'nextArrow': '<button type="button" class="slick-next"></button>',
                        'rtl': appHelperService.isPageDirectionRTL(),
                        'responsive': [{
                            'breakpoint': 600,
                            'settings': 'unslick'
                        }]
                    };
                    $(this).slick(slickConfig);
                });

                $($element).find('.videoPopup').magnificPopup({
                    'type': 'iframe',
                    'closeOnContentClick': false,
                    'closeBtnInside': true
                });
            }, 200);

            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entResourceDocuments', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/resource-documents/templates/resource-documents.html',
        'controller': 'entResourceDocumentsController'
    });
})();
'use strict';

(function () {
    'use strict';

    entResourceDocumentsController.$inject = ["$http", "$rootScope", "directiveData", "errorService", "appHelperService"];
    angular.module('kappGlobal.enterprise').controller('entResourceDocumentsController', entResourceDocumentsController);
    function entResourceDocumentsController($http, $rootScope, directiveData, errorService, appHelperService) {
        var ctrl = this;
        ctrl.show = false;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'resource-documents').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.data.sections.forEach(function (item, index1) {
                    item.solutions.forEach(function (item, index2) {
                        if (item.match(/\.json/)) {
                            $http.get(item).then(function (response) {
                                ctrl.data.sections[index1].solutions[index2] = response.data.fields;
                                ctrl.data.sections[index1].solutions[index2].ArticleTitle = String(ctrl.data.sections[index1].solutions[index2].ArticleTitle).replace(/<[^>]+>/gm, '');
                                return ctrl.data.sections[index1].solutions[index2];
                            }, handleRejection).then(function () {
                                if (!angular.equals({}, ctrl.data.sections.solutions)) ctrl.show = true;
                            });
                        }
                    });
                });
            }, handleRejection);
        }

        var ngRender = $rootScope.$on('ngRender', runScripts);

        function runScripts() {
            var maxSlides = ctrl.data && ctrl.data.slides ? parseInt(ctrl.data.slides) : 3;

            $('.carousel.mobile-1.desktop-3').slick({
                'mobileFirst': true,
                'infinite': true,
                'arrows': false,
                'slide': 'div',
                'accessibility': false,
                'slidesToShow': 1,
                'slidesToScroll': 1,
                'dots': true,
                'draggable': false,
                'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                'rtl': appHelperService.isPageDirectionRTL(),
                'responsive': [{
                    'breakpoint': 992,
                    'settings': {
                        'slidesToShow': maxSlides,
                        'slidesToScroll': maxSlides,
                        'arrows': true
                    }
                }, {
                    'breakpoint': 661,
                    'settings': {
                        'slidesToShow': maxSlides > 2 ? maxSlides - 1 : 1,
                        'slidesToScroll': maxSlides > 1 ? maxSlides - 1 : 1,
                        'arrows': false
                    }
                }]
            });

            ngRender();
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('resHeader', {
        'bindings': {
            'resource': '@',
            'template': '@',
            'currentData': '='
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/res-header/templates/res-header.html',
        'controller': 'resHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    resHeaderController.$inject = ["$http", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('resHeaderController', resHeaderController);

    function resHeaderController($http, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.defaultFilter = [];
        ctrl.activeState = 0;
        ctrl.filterEnterpriseSolutions = null;
        ctrl.makeActive = makeActive;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'res-header').then(function (response) {
                ctrl.data = response.data.fields;

                if (ctrl.data.filters) {
                    ctrl.data.filters.forEach(function (item, index) {
                        if (item.match(/\.json/)) {
                            return $http.get(item).then(function (response) {
                                ctrl.defaultFilter = ctrl.data.filters[0].FilterID;
                                return ctrl.data.filters[index] = response.data.fields;
                            }, handleRejection);
                        }
                    });
                }
                // Filter groups for ENT 2.1
                if (ctrl.data.filterGroups) {
                    ctrl.data.filterGroups.forEach(function (item, index) {
                        item.group.forEach(function (value, key) {
                            if (value.match(/\.json/)) {
                                return $http.get(value).then(function (response) {
                                    ctrl.currentData[index] = item.group[0].FilterID;
                                    return ctrl.data.filterGroups[index].group[key] = response.data.fields;
                                }, handleRejection);
                            }
                        });
                    });
                }
            }, handleRejection);
        }

        function makeActive(index) {
            ctrl.activeState = index;
        }

        $timeout(function () {
            // case studies page filter
            ctrl.filterEnterpriseSolutions = function (category) {
                var $container = $('.row-enterprise-solution-filtered');
                if (category === 'all') {
                    if ($container.hasClass('slick-slider')) {
                        $container.slick('slickUnfilter');
                    } else {
                        $container.find('.item:hidden').fadeIn(100).addClass('visible');
                    }
                } else {
                    if ($container.hasClass('slick-slider')) {
                        $container.slick('slickUnfilter');
                        $container.find('.item:not(.enterprise-category--' + category + ')').removeClass('visible');
                        $container.find('.item.enterprise-category--' + category).addClass('visible');
                        $container.slick('slickFilter', '.visible');
                        $container.slick('slickGoTo', 0);
                    } else {
                        $.when($container.find('.item:not(.enterprise-category--' + category + ')').removeClass('visible').fadeOut(100)).done(function () {
                            $container.find('.item.enterprise-category--' + category).fadeIn(100, function () {
                                $(this).addClass('visible');
                            });
                        });
                    }
                }
            };
        });
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entRisk', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/risk/templates/risk.html',
        'controller': 'entRiskController'
    });
})();
'use strict';

(function () {
    'use strict';

    entRiskController.$inject = ["$timeout", "$element", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entRiskController', entRiskController);

    function entRiskController($timeout, $element, directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-risk').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            $($element).find('.image-popup').magnificPopup({
                'type': 'image',
                'closeOnContentClick': false,
                'closeBtnInside': true
            });

            $($element).find('.video-popup').magnificPopup({
                'type': 'iframe',
                'closeOnContentClick': false,
                'closeBtnInside': true
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('solutions', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/solutions/templates/solutions.html',
        'controller': 'solutionsController'
    });
})();
'use strict';

(function () {
    'use strict';

    solutionsController.$inject = ["$http", "directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('solutionsController', solutionsController);
    function solutionsController($http, directiveData, errorService) {
        var ctrl = this;
        ctrl.show = false;
        ctrl.solutions = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            directiveData.getByUrl(ctrl.resource || 'solutions').then(function (response) {
                ctrl.data = response.data.fields;

                ctrl.data.solutions.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        $http.get(item).then(function (response) {
                            ctrl.solutions[index] = response.data.fields;
                            if (angular.isDefined(ctrl.solutions[index].ArticleTitle)) {
                                ctrl.solutions[index].ArticleTitle = String(ctrl.solutions[index].ArticleTitle).replace(/<[^>]+>/gm, '');
                            }
                        }, handleRejection).then(function () {
                            if (!angular.equals({}, ctrl.solutions)) ctrl.show = true;
                        });
                    }
                });
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entSupport', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/support/templates/support.html',
        'controller': 'entSupportController'
    });
})();
'use strict';

(function () {
    'use strict';

    entSupportController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entSupportController', entSupportController);
    function entSupportController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-support').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entTableSection', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/table-section/templates/table-section.html',
        'controller': 'enterpriseController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.enterprise').component('entThreat', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/enterprise/components/threat/templates/threat.html',
        'controller': 'entThreatController'
    });
})();
'use strict';

(function () {
    'use strict';

    entThreatController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.enterprise').controller('entThreatController', entThreatController);
    function entThreatController(directiveData, errorService) {
        var ctrl = this;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'ent-threat').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersAwardsBlock', {
        'templateUrl': '/resources/template/html/modules/partners/components/awards-block/templates/awards-block.template.html',
        'controller': 'partnersAwardsBlockController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersAwardsBlockController.$inject = ["$http", "ENV", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersAwardsBlockController', partnersAwardsBlockController);

    function partnersAwardsBlockController($http, ENV, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return $http.get('/content/' + ENV.locale + '/partners/partners-award-block.json').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersForm', {
        'bindings': {
            'resource': '@',
            'formName': '@',
            'email': '@'
        },
        'templateUrl': '/resources/template/html/modules/partners/components/form/templates/form.template.html',
        'controller': 'partnersFormController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersFormController.$inject = ["partnersFormService", "directiveData", "$scope", "marketoHelperService", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersFormController', partnersFormController);

    function partnersFormController(partnersFormService, directiveData, $scope, marketoHelperService, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.form = {
            'form': ctrl.formName || 'vas',
            'email': ctrl.email || 'kss_sales@kaspersky.com',
            'termsAndConditions': false
        };
        ctrl.thankYouState = ctrl.thankYouState || 'partners-contact-thank-you';
        ctrl.submitted = false;
        ctrl.submitForm = submitForm;
        ctrl.changeTerms = changeTerms;
        ctrl.$onInit = activate;

        function activate() {
            return directiveData.getByUrl(ctrl.resource || 'how-to-buy-form').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data.marketoCheck && ctrl.data.marketoCheck[0] === 'Yes') {
                    runMarketo(ctrl.data.marketoId, ctrl.data.marketoNr);
                } else {
                    runPartner();
                }
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function runMarketo(mId, mNr) {
            marketoHelperService.loadMarketo(mId, mNr, $scope);
        }

        function runPartner() {
            setupLabel();
            function setupLabel() {
                if ($('.checkbox input').length) {
                    $('.checkbox').each(function () {
                        $(this).removeClass('selected');
                    });
                    $('.checkbox input:checked').each(function () {
                        $(this).parent('.checkbox').addClass('selected');
                    });
                }
            }

            $('body').on('click', '.checkbox label', function () {
                var $this = $(this),
                    $parent = $this.parent();
                $parent.toggleClass('selected');
            });
        }

        function submitForm(form) {
            ctrl.submitted = true;
            if (form.$invalid) return;
            ctrl.submitted = false;
            ctrl.form.termsAndConditions = true;
            return partnersFormService.submitForm(ctrl.form).then(function () {
                return partnersFormService.goToThankYouPage(ctrl.thankYouState);
            });
        }

        function changeTerms() {
            ctrl.form.termsAndConditions = !ctrl.form.termsAndConditions;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    partnersFormService.$inject = ["$http", "$state", "ENV"];
    angular.module('kappGlobal.partners').factory('partnersFormService', partnersFormService);

    function partnersFormService($http, $state, ENV) {
        return {
            'submitForm': submitForm,
            'goToThankYouPage': goToThankYouPage
        };

        function submitForm(form, formName) {
            var formSubmissionValues = formatFormData(form, formName);
            return $http.post(ENV.server + '/_svc/FormService/', formSubmissionValues);
        }

        function goToThankYouPage(state) {
            return $state.go(state);
        }

        function formatFormData(obj) {
            var result = '';
            for (var key in obj) {
                if (!obj.hasOwnProperty(key)) continue;
                result += '&' + key + '=' + obj[key];
            }
            return result;
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersCaseStudies', {
        'templateUrl': '/resources/template/html/modules/partners/components/case-studies-section/templates/case-studies-section.template.html',
        'controller': 'partnersCaseStudiesController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersCaseStudiesController.$inject = ["directiveData", "$http", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersCaseStudiesController', partnersCaseStudiesController);

    function partnersCaseStudiesController(directiveData, $http, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.caseStudies = [];
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('msp-case-studies').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data && ctrl.data.caseStudies) {
                    ctrl.caseStudies.length = ctrl.data.caseStudies.length;
                    ctrl.data.caseStudies.forEach(function (caseStudy, index) {
                        return $http.get(caseStudy).then(function (response) {
                            ctrl.caseStudies[index] = response.data.fields;
                        }, handleRejection);
                    });
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersLogos', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/partners/components/logos/templates/logos.template.html',
        'controller': 'partnersLogosController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersLogosController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersLogosController', partnersLogosController);

    function partnersLogosController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('logo-grid').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersHomeFeaturedSection', {
        'templateUrl': '/resources/template/html/modules/partners/components/home-featured-section/templates/home-featured-section.template.html',
        'controller': 'partnersHomeFeaturedSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersHomeFeaturedSectionController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersHomeFeaturedSectionController', partnersHomeFeaturedSectionController);

    function partnersHomeFeaturedSectionController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('partners-home-featured-section').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersPartnershipPremiumServices', {
        'templateUrl': '/resources/template/html/modules/partners/components/partnership-premium-services/templates/partnership-premium-services.template.html',
        'controller': 'partnersPartnershipPremiumServicesController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersPartnershipPremiumServicesController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersPartnershipPremiumServicesController', partnersPartnershipPremiumServicesController);

    function partnersPartnershipPremiumServicesController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('partners-premium-services-section').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersProgramsListSection', {
        'templateUrl': '/resources/template/html/modules/partners/components/programs-list-section/templates/programs-list-section.template.html',
        'controller': 'partnersProgramsListSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersProgramsListSectionController.$inject = ["directiveData", "$http", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersProgramsListSectionController', partnersProgramsListSectionController);

    function partnersProgramsListSectionController(directiveData, $http, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.programs = [];
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('programs-and-integrations').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data && ctrl.data.programs) {
                    ctrl.programs.length = ctrl.data.programs.length;
                    ctrl.data.programs.forEach(function (program, index) {
                        return $http.get(program).then(function (response) {
                            ctrl.programs[index] = response.data.fields;
                        }, handleRejection);
                    });
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.about').component('strategicPartnersCarousel', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/partners/components/strategic-partners-carousel/templates/strategic-partners-carousel.html',
        'controller': 'strategicPartnersCarouselController'
    });
})();
'use strict';

(function () {
    'use strict';

    strategicPartnersCarouselController.$inject = ["directiveData", "appHelperService", "$timeout", "errorService"];
    angular.module('kappGlobal.partners').controller('strategicPartnersCarouselController', strategicPartnersCarouselController);

    function strategicPartnersCarouselController(directiveData, appHelperService, $timeout, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('strategic-partners-carousel').then(function (response) {
                ctrl.data = response.data.fields;
                runScript();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScript() {
            var slickConfig = {
                'dots': true,
                'infinite': true,
                'slidesToShow': 4,
                'draggable': false,
                'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                'rtl': appHelperService.isPageDirectionRTL(),
                'responsive': [{
                    'breakpoint': 769,
                    'settings': {
                        'slidesToShow': 1
                    }
                }]
            };

            $timeout(function () {
                angular.element('.partners .slider').not('.slick-initialized').slick(slickConfig);
            }, 0);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.partners').component('partnersTestimonialCarousel', {
        'templateUrl': '/resources/template/html/modules/partners/components/testimonials-carousel/templates/testimonials-carousel.template.html',
        'controller': 'partnersTestimonialCarouselController'
    });
})();
'use strict';

(function () {
    'use strict';

    partnersTestimonialCarouselController.$inject = ["$timeout", "directiveData", "appHelperService", "errorService"];
    angular.module('kappGlobal.partners').controller('partnersTestimonialCarouselController', partnersTestimonialCarouselController);

    function partnersTestimonialCarouselController($timeout, directiveData, appHelperService, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('testimonial-carousel').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    var slickConfig = {
                        'dots': true,
                        'infinite': true,
                        'slidesToShow': 2,
                        'draggable': false,
                        'nextArrow': '<a type="button" href="" class="next-slide"></a>',
                        'prevArrow': '<a type="button" href="" class="prev-slide"></a>',
                        'rtl': appHelperService.isPageDirectionRTL(),
                        'responsive': [{
                            'breakpoint': 769,
                            'settings': {
                                'slidesToShow': 1
                            }
                        }]
                    };
                    $('.testimonials-slider').slick(slickConfig);
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('appsInside', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/apps-inside/templates/apps-inside.template.html',
        'controller': 'sharedGetByNameController'
    });
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbCompareTable4up', {
        'multiElement': true,
        'controller': 'smbCompareTable4upController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'default';
            if ($attrs.template) template = $attrs.template;
            return '/resources/template/html/modules/smb/components/compare-table-4up/templates/compare-table-4up-' + template + '.template.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    smbCompareTable4upController.$inject = ["directiveData", "errorService", "$http", "angularLoad", "$scope", "$rootScope", "appHelperService"];
    angular.module('kappGlobal.smb').controller('smbCompareTable4upController', smbCompareTable4upController);

    function smbCompareTable4upController(directiveData, errorService, $http, angularLoad, $scope, $rootScope, appHelperService) {
        var ctrl = this,
            isTrue = appHelperService.isTrue;
        ctrl.data = {};
        ctrl.$onInit = activate;
        ctrl.toggleTable = toggleTable;
        ctrl.showTable = false;
        ctrl.enableFixedHeaders = false;

        function activate() {
            getData();
        }

        var ngRender = $rootScope.$on('ngRender', function () {
            runScripts();
            ngRender();
        });

        function toggleTable(event) {
            event.preventDefault();
            ctrl.showTable = !ctrl.showTable;
        }

        function getData() {
            return directiveData.getByUrl('smb-product-compare').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.products = ctrl.data.products || [];
                ctrl.enableFixedHeaders = isTrue(ctrl.data.enableFixedHeaders);

                if (ctrl.products) {
                    ctrl.products.forEach(function (item, index) {
                        if (item.match(/\.json/)) {
                            return $http.get(item).then(function (response) {
                                ctrl.products[index] = response.data.fields;
                            }, function (rejection) {
                                errorService.warn(rejection);
                            });
                        }
                    });
                }

                if (ctrl.data.secondColHighlight && ctrl.data.secondColHighlight[0]) {
                    ctrl.featuCol = 2;
                } else if (ctrl.data.thirdColHighlight && ctrl.data.thirdColHighlight[0]) {
                    ctrl.featuCol = 3;
                } else if (ctrl.data.fourthColHighlight && ctrl.data.fourthColHighlight[0]) {
                    ctrl.featuCol = 4;
                } else if (ctrl.data.fifthColHighlight && ctrl.data.fifthColHighlight[0]) {
                    ctrl.featuCol = 5;
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            // Check if current page has comparison charts on it
            if ($('.comparison-chart').length) {
                // Loop through each comparison chart and set the default column
                var mobileDefault = $('.comparison-chart').data('comparison-default');
                $('.comparison-chart .' + mobileDefault).addClass('currently-active');
            }

            $('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this),

                // Get navigation direction
                direction = $this.data('comparison-nav-direction'),

                // Get chart ID from the data attribute
                chartID = $this.closest('.comparison-nav').data('comparison-chart'),

                // Get comparison chart using that ID
                $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),

                // Get comparison chart mobile nav
                $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]');

                // Remove featured style from the comparison chart mobile nav
                $comparisonChartNav.find('li a.feat').removeClass('feat');

                // Get current column
                var $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                    currentTitle = $currentColumn.find('h2.product-title > a').clone(),
                    currentID = parseInt($currentColumn.data('column')),
                    nextID = parseInt(currentID + 1),
                    prevID = parseInt(currentID - 1),
                    nextNavID = parseInt(currentID + 2),
                    prevNavID = parseInt(currentID - 2),
                    newNextTitle = void 0;

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title > a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.text());
                    $comparisonChartNav.find('li.nav-next a').html(currentTitle.text());
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title > a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-next a').html(newNextTitle.text());
                    $comparisonChartNav.find('li.nav-prev a').html(currentTitle.text());
                }
            });

            if (ctrl.enableFixedHeaders) loadWaypoints();
        }

        function loadWaypoints() {

            angularLoad.loadScript('resources/template/js/jquery.waypoints.sticky.min.js').then(function () {
                var siteTitle = $('.site-header .site-title').outerHeight(true),
                    mainNavHeight = $('#site-header .main-nav').outerHeight(true);
                /* eslint-disable */
                var sticky = new Waypoint.Sticky({
                    'element': $('.sticky-row-header')[0],
                    'offset': -$('.sticky-row-header .row-item').height() + 150
                }),
                    inViewList = new Waypoint.Inview({
                    'element': $('.comparison-chart .row-footer')[0],
                    'entered': function entered(direction) {
                        if (direction === 'down') {
                            $('.sticky-row-header').hide();
                        }
                    },
                    'exit': function exit(direction) {
                        if (direction === 'up') {
                            $('.sticky-row-header').show();
                        }
                    }
                });
                /* eslint-enable */

                $('.sticky-row-header').css('top', siteTitle);

                if ($(window).width() > 768) {
                    $('.sticky-row-header').css('top', mainNavHeight);
                }

                $scope.$on('$destroy', function () {
                    inViewList.destroy();
                    sticky.destroy();
                });
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbContactUs', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/contact-us/templates/contact-us.template.html',
        'controller': 'smbContactUsController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbContactUsController.$inject = ["directiveData", "$scope", "errorService", "marketoHelperService"];
    angular.module('kappGlobal.smb').controller('smbContactUsController', smbContactUsController);

    function smbContactUsController(directiveData, $scope, errorService, marketoHelperService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.formId = '';
        ctrl.formNr = 0;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'smb-contact-us').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.formId = ctrl.data.formId;
                ctrl.formNr = parseInt(ctrl.data.formNr);
                runMarketo(ctrl.formId, ctrl.formNr);
            }, handleRejection);
        }

        function runMarketo(mId, mNr) {
            marketoHelperService.loadMarketo(mId, mNr, $scope);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbDownloadThankYou', {
        'bindings': {
            'componentData': '<',
            'productName': '<',
            'version': '@',
            'resource': '@',
            'product': '<'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/download-thank-you/templates/download-thank-you.template.html',
        'controller': 'smbDownloadThankYouController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbDownloadThankYouController.$inject = ["$timeout", "ENV", "directiveData", "downloadLinks", "errorService"];
    angular.module('kappGlobal.smb').controller('smbDownloadThankYouController', smbDownloadThankYouController);

    function smbDownloadThankYouController($timeout, ENV, directiveData, downloadLinks, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.downloadData = [];
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'thank-you').then(function (response) {
                var fallbackLanguageCodes = void 0;
                ctrl.data = response.data.fields;

                if (ctrl.data.linksType) {
                    if (!angular.isString(ctrl.data.selectedLanguagesCodes)) {
                        ctrl.data.selectedLanguagesCodes = ctrl.data.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }
                    if (!angular.isString(ctrl.data.fallbackLanguageCodes)) {
                        fallbackLanguageCodes = ctrl.data.fallbackLanguageCodes.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }
                    var docSettings = {
                        'applications': ctrl.data.shortProdName.split(','),
                        'options': {
                            'links_type': ctrl.data.linksType,
                            'locale_selection_type': ctrl.data.localeSelectionType,
                            'selected_languages_codes': ctrl.data.selectedLanguagesCodes,
                            'fallback_language_code': fallbackLanguageCodes,
                            'website_country_code': ctrl.data.websiteCountryCode || ENV.locale.substr(3, 5),
                            'website_language_code': 'en',
                            'website_fallback_language': 'en',
                            'lang_locale_link_selection_amount': null,
                            'show_release_version_type': null,
                            'use_aux_lang_for_app_plugins': null
                        }
                    };

                    $timeout(function () {
                        //productData.getsmb(ctrl.data.prodName).then((response)=>{
                        //ctrl.productInfo = response.data.fields;
                        downloadLinks.getByApp('', docSettings).then(function (response) {
                            ctrl.downloadData = response.data[0].applications[0];
                        }, handleRejection);
                        //})
                    });
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbProdDownload', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/prod-download/templates/prod-download.template.html',
        'controller': 'smbProdDownloadController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbProdDownloadController.$inject = ["$http", "directiveData", "errorService"];
    angular.module('kappGlobal.smb').controller('smbProdDownloadController', smbProdDownloadController);

    function smbProdDownloadController($http, directiveData, errorService) {
        var ctrl = this;
        ctrl.product = [];
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('product-download').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.product = response.data.fields.product;
                if (ctrl.product.match(/\.json/)) {
                    return $http.get(ctrl.product).then(function (response) {
                        return ctrl.product = response.data.fields;
                    }, handleRejection);
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbProdList', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/prod-list/templates/prod-list.template.html',
        'controller': 'smbProdListController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbProdListController.$inject = ["$http", "ENV", "errorService"];
    angular.module('kappGlobal.smb').controller('smbProdListController', smbProdListController);

    function smbProdListController($http, ENV, errorService) {
        var ctrl = this;
        ctrl.data = { 'product': [] };
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return $http.get('/content/' + ENV.locale + '/smb-downloads/smb-downloads-products.json').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.product.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            return ctrl.data.product[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbProds', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/prods/templates/prods.template.html',
        'controller': 'smbProdsController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbProdsController.$inject = ["$http", "directiveData", "errorService"];
    angular.module('kappGlobal.smb').controller('smbProdsController', smbProdsController);

    function smbProdsController($http, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = [];
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('smb-products').then(function (response) {
                ctrl.data = response.data.fields.product;
                ctrl.data.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            return ctrl.data[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbProdsBlock', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/smb/components/prods-block/templates/prods-block.template.html',
        'controller': 'smbProdsBlockController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbProdsBlockController.$inject = ["$http", "appHelperService", "directiveData", "errorService", "ENV", "$anchorScroll", "$rootScope"];
    angular.module('kappGlobal.smb').controller('smbProdsBlockController', smbProdsBlockController);

    function smbProdsBlockController($http, appHelperService, directiveData, errorService, ENV, $anchorScroll, $rootScope) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.products = [];
        ctrl.downloadState = appHelperService.assertStateByName('smb-downloads');
        ctrl.$onInit = activate;
        ctrl.locale = ENV.locale;

        function activate() {
            getData();
        }

        var ngRender = $rootScope.$on('ngRender', scrollTo);

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('smb-products-block').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.products = response.data.fields.products;
                ctrl.products.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item, { 'cache': true }).then(function (response) {
                            return ctrl.products[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }

        function scrollTo() {
            $anchorScroll.yOffset = $('header').outerHeight(true);
            $anchorScroll();
            ngRender();
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbSupportCustomHtml', {
        'templateUrl': '/resources/template/html/modules/smb/components/support-custom-html/templates/support-custom-html.template.html',
        'controller': 'smbSupportCustomHtmlController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbSupportCustomHtmlController.$inject = ["$http", "ENV", "errorService"];
    angular.module('kappGlobal.smb').controller('smbSupportCustomHtmlController', smbSupportCustomHtmlController);

    function smbSupportCustomHtmlController($http, ENV, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return $http.get('/content/' + ENV.locale + '/smb-support/smb-support-custom-html.json').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.smb').component('smbTargetedSolutions', {
        'templateUrl': '/resources/template/html/modules/smb/components/targeted-solutions/templates/targeted-solutions.template.html',
        'controller': 'smbTargetedSolutionsController'
    });
})();
'use strict';

(function () {
    'use strict';

    smbTargetedSolutionsController.$inject = ["$http", "directiveData", "errorService"];
    angular.module('kappGlobal.smb').controller('smbTargetedSolutionsController', smbTargetedSolutionsController);

    function smbTargetedSolutionsController($http, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = { 'smbProducts': [] };
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl('targeted-solutions').then(function (response) {
                ctrl.data = response.data.fields;
                ctrl.data.smbProducts.forEach(function (item, index) {
                    if (item.match(/\.json/)) {
                        return $http.get(item).then(function (response) {
                            return ctrl.data.smbProducts[index] = response.data.fields;
                        }, handleRejection);
                    }
                });
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbAwards', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/vsb/components/awards/templates/awards.template.html',
        'controller': 'vsbAwardsController'
    });
})();
'use strict';

(function () {
    'use strict';

    vsbAwardsController.$inject = ["errorService", "directiveData"];
    angular.module('kappGlobal.vsb').controller('vsbAwardsController', vsbAwardsController);
    function vsbAwardsController(errorService, directiveData) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            if (ctrl.resource && ctrl.resource.match(/\//)) {
                return directiveData.get(ctrl.resource).then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            } else {
                return directiveData.getByUrl(ctrl.resource || 'vsb-awards').then(function (response) {
                    ctrl.data = response.data.fields;
                }, handleRejection);
            }
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbCompareTable4up', {
        'templateUrl': '/resources/template/html/modules/vsb/components/compare-table-4up/templates/compare-table-4up.template.html',
        'controller': 'vsbCompareTable4upController'
    });
})();
'use strict';

(function () {
    'use strict';

    vsbCompareTable4upController.$inject = ["$timeout", "$element", "directiveData", "windowHelperService", "errorService"];
    angular.module('kappGlobal.vsb').controller('vsbCompareTable4upController', vsbCompareTable4upController);

    function vsbCompareTable4upController($timeout, $element, directiveData, windowHelperService, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;
        ctrl.navigateUserTo = windowHelperService.navigateUserTo;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('vsb-home-compare-table').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    runScripts();
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {

            // Check if current page has comparison charts on it
            if ($($element).find('.comparison-chart').length) {
                // Loop through each comparison chart and set the default column
                var mobileDefault = $($element).find('.comparison-chart').data('comparison-default');
                $('.comparison-chart .' + mobileDefault).addClass('currently-active');
            }

            $($element).find('.comparison-nav li a').on('click', function (e) {
                e.preventDefault();
                var $this = $(this),
                    direction = $this.data('comparison-nav-direction'),
                    chartID = $this.closest('.comparison-nav').data('comparison-chart'),
                    $comparisonChart = $('.comparison-chart[data-comparison-chart="' + chartID + '"]'),
                    $comparisonChartNav = $('.comparison-nav[data-comparison-chart="' + chartID + '"]');

                // Remove featured style from the comparison chart mobile nav
                $comparisonChartNav.find('li a.feat').removeClass('feat');

                // Get current column
                var $currentColumn = $comparisonChart.find('.row-header .column-product.currently-active'),
                    currentTitle = $currentColumn.find('h2.product-title a').clone(),
                    currentID = parseInt($currentColumn.data('column')),
                    nextID = parseInt(currentID + 1),
                    prevID = parseInt(currentID - 1),
                    nextNavID = parseInt(currentID + 2),
                    prevNavID = parseInt(currentID - 2);

                // Check direction and if prev/next column exists
                if (direction === 'prev' && $comparisonChart.find('.column-product.column-' + prevID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + prevID).addClass('currently-active');
                    var newPrevTitle = $comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + prevNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-prev a').html(newPrevTitle.children());
                    $comparisonChartNav.find('li.nav-next a').html(currentTitle.children());
                } else if (direction === 'next' && $comparisonChart.find('.column-product.column-' + nextID).length) {
                    $comparisonChart.find('.column-' + currentID).removeClass('currently-active');
                    $comparisonChart.find('.column-' + nextID).addClass('currently-active');
                    var newNextTitle = $comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').clone();

                    if ($comparisonChart.find('.row-header .column-product.column-' + nextNavID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-next a').addClass('feat');
                    }

                    if ($comparisonChart.find('.row-header .column-product.column-' + currentID + ' h2.product-title a').hasClass('feat')) {
                        $comparisonChartNav.find('li.nav-prev a').addClass('feat');
                    }

                    $comparisonChartNav.find('li.nav-next a').html(newNextTitle.children());
                    $comparisonChartNav.find('li.nav-prev a').html(currentTitle.children());
                }
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbDownloadThankYou', {
        'bindings': {
            'componentData': '<',
            'productName': '<',
            'version': '@',
            'resource': '@',
            'product': '<'
        },
        'templateUrl': '/resources/template/html/modules/vsb/components/download-thank-you/templates/download-thank-you.template.html',
        'controller': 'vsbDownloadThankYouController'
    });
})();
'use strict';

(function () {
    'use strict';

    vsbDownloadThankYouController.$inject = ["$rootScope", "$timeout", "ENV", "directiveData", "downloadLinks", "validationHelper", "errorService"];
    angular.module('kappGlobal.vsb').controller('vsbDownloadThankYouController', vsbDownloadThankYouController);

    function vsbDownloadThankYouController($rootScope, $timeout, ENV, directiveData, downloadLinks, validationHelper, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        var hideAlphabets = [];
        directiveData.getLocal('general-settings').then(function (response) {
            var res = response.data.fields;
            if (res && res.hideAlphabets) return hideAlphabets = res.hideAlphabets;
        }, handleRejection);

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'small-office-security-free-trial').then(function (response) {
                ctrl.data = response.data.fields;
                $rootScope.kaspersky.productName = ctrl.data.prodName || ctrl.productName;

                var application = '';
                if (ctrl.data.shortProdNameTaxonomy.length > 0) {
                    application = ctrl.data.shortProdNameTaxonomy.map(function (item) {
                        return item.key;
                    });
                }
                if (ctrl.data.linksType) {
                    if (!angular.isString(ctrl.data.selectedLanguagesCodes)) {
                        ctrl.data.selectedLanguagesCodes = ctrl.data.selectedLanguagesCodes.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }
                    if (!angular.isString(ctrl.data.fallbackLanguageCode)) {
                        ctrl.data.fallbackLanguageCode = ctrl.data.fallbackLanguageCode.reduce(function (prev, cur, index) {
                            return index !== 0 ? prev + ',' + cur.key : prev + cur.key;
                        }, '');
                    }
                    var docSettings = {
                        'applications': application || ctrl.data.shortProdName.split(','),
                        'options': {
                            'links_type': ctrl.data.linksType,
                            'locale_selection_type': ctrl.data.localeSelectionType,
                            'selected_languages_codes': ctrl.data.selectedLanguagesCodes,
                            'fallback_language_code': ctrl.data.fallbackLanguageCode,
                            'website_country_code': ctrl.data.websiteCountryCode || ENV.locale.substr(3, 5),
                            'website_language_code': 'en',
                            'website_fallback_language': 'en',
                            'lang_locale_link_selection_amount': null,
                            'show_release_version_type': null,
                            'use_aux_lang_for_app_plugins': null
                        }
                    };

                    $timeout(function () {
                        downloadLinks.getByApp('', docSettings).then(function (response) {
                            ctrl.downloadData = response.data[0].applications[0];
                            _.forEach(ctrl.downloadData.groups, function (group) {
                                group.downloads = _.remove(group.downloads, function (d) {
                                    return validationHelper.isNullOrUndefined(hideAlphabets) ? true : hideAlphabets.indexOf(d.alphabet) === -1;
                                });
                            });
                        });
                    });
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbLrcAlertBlock', {
        'templateUrl': '/resources/template/html/modules/vsb/components/lrc-alert-block/templates/lrc-alert-block.template.html',
        'controller': 'vsbLrcAlertBlockController'
    });
})();
'use strict';

(function () {
    'use strict';

    vsbLrcAlertBlockController.$inject = ["$http", "ENV", "errorService"];
    angular.module('kappGlobal.vsb').controller('vsbLrcAlertBlockController', vsbLrcAlertBlockController);
    function vsbLrcAlertBlockController($http, ENV, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return $http.get('/content/' + ENV.locale + '/vsb-lrc-closed/vsb-lrc-alert-block.json').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbProductArticles', {
        'bindings': {
            'resource': '@'
        },
        'controller': 'vsbProductArticlesController',
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'product-articles';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/vsb/components/product-articles/templates/' + template + '.template.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    vsbProductArticlesController.$inject = ["$element", "$timeout", "directiveData", "errorService"];
    angular.module('kappGlobal.vsb').controller('vsbProductArticlesController', vsbProductArticlesController);
    function vsbProductArticlesController($element, $timeout, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'vsb-product-articles').then(function (response) {
                ctrl.data = response.data.fields;
                $timeout(function () {
                    $($element).find('.toggle-button').click(function (e) {
                        var $this = $(this);
                        e.preventDefault();
                        $this.closest('.toggle-container').find('.toggle-content').slideToggle();
                        $this.closest('.toggle-container').toggleClass('open');
                    });
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.vsb').component('vsbWelcomeSection', {
        'bindings': {
            'type': '@',
            'productInfo': '<'
        },
        'templateUrl': '/resources/template/html/modules/vsb/components/welcome-section/templates/welcome-section.template.html',
        'controller': 'vsbWelcomeSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    vsbWelcomeSectionController.$inject = ["$state", "directiveData", "productData", "errorService"];
    angular.module('kappGlobal.vsb').controller('vsbWelcomeSectionController', vsbWelcomeSectionController);

    function vsbWelcomeSectionController($state, directiveData, productData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.productShortName = '';
        ctrl.productInfo = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getData() {
            ctrl.curState = $state.$current.name;
            return directiveData.getByUrl('welcome-section').then(function (response) {
                ctrl.lrcTitle = response.data.fields.lrcTitle;
                ctrl.productShortName = response.data.fields.productShortName;
                productData.getvsb(ctrl.productShortName).then(function (response) {
                    ctrl.productInfo = response.data.fields;
                }, handleRejection);
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.search').component('search', {
        'bindings': {
            'resource': '@',
            'queryStringSearch': '<',
            'queryStringSection': '<'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/search/components/templates/search.component.html',
        'controller': 'searchController'
    });
})();
'use strict';

(function () {
    'use strict';

    searchController.$inject = ["$rootScope", "$stateParams", "$element", "$scope", "$window", "directiveData", "searchService", "$sanitize", "$log", "errorService"];
    angular.module('kappGlobal.search').controller('searchController', searchController);

    function searchController($rootScope, $stateParams, $element, $scope, $window, directiveData, searchService, $sanitize, $log, errorService) {
        var ctrl = this;
        ctrl.searchModel = {
            'query': '',
            'searchTerm': '',
            'orderBy': 'date',
            'responseCount': 0,
            'responsePages': 0,
            'currentPage': 1,
            'pageSize': 10,
            'responseData': [],
            'allPages': [],
            'pageNumbers': []
        };

        ctrl.showNoresultDisplay = false;
        ctrl.search = search;
        ctrl.getPaginationNumbering = getPaginationNumbering;
        ctrl.changeOrderBy = changeOrderBy;
        ctrl.getPageDisplayTotal = getPageDisplayTotal;
        ctrl.getPageStartDisplay = getPageStartDisplay;
        ctrl.pageChangeHandler = pageChangeHandler;
        ctrl.$onInit = activate;
        ctrl.$onDestroy = handleDestruction;

        function decodeSearchQuery(searchQuery) {
            var doc = $window.document,
                element = doc.createElement('div');
            element.innerHTML = searchQuery;
            return element.textContent;
        }

        function activate() {
            getData();
            var searchQuery = $sanitize($stateParams.query);
            ctrl.searchModel.query = decodeSearchQuery(searchQuery);
            if (!searchQuery) return;
            search(searchQuery);
            ctrl.autocomplete();
        }
        // Sanitization of an input
        $scope.$watch('$ctrl.searchModel.query', function (newV) {
            ctrl.searchModel.query = decodeSearchQuery($sanitize(newV.replace(/<[^>]+>/gm, '')));
        });

        function getData() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.searchData = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        var autoOff = $rootScope.$on('autocompleteCall', function (ev, val) {
            ctrl.autocompleteQ = val.d[0].Value;
        });

        ctrl.autocomplete = function () {
            searchService.autocomplete(ctrl.searchModel.query, $element);
        };

        function handleDestruction() {
            autoOff();
            var autocompleteTag = $window.document.querySelector('#autocompleteElement');
            if (autocompleteTag) $window.document.querySelector('head').removeChild(autocompleteTag);
        }

        function search(queryText, section) {
            var decodedQueryText = decodeSearchQuery(queryText);
            reset(decodedQueryText);
            return searchAndGetPages(decodedQueryText, section);
        }

        function searchAndGetPages(queryText) {
            var section = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            return searchService.search(queryText, section).then(getSearchResponse, handleRejection);
        }

        function reset(queryText) {
            ctrl.searchModel.allPages = [];
            ctrl.searchModel.currentPage = 1;
            ctrl.searchModel.responseCount = 0;
            ctrl.searchModel.searchTerm = queryText;
            ctrl.searchModel.query = queryText;
            ctrl.autocompleteQhtml = undefined;
            ctrl.autocompleteQ = undefined;
        }

        function getSearchResponse(response) {
            ctrl.searchModel.responseData = searchService.mapSearchResult(response.data);
            ctrl.searchModel.responseCount = response.data['count'];
            ctrl.searchModel.responsePages = response.data['pages'];

            if (ctrl.searchModel.responseCount === 0) {
                ctrl.showNoresultDisplay = true;

                setRootScopeProperties(ctrl.searchModel.query, 0);
            } else {
                return searchService.getDataPage(ctrl.searchModel.responseData.searchId, ctrl.searchModel.currentPage).then(function (value) {
                    ctrl.searchModel.allPages = value.data;
                    setRootScopeProperties(ctrl.searchModel.query, ctrl.searchModel.responseCount);
                }, handleRejection);
            }
        }

        function getPaginationNumbering(index) {
            return ctrl.searchModel.pageSize * ctrl.searchModel.currentPage - (ctrl.searchModel.pageSize - index) + 1;
        }

        function changeOrderBy(orderBy) {
            ctrl.searchModel.orderBy = orderBy;
        }

        function getPageDisplayTotal() {
            var totalOnCurrentPageViewing = ctrl.searchModel.pageSize * ctrl.searchModel.currentPage;
            if (ctrl.searchModel.responseCount < totalOnCurrentPageViewing) return ctrl.searchModel.responseCount;
            return totalOnCurrentPageViewing;
        }

        function getPageStartDisplay() {
            var totalOnCurrentPageViewing = ctrl.searchModel.pageSize * ctrl.searchModel.currentPage;
            return totalOnCurrentPageViewing - ctrl.searchModel.pageSize + 1;
        }

        function pageChangeHandler(number) {
            ctrl.searchModel.currentPage = number;
            return searchAndGetPages(ctrl.searchModel.query);
        }

        function setRootScopeProperties(searchQuery, searchCount) {
            $rootScope.search.query = searchQuery;
            $rootScope.search.count = searchCount;
            $rootScope.kaspersky.searchTotalResults = searchCount;
            $rootScope.kaspersky.searchQuery = searchQuery;
            if ($window.trackPageView) {
                $log.log($rootScope.kaspersky);
                $window.trackPageView($rootScope.kaspersky.pageName); // search tracking requirement
            }
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.premiumServices').component('b2cPremiumServiceDescription', {
        'bindings': {
            'productInfo': '<'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/premium-services/premium-service-description/templates/premium-service-description.template.html',
        'controller': 'premiumServiceDescriptionController'
    });
})();
'use strict';

(function () {
    'use strict';

    premiumServiceDescriptionController.$inject = ["priceData", "$rootScope", "$timeout", "$scope", "errorService"];
    angular.module('kappGlobal.premiumServices').controller('premiumServiceDescriptionController', premiumServiceDescriptionController);

    function premiumServiceDescriptionController(priceData, $rootScope, $timeout, $scope, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.syncPriceList = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            $timeout(function () {
                getPriceList();
            });
        }

        function getPriceList() {
            return priceData.getPrice(ctrl.productInfo.title).then(function (response) {
                ctrl.syncPriceList.priceList = response.data[0];
                if (ctrl.syncPriceList.priceList) getBuyUrl();
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getBuyUrl() {
            ctrl.syncPriceList.priceId = ctrl.syncPriceList.priceList.id;
            return priceData.getCartLink(ctrl.syncPriceList.priceList.product_id, ctrl.syncPriceList.priceId, 'purchase').then(function (response) {
                ctrl.syncPriceList.buyLink = response.data;
            }, handleRejection);
        }

        function handleCurrencyChange() {
            ctrl.currency = $rootScope.currency || '';
            getPriceList();
        }

        // Prices update when currency selector is switched
        var currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange);

        function handleScopeDestroyed() {
            currencyChange();
        }

        $scope.$on('$destroy', handleScopeDestroyed);
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.premiumServices').component('b2cBottomSection', {
        'templateUrl': '/resources/template/html/modules/b2c/components/premium-services/premium-service-banner/templates/premium-service-banner.html',
        'controller': 'premiumServicesBannerController'
    });
})();
'use strict';

(function () {
    'use strict';

    premiumServicesBannerController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.premiumServices').controller('premiumServicesBannerController', premiumServicesBannerController);

    function premiumServicesBannerController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('b2c-premium-services-live-chat').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.premiumServices').component('b2cPremiumServicesFaq', {
        'templateUrl': '/resources/template/html/modules/b2c/components/premium-services/premium-services-faq/templates/premium-services-faq.template.html',
        'controller': 'premiumServicesFaqController'
    });
})();
'use strict';

(function () {
    'use strict';

    premiumServicesFaqController.$inject = ["directiveData", "$timeout", "errorService"];
    angular.module('kappGlobal.premiumServices').controller('premiumServicesFaqController', premiumServicesFaqController);

    function premiumServicesFaqController(directiveData, $timeout, errorService) {
        var ctrl = this;
        ctrl.faqs = {};
        ctrl.premiumServices = {};
        ctrl.sideBarTitle = '';
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            getfaqs();
            getServices();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getfaqs() {
            //side-bar-product-list
            return directiveData.getByUrl('faqs-accordion-list').then(function (response) {
                ctrl.faqs = response.data.fields;
                $timeout(function () {
                    $('.accordion-section > li > h4, .ent-accordion .accordion-section .accordion-title').click(function () {
                        $(this).parent().toggleClass('open');
                        $(this).siblings().slideToggle();
                    });
                });
            }, handleRejection);
        }
        function getServices() {
            return directiveData.getByUrl('side-bar-product-list').then(function (response) {
                //return directiveData.get(`/home-security/premium-service-faq/faqs-side-bar-services.json`).then((response) => {
                ctrl.sideBarTitle = response.data.fields.title;
                if (response.data.fields.products) {
                    ctrl.premiumServices.length = response.data.fields.products.length;
                    response.data.fields.products.forEach(function (premiumService, index) {
                        return directiveData.get(premiumService).then(function (response) {
                            ctrl.premiumServices[index] = response.data.fields;
                        }, handleRejection);
                    });
                }
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.premiumServices').component('b2cPageHeader', {
        'bindings': {
            'productInfo': '<'
        },
        'templateUrl': '/resources/template/html/modules/b2c/components/premium-services/premium-services-header/templates/premium-services-header.template.html',
        'controller': 'premiumServicesHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    premiumServicesHeaderController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.premiumServices').controller('premiumServicesHeaderController', premiumServicesHeaderController);

    function premiumServicesHeaderController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl('page-header').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    angular.module('kappGlobal.premiumServices').component('b2cPremiumServicesSection', {
        'templateUrl': '/resources/template/html/modules/b2c/components/premium-services/premium-services-section/templates/premium-services-section.html',
        'controller': 'premiumServicesSectionController'
    });
})();
'use strict';

(function () {
    'use strict';

    premiumServicesSectionController.$inject = ["$document", "directiveData", "priceData", "$rootScope", "angularLoad", "$scope", "tracking", "windowHelperService", "buyBlockHelperService", "errorService"];
    angular.module('kappGlobal.premiumServices').controller('premiumServicesSectionController', premiumServicesSectionController);

    function premiumServicesSectionController($document, directiveData, priceData, $rootScope, angularLoad, $scope, tracking, windowHelperService, buyBlockHelperService, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.premiumServices = {};
        ctrl.loadInstantChat = loadInstantChat;
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function loadInstantChat() {
            angularLoad.loadScript('//secure.logmeinrescue.com/InstantChat/InstantChat.aspx').then(function () {
                $document[0].getElementById('ICContainer').style.display = '';

                var ICLoader = new RescueInstantChatLoader();
                ICLoader.ICContainer = 'ICContainer';
                ICLoader.HostedCSS = 'https://secure.logmeinrescue.com/InstantChat/Standard/InstantChat.css';
                ICLoader.HostedLanguagesForChatOnlyMode = 'https://secure.logmeinrescue.com/InstantChat/LanguagesForChatOnlyMode.js';
                ICLoader.HostedLanguagesForAppletMode = 'https://secure.logmeinrescue.com/InstantChat/LanguagesForAppletMode.js';
                ICLoader.EntryID = '1969317522';
                ICLoader.Tracking0 = ''; /* optional */
                ICLoader.Language = ''; /* optional */
                ICLoader.PostMessageTargetOrigin = ''; /* optional (For implementation details, see the LogMeIn Rescue Customization and Integration Guide) */
                ICLoader.Start();
            }, handleRejection);
        }

        function getData() {
            return directiveData.getByUrl('premium-services-list').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.data && ctrl.data.products) {
                    ctrl.premiumServices.length = ctrl.data.products.length;
                    preparePriceRequest();
                }
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function preparePriceRequest() {
            ctrl.data.products.forEach(function (premiumService, index) {
                return directiveData.get(premiumService).then(function (response) {
                    ctrl.premiumServices[index] = response.data.fields;
                    getPriceList(ctrl.premiumServices[index]);
                }, handleRejection);
            });
        }

        function getPriceList(premiumService) {
            return priceData.getPrice(premiumService.title).then(function (response) {
                premiumService.priceList = response.data[0];
                if (premiumService.priceList) getBuyUrl(premiumService);
            }, handleRejection);
        }

        function getBuyUrl(premiumService) {
            premiumService.priceId = premiumService.priceList.id;
            return priceData.getCartLink(premiumService.priceList.product_id, premiumService.priceId, 'purchase').then(function (response) {
                premiumService.buyLink = response.data;
            }, handleRejection);
        }

        function handleCurrencyChange() {
            ctrl.currency = $rootScope.currency || '';
            preparePriceRequest();
        }

        // Prices update when currency selector is switched
        var currencyChange = $rootScope.$on('currencyChange', handleCurrencyChange);

        function handleScopeDestroyed() {
            currencyChange();
        }

        $scope.$on('$destroy', handleScopeDestroyed);

        ctrl.sendToBuyUrl = function ($event, buyUrl) {
            if ($event) $event.preventDefault();

            windowHelperService.goToUrl(tracking.formatQueryString(buyUrl, buyBlockHelperService.hasPurchaseAsPurchaseType(ctrl.purchaseType)));
        };
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('certificatesDetails', {
        'bindings': {
            'certInfo': '<'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/certificates/templates/certificates-details.template.html'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressArticlesBottombar', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-articles/templates/press-articles-bottombar.html',
        'bindings': {
            'usePressDetailTemplate': '<',
            'relatedArticleCategory': '@'
        },
        'controller': 'pressArticlesBottombarController'
    });
})();
'use strict';

(function () {
    'use strict';

    pressArticlesBottombarController.$inject = ["$state", "contentRepoService", "directiveData", "errorService", "ENV"];
    angular.module('kappGlobal.contentRepo').controller('pressArticlesBottombarController', pressArticlesBottombarController);

    function pressArticlesBottombarController($state, contentRepoService, directiveData, errorService, ENV) {
        var ctrl = this;
        ctrl.resources = [];
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;
        ctrl.$onInit = activate;
        ctrl.$onChanges = handleChanges;

        ctrl.isJPPressReleasesDetailsPage = $state.current.name === 'press-releases.details' && ENV.locale === 'ja-jp';

        function activate() {
            ctrl.usePressDetailTemplate = false;
            getTranslations();
        }

        function handleChanges(changesObj) {
            if (changesObj['relatedArticleCategory'].currentValue !== changesObj['relatedArticleCategory'].previousValue) {
                getResourceListData();
            }
        }

        function getResourceListData() {
            return contentRepoService.search(1, 5, 'pr', '', '', ctrl.relatedArticleCategory).then(function (response) {
                response['data']['docs'].map(function (doc) {
                    getLinkMediaByPath(doc['Url']);
                });
            }, handleRejection);
        }

        function getTranslations() {
            directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getLinkMediaByPath(link) {
            return contentRepoService.getLinkMediaByPath(link).then(function (response) {
                ctrl.resources.unshift(contentRepoService.populateLinkFields(response.data, link));
            }, handleRejection);
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('newsDetails', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/news/templates/news-details.html',
        'controller': 'sharedPressDetailsController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('news', {
        'bindings': {
            'subcategory': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/news/templates/news.html',
        'controller': 'sharedPressController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenterDetails', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-center/templates/press-center-details.html',
        'controller': 'sharedPressDetailsController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenter', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-center/templates/press-center.html',
        'controller': 'sharedPressController',
        'bindings': {
            'filterSelectorDefault': '@',
            'pageSize': '@',
            'subcategory': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenterAdvanced', {
        'bindings': {
            'template': '@',
            'resource': '@'
        },
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'horizontal-list';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/content-repository/components/press-center-advanced/templates/press-center-' + template + '.html';
        }],
        'controller': 'pressCenterAdvancedController'
    });
})();
'use strict';

(function () {
    'use strict';

    pressCenterAdvancedController.$inject = ["directiveData", "contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('pressCenterAdvancedController', pressCenterAdvancedController);
    function pressCenterAdvancedController(directiveData, contentRepoService, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
            getTranslations();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'press-center-advanced').then(function (response) {
                ctrl.data = response.data.fields;
                if (ctrl.template === 'horizontal-list') getRepoData();
            }, handleRejection);
        }

        function getRepoData() {
            return contentRepoService.search(1, 3, ctrl.repoType || 'smb', '', ctrl.repoCategory || '01::customers').then(handleRepoData, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function handleRepoData(response) {
            if (response && response.data) ctrl.articleUrls = response.data.docs;
            if (ctrl.articleUrls.length) {
                ctrl.articles = [];
                _.forEach(ctrl.articleUrls, function (article) {
                    contentRepoService.getLinkMediaByPath(article.Url).then(function (response) {
                        ctrl.articles.unshift(response.data);
                    }, handleRejection);
                });
            }
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenterFooter', {
        'bindings': {
            'resource': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-center-footer/templates/press-center-footer.html',
        'controller': 'pressCenterFooterController'
    });
})();
'use strict';

(function () {
    'use strict';

    pressCenterFooterController.$inject = ["directiveData", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('pressCenterFooterController', pressCenterFooterController);
    function pressCenterFooterController(directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;

        function activate() {
            getData();
        }

        function getData() {
            return directiveData.getByUrl(ctrl.resource || 'press-center-footer').then(function (response) {
                ctrl.data = response.data.fields;
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenterNav', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-center-nav/templates/press-center-nav.html',
        'controller': 'pressCenterNavController'
    });
})();
'use strict';

(function () {
    'use strict';

    pressCenterNavController.$inject = ["$window", "$scope", "directiveData", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('pressCenterNavController', pressCenterNavController);
    function pressCenterNavController($window, $scope, directiveData, errorService) {
        var ctrl = this;
        ctrl.data = {};
        ctrl.$onInit = activate;
        ctrl.$onDestroy = destroyGlobalListeners;

        function activate() {
            getData();
        }

        function destroyGlobalListeners() {
            angular.element(window).off('scroll.pressCenterNavController');
        }

        function getData() {
            return directiveData.getByUrl('press-center-nav').then(function (response) {
                ctrl.data = response.data.fields;
                runScripts();
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }

        function runScripts() {
            angular.element($window).on('scroll.pressCenterNavController', function () {
                if ($window.scrollY >= 447) {
                    ctrl.stickyNav = true;
                    angular.element('#page-header').css('margin-bottom', '73px');
                } else {
                    ctrl.stickyNav = false;
                    angular.element('#page-header').css('margin-bottom', '0px');
                }
                $scope.$apply();
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressCenterHeader', {
        'bindings': {
            'breadCrumbLink': '@',
            'breadCrumbTitle': '@',
            'contentName': '@',
            'template': '@'
        },
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'header';

            if ($attrs.template) template = $attrs.template;

            return '/resources/template/html/modules/_shared/components/content-repository/components/press-headers/templates/press-center-' + template + '.html';
        }],
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressDetailsHeader', {
        'bindings': {
            'summary': '@',
            'title': '@',
            'datePublicationStart': '@',
            'breadCrumbLink': '@',
            'breadCrumbTitle': '@',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-headers/templates/press-details-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressReleasesHeader', {
        'bindings': {
            'breadCrumbLink': '@',
            'breadCrumbTitle': '@',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-headers/templates/press-center-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressReleasesDetails', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-releases/templates/press-releases-details.html',
        'controller': 'sharedPressDetailsController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressReleasesHp', {
        'bindings': {
            'subcategory': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-releases/templates/press-releases-hp.html',
        'controller': 'sharedPressController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('pressReleases', {
        'bindings': {
            'subcategory': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/press-releases/templates/press-releases.html',
        'controller': 'sharedPressController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('repoHeader', {
        'bindings': {
            'showFigure': '<',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/repo-header/templates/repo-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    repoHeaderController.$inject = ["localStorageService", "contentRepoService", "$element", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('repoHeaderController', repoHeaderController);

    function repoHeaderController(localStorageService, contentRepoService, $element, errorService) {
        var ctrl = this;
        ctrl.contentName = ctrl.contentName || $element['context'].localName;
        var pressHeaderCacheName = ctrl.contentName + '-cache-name';
        ctrl.headerData = {};
        ctrl.$onInit = activate;

        function activate() {
            ctrl.headerData = getHeaderDataFromCache();
            if (ctrl.headerData === null) {
                getHeaderByName(ctrl.contentName);
            }
        }

        function getHeaderDataFromCache() {
            return localStorageService.get(pressHeaderCacheName);
        }

        function getHeaderByName(headerName) {
            return contentRepoService.getHeaderByName(headerName).then(function (response) {
                ctrl.headerData = contentRepoService.populateRepositoryHeaderFields(response.data);
                localStorageService.set(pressHeaderCacheName, ctrl.headerData);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesCategoryDetailsHeader', {
        'bindings': {
            'pageDescription': '@',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/repo-header/templates/resources-category-details-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('smbRepoAllArticlesHeader', {
        'bindings': {
            'showFigure': '<',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/repo-header/templates/smb-repo-all-articles-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('smbRepoHeader', {
        'bindings': {
            'showFigure': '<',
            'contentName': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/repo-header/templates/smb-repo-header.html',
        'controller': 'repoHeaderController'
    });
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('articlesBottomWidget', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-articles/templates/articles-bottom-widget.html',
        'controller': 'articlesBottomWidgetController',
        'bindings': {
            'repoType': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    articlesBottomWidgetController.$inject = ["$q", "localStorageService", "contentRepoService", "directiveData", "translationsHelperService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('articlesBottomWidgetController', articlesBottomWidgetController);

    function articlesBottomWidgetController($q, localStorageService, contentRepoService, directiveData, translationsHelperService, errorService) {
        var ctrl = this;
        ctrl.resources = [];
        ctrl.currentPage = 1;
        ctrl.pageSize = 6;
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;
        ctrl.getStrippedString = getStrippedString;
        ctrl.$onInit = activate;

        var cacheName = 'bottom-widget-' + ctrl.repoType,
            cached = localStorageService.get(cacheName);

        function activate() {
            ctrl.repoType = ctrl.repoType || 'smb';
            if (cached !== null) {
                ctrl.resources = cached;
                return;
            }
            getResourceListData();
            getTranslations();
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getResourceListData() {
            contentRepoService.getCategories().then(function (response) {
                var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType,
                    dataCategory = response['data'][repoType],
                    categories = contentRepoService.getCategoriesFromObject(dataCategory).categoriesList;
                categories.map(function (val) {
                    return contentRepoService.search(1, 5, repoType, '', val).then(getSearchResources, handleRejection);
                });
            }, handleRejection);
        }

        function getSearchResources(response) {
            var ajaxCalls = [],
                paths = [];

            response['data']['docs'].map(function (doc) {
                var url = doc['Url'];
                ajaxCalls.push(contentRepoService.getLinkMediaByPath(url));
                paths.push(url);
            });

            $q.all(ajaxCalls).then(function (response) {
                response.map(function (val, index) {
                    ctrl.resources.unshift(contentRepoService.populateLinkFields(val.data, paths[index]));
                });
            }, handleRejection).finally(function () {
                _.forEach(ctrl.resources, function (obj) {
                    translationsHelperService.getCategoryTranslation(obj.categoryName).then(function (response) {
                        obj.translatedCategoryName = response;
                    }, handleRejection);
                });
                localStorageService.set(cacheName, ctrl.resources, 120);
            });
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }

        function getStrippedString(str, length) {
            return contentRepoService.getStrippedString(str, length);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesArticleSidebar', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-articles/templates/articles-sidebar.html',
        'controller': 'articleSidebarController',
        'bindings': {
            'category': '<',
            'repoType': '<'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    articleSidebarController.$inject = ["$q", "localStorageService", "contentRepoService", "directiveData", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('articleSidebarController', articleSidebarController);

    function articleSidebarController($q, localStorageService, contentRepoService, directiveData, errorService) {
        var ctrl = this,
            cached = localStorageService.get(ctrl.cacheName);
        ctrl.resources = [];
        ctrl.currentPage = 1;
        ctrl.pageSize = 5;
        ctrl.getUserFriendlyUrl = contentRepoService.getUserFriendlyUrl;
        ctrl.$onInit = activate;

        function activate() {
            ctrl.repoType = ctrl.repoType || 'smb';
            ctrl.cacheName = 'side-widget-' + ctrl.repoType + '-' + ctrl.category;

            getTranslations();
            if (cached !== null) {
                ctrl.resources = cached;
                return;
            }
            getResourceListData();
        }

        function getResourceListData() {
            var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType;
            return contentRepoService.search(1, 5, repoType, '', ctrl.category).then(getSearchResources, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function getSearchResources(response) {
            var ajaxCalls = [],
                paths = [];

            response['data']['docs'].map(function (doc) {
                var url = doc['Url'];
                ajaxCalls.push(contentRepoService.getLinkMediaByPath(url));
                paths.push(url);
            });

            $q.all(ajaxCalls).then(function (response) {
                response.map(function (val, index) {
                    ctrl.resources.unshift(contentRepoService.populateLinkFields(val.data, paths[index]));
                });
            }, handleRejection).finally(function () {
                localStorageService.set(ctrl.cacheName, ctrl.resources, 120);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesBlogs', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-blogs/templates/resources-blogs.html',
        'controller': 'resourcesBlogsController'
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesBlogsController.$inject = ["localStorageService", "contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesBlogsController', resourcesBlogsController);

    function resourcesBlogsController(localStorageService, contentRepoService, errorService) {
        var ctrl = this,
            blogsCacheName = 'blogsCache-name',
            blogsResourcesCacheName = 'blogsResourcesCache-name';
        ctrl.blogData = {};
        ctrl.resources = [];
        ctrl.$onInit = activate;

        function activate() {
            ctrl.blogData = getBlogDataFromCache();
            if (ctrl.blogData === null) {
                getBlogByName('resource-center-blog-section');
            } else {
                ctrl.resources = getBlogResourcesDataFromCache();
                if (ctrl.resources === null) {
                    getBlogByName('resource-center-blog-section');
                }
            }
        }

        function getBlogDataFromCache() {
            return localStorageService.get(blogsCacheName);
        }

        function getBlogResourcesDataFromCache() {
            return localStorageService.get(blogsResourcesCacheName);
        }

        function getBlogByName(blogName) {
            return contentRepoService.getBlogByName(blogName).then(function (response) {
                ctrl.blogData = contentRepoService.populateBlogFields(response.data);
                if (ctrl.blogData !== null) {
                    ctrl.blogData['resources'].map(function (resource) {
                        ctrl.resources.push(contentRepoService.populateBlogResourceFields(resource));
                    });
                }
                localStorageService.set(blogsCacheName, ctrl.blogData);
                localStorageService.set(blogsResourcesCacheName, ctrl.resources);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesCategoryDetails', {
        'bindings': {
            'details': '<',
            'repoType': '@'
        },
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-category/templates/resources-category-details.html',
        'controller': 'resourcesCategoryDetailsController'
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesCategoryDetailsController.$inject = ["contentRepoService", "translationsHelperService", "seoHelperService", "windowHelperService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesCategoryDetailsController', resourcesCategoryDetailsController);
    function resourcesCategoryDetailsController(contentRepoService, translationsHelperService, seoHelperService, windowHelperService, errorService) {
        var ctrl = this;
        ctrl.details = {};
        ctrl.updatedBody = '';
        ctrl.titleSummary = '';
        ctrl.path = '';
        ctrl.isVideoList = false;
        ctrl.showOriginalImage = true;
        ctrl.$onInit = activate;
        ctrl.getRepoTranslation = translationsHelperService.getRepoTranslation;

        function activate() {
            ctrl.repoType = ctrl.repoType || 'smb';
            getDetails();
            getRepoTranslations();
        }

        function getRepoTranslations() {
            translationsHelperService.getRepoTranslations().then(function (response) {
                ctrl.repoTranslations = response;
            }).catch(handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getDetails() {
            var path = contentRepoService.getPathFromUrl();
            ctrl.path = contentRepoService.getUserFriendlyUrl(path).replace(/-/g, ' ');
            return contentRepoService.getLinkMediaByPath(path).then(function (response) {
                ctrl.details = contentRepoService.populateLinkFields(response['data'], path);
                seoHelperService.setMeta({ 'description': response.data.fields.metaDesc });
                windowHelperService.setWindowTitle(response.data.fields.metaTitle);

                var detailsBody = angular.element(ctrl.details.body);
                angular.forEach(detailsBody, function (value, index) {
                    if ((value.tagName === 'H1' || value.tagName === 'H2') && index === 0) {
                        ctrl.titleSummary = value.innerHTML;
                    } else {
                        if (value.nodeType !== 3) {
                            ctrl.updatedBody += value.outerHTML + '\n';
                        }
                    }

                    if (value.innerHTML && value.innerHTML.match(/<img/)) {
                        ctrl.showOriginalImage = false;
                    }
                });

                ctrl.updatedBody = ctrl.updatedBody || ctrl.details.summary;
                ctrl.category = contentRepoService.getCategoryParams();
                if (ctrl.details.categoryName && ctrl.category !== ctrl.details.categoryName) contentRepoService.setUrlToCorrectCategory(ctrl.details.categoryName);
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesCategoryVideos', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-category/templates/resources-category-videos.html',
        'controller': 'resourcesCategoryVideoController',
        'bindings': {
            'category': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesCategoryVideoController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesCategoryVideoController', resourcesCategoryVideoController);
    function resourcesCategoryVideoController(contentRepoService, errorService) {
        var ctrl = this;
        ctrl.resources = [];
        ctrl.currentPage = 1;
        ctrl.pageSize = 10;
        ctrl.contentType = 'Repository Video';
        ctrl.$onInit = activate;

        function activate() {
            ctrl.category = '';
            getMoreVideos();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getMoreVideos() {
            return contentRepoService.search(1, 1000, 'smb', ctrl.contentType).then(function (response) {
                response['data']['docs'].map(function (doc) {
                    getLinkMediaByPath(doc['Url']);
                }, handleRejection);
            }, handleRejection);
        }

        function getLinkMediaByPath(link) {
            return contentRepoService.getLinkMediaByPath(link).then(function (response) {
                ctrl.resources.unshift(contentRepoService.populateLinkFields(response.data, link));
            }, handleRejection);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesCategory', {
        'controller': 'resourcesCategoryController',
        'bindings': {
            'repoType': '@',
            'category': '@',
            'template': '@'
        },
        'templateUrl': ['$element', '$attrs', function ($element, $attrs) {
            var template = 'resources-category/templates/resources-category';
            if ($attrs.template) template = $attrs.template;
            return '/resources/template/html/modules/_shared/components/content-repository/components/' + template + '.html';
        }]
    });
})();
'use strict';

(function () {
    'use strict';

    resourceCategoryController.$inject = ["$q", "contentRepoService", "directiveData", "appHelperService", "errorService", "$element", "$timeout"];
    angular.module('kappGlobal.contentRepo').controller('resourcesCategoryController', resourceCategoryController);

    function resourceCategoryController($q, contentRepoService, directiveData, appHelperService, errorService, $element, $timeout) {
        var ctrl = this;
        ctrl.resources = [];
        ctrl.categories = [];
        ctrl.currentPage = 1;
        ctrl.pageSize = 10;
        ctrl.selectorModel = '';
        ctrl.hasResources = true;
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;
        ctrl.changeSelector = changeSelector;
        ctrl.pageChangeHandler = pageChangeHandler;
        ctrl.$onInit = activate;
        ctrl.defaultYears = contentRepoService.getDefaultYears();
        ctrl.locale = appHelperService.getLocale();

        function activate() {
            ctrl.category = ctrl.category || contentRepoService.getCategoryParams();
            ctrl.repoType = ctrl.repoType || 'smb';
            ctrl.currentPage = contentRepoService.getPageNumberFromUrl();
            ctrl.selectorModel = formatSelectorForApp(contentRepoService.getSelectorFromUrl());
            ctrl.startDate = formatSelectorForApp(contentRepoService.getDateFromUrl());
            if (ctrl.repoType !== 'about') setParams(ctrl.currentPage, ctrl.selectorModel, ctrl.startDate);
            getCategories();
            getResourceListData();
            getTranslations();
            setAttribute();
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getTranslations() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.translations = response.data.fields;
            }, handleRejection);
        }

        function changeSelector(selector) {
            var urlSelectorParam = formatSelectorForApp(contentRepoService.getSelectorFromUrl());

            if (urlSelectorParam === selector) {
                ctrl.selectorModel = '';
            } else if (selector) {
                ctrl.selectorModel = formatSelectorForApp(selector);
            }

            ctrl.currentPage = 1;
            setParams(ctrl.currentPage, ctrl.selectorModel, ctrl.startDate);

            return getResourceListData();
        }

        function getResourceListData() {
            var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType;
            return contentRepoService.search(ctrl.currentPage, ctrl.pageSize, repoType, '', ctrl.category, ctrl.selectorModel, ctrl.startDate).then(function (response) {
                var responseData = response['data'];
                ctrl.resourcesTotalCount = responseData['count'];
                ctrl.resources = [];
                var mediaByPathAjaxCalls = [],
                    urls = [];
                responseData['docs'].map(function (doc) {
                    var url = doc['Url'];
                    mediaByPathAjaxCalls.unshift(contentRepoService.getLinkMediaByPath(url));
                    urls.unshift(url);
                });

                $q.all(mediaByPathAjaxCalls).then(function (responses) {
                    responses.map(function (response, index) {
                        var fields = contentRepoService.populateLinkFields(response.data, urls[index]);
                        ctrl.resources.unshift(fields);
                    });
                }, handleRejection).finally(function () {
                    ctrl.hasResources = ctrl.resources.length > 0;
                });
            }, handleRejection);
        }

        function getCategories() {
            return contentRepoService.getCategories().then(function (response) {
                var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType,
                    category = response['data'][repoType];
                ctrl.categoriesList = contentRepoService.getCategoriesFromObject(category, ctrl.filterSelections);
                ctrl.categories = ctrl.categoriesList.categoriesWithSubCat[ctrl.category];
            }, handleRejection);
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }

        function pageChangeHandler(number) {
            ctrl.currentPage = number;
            contentRepoService.setPaginationUrlValue(ctrl.currentPage);
            return getResourceListData();
        }

        function formatSelectorForUrl(value) {
            return value.replace(/\s+/g, '-');
        }

        function formatSelectorForApp(value) {
            return value ? value.replace(/-/g, ' ') : '';
        }

        function setParams(pageNumber, selector, startDate) {
            contentRepoService.setPaginationUrlValue(pageNumber);
            contentRepoService.setSelectorUrlValue(formatSelectorForUrl(selector));
            contentRepoService.setDateUrlValue(formatSelectorForUrl(startDate));
        }

        function setAttribute() {
            $timeout(function () {
                var list = $($element).find('.articles-list li .icon-doc');
                list.each(function (i, elem) {
                    if ($(elem).hasClass('icon-pdf')) {
                        $(elem).attr('download', true);
                    }
                });
            }, 5000);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesItem', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-gallery/templates/resources-gallery-item.html',
        'controller': 'resourcesGalleryItemController',
        'bindings': {
            'categoryStrings': '@',
            'repoType': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesGalleryItemController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesGalleryItemController', resourcesGalleryItemController);

    function resourcesGalleryItemController(contentRepoService, errorService) {
        var ctrl = this;
        ctrl.resources = [];
        ctrl.categoryStrings = ctrl.categoryStrings || 'customers';
        ctrl.filteredResources = [];
        ctrl.$onInit = activate;

        function activate() {
            ctrl.repoType = ctrl.repoType || 'smb';
            getResourceListData();
        }

        function getResourceListData() {
            var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType;
            return contentRepoService.getResources(repoType).then(function (response) {
                if (response.data && response.data.fields && angular.isObject(response.data.fields.resourceCenterItems)) {
                    var responseData = response.data.fields.resourceCenterItems;
                    responseData.map(function (resourceCenterItem) {
                        ctrl.resources.unshift(contentRepoService.populateResourcesFields(resourceCenterItem));
                    });
                    var localCategories = ctrl.categoryStrings.split(',').reverse();
                    angular.forEach(ctrl.resources, function (outerValue) {
                        angular.forEach(localCategories, function (innerValue) {
                            var categoryName = innerValue;
                            if (innerValue !== 'certificates') categoryName = contentRepoService.buildCategoryName(innerValue);
                            if (outerValue.resourceCategory && outerValue.resourceCategory.title === categoryName) {
                                ctrl.filteredResources.unshift({ 'category': innerValue, 'resource': outerValue });
                            }
                        });
                    });
                }
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('resourcesGallery', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-gallery/templates/resources-gallery.html',
        'controller': 'resourcesGalleryController',
        'bindings': {
            'repoType': '@'
        }
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesGalleryController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesGalleryController', resourcesGalleryController);

    function resourcesGalleryController(contentRepoService, errorService) {
        var ctrl = this;
        ctrl.categories = [];
        ctrl.categoryStrings = '';
        ctrl.$onInit = activate;

        function activate() {
            ctrl.repoType = ctrl.repoType || 'smb';
            getResourceListData();
        }

        function getResourceListData() {
            contentRepoService.getCategories().then(function (response) {
                var repoType = ctrl.repoType === 'vsb' ? 'smb' : ctrl.repoType,
                    dataCategory = response['data'][repoType];
                ctrl.categories = contentRepoService.getCategoriesFromObject(dataCategory).categoriesList;
                ctrl.categories.map(function (value, index) {
                    if (index === ctrl.categories.length - 1) {
                        ctrl.categoryStrings += value;
                    } else {
                        ctrl.categoryStrings += value + ',';
                    }
                });
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    angular.module('kappGlobal.contentRepo').component('videoSideBar', {
        'templateUrl': '/resources/template/html/modules/_shared/components/content-repository/components/resources-videos/templates/resources-video-sidebar.html',
        'controller': 'resourcesVideoSideBarController'
    });
})();
'use strict';

(function () {
    'use strict';

    resourcesVideoSideBarController.$inject = ["contentRepoService", "errorService"];
    angular.module('kappGlobal.contentRepo').controller('resourcesVideoSideBarController', resourcesVideoSideBarController);

    function resourcesVideoSideBarController(contentRepoService, errorService) {
        var ctrl = this;
        ctrl.videos = [];
        ctrl.$onInit = activate;
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;

        function activate() {
            getMoreVideos();
        }

        function getMoreVideos() {
            return contentRepoService.search(1, 1000, 'smb', 'Repository Video').then(function (response) {
                response['data']['docs'].map(function (doc) {
                    getLinkMediaByPath(doc['Url']);
                });
            }, handleRejection);
        }

        function getLinkMediaByPath(link) {
            return contentRepoService.getLinkMediaByPath(link).then(function (response) {
                ctrl.videos.unshift(contentRepoService.populateLinkFields(response.data, link));
            }, handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }
    }
})();
'use strict';

(function () {
    'use strict';

    sharedPressDetailsController.$inject = ["contentRepoService", "windowHelperService", "seoHelperService", "errorService", "stripHtmlTagsFilter"];
    angular.module('kappGlobal.contentRepo').controller('sharedPressDetailsController', sharedPressDetailsController);

    function sharedPressDetailsController(contentRepoService, windowHelperService, seoHelperService, errorService, stripHtmlTagsFilter) {
        var ctrl = this;
        ctrl.details = {};
        ctrl.getTrustAsHtml = getTrustAsHtml;
        ctrl.$onInit = activate;

        function activate() {
            getDetails();
        }

        function getTrustAsHtml() {
            return contentRepoService.getTrustAsHtml(ctrl.details.body);
        }

        function getDescriptionMetaValue(text) {
            if (text.length > 300) {
                text = text.substring(0, 300);
                return stripHtmlTagsFilter(text) + '...';
            } else return text;
        }

        function getDetails() {
            var path = contentRepoService.getPathFromUrl();
            return contentRepoService.getLinkMediaByPath(path).then(function (response) {
                ctrl.details = contentRepoService.populateLinkFields(response['data'], path);
                seoHelperService.setMeta({ 'description': response.data.fields.metaDesc || response.data.fields.summary || getDescriptionMetaValue(response.data.fields.body) });
                windowHelperService.setWindowTitle(response.data.fields.metaTitle || response.data.fields.title);
            }, function (rejection) {
                errorService.warn(rejection);
            });
        }
    }
})();
'use strict';

(function () {
    'use strict';

    sharedPressController.$inject = ["$q", "$state", "contentRepoService", "directiveData", "stringHelper", "errorService", "ENV"];
    angular.module('kappGlobal.contentRepo').controller('sharedPressController', sharedPressController);

    function sharedPressController($q, $state, contentRepoService, directiveData, stringHelper, errorService, ENV) {
        var ctrl = this,
            currentPage = void 0,
            currentSelection = void 0;
        ctrl.resources = [];
        ctrl.resourcess = {};
        ctrl.prData = {};
        ctrl.filterSelections = [];
        ctrl.resourcesTotalCount = 0;
        ctrl.currentPage = 1;
        ctrl.pageSize = ctrl.pageSize || 10;
        ctrl.selector = '';
        ctrl.changeFilter = changeFilter;
        ctrl.getUserFriendlyUrl = getUserFriendlyUrl;
        ctrl.getSubCat = getSubCat;
        ctrl.pageChangeHandler = pageChangeHandler;
        ctrl.$onInit = activate;
        ctrl.locale = ENV.locale;

        var isJPHomepage = $state.current.name === 'homepage' && ctrl.locale === 'ja-jp';

        function activate() {
            var isRu = ENV.locale === 'ru-ru';
            ctrl.currentPage = contentRepoService.getPageNumberFromUrl();
            return getTranslation().then(function () {
                ctrl.selector = stringHelper.replaceDmToSpam(stringHelper.toTitleCase(contentRepoService.getSelectorFromUrl(), isRu));
                if (isJPHomepage) return getHomepageData();
                getResourceList(ctrl.currentPage, ctrl.selector);
                getFilterSelections();
            }).catch(handleRejection);
        }

        function handleRejection(rejection) {
            errorService.warn(rejection);
        }

        function getTranslation() {
            return directiveData.getLocal('general-translations').then(function (response) {
                ctrl.prData = response.data.fields;
                var filterSelectorDefault = ctrl.prData.prSortBy || 'Sort by',
                    filterSelectorDate = ctrl.prData.prDate || 'Date';
                ctrl.filterDefaultSelections = ctrl.locale === 'ja-jp' ? [filterSelectorDefault] : [filterSelectorDefault, filterSelectorDate];
            }).catch(handleRejection);
        }

        function getHomepageData() {
            return directiveData.getByUrl(ctrl.resource || 'press-releases').then(function (response) {
                ctrl.categories = response.data.fields.categories;
                getResourceListHp(ctrl.categories);
            }).catch(handleRejection);
        }

        function changeFilter(selection) {
            return getResourceList(1, selection);
        }

        function getResourceListHp(cats) {
            cats.map(function (item) {
                ctrl.pageSize = item.numberItems;
                getResourceList(1, item.category).then(function (response) {
                    item['prs'] = response;
                });
            });
        }

        function getResourceList(pageNumber, selection) {
            var targetSelection = checkDefaultSelector(selection);
            var targetPage = pageNumber;

            ctrl.currentPage = targetPage;

            if (targetSelection !== currentSelection || targetPage !== currentPage) {
                currentSelection = targetSelection;
                currentPage = targetPage;
                return getResourceListData('', '', currentSelection);
            }
        }

        function getResourceListData() {
            var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var subCat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

            if (!isJPHomepage) {
                contentRepoService.setPaginationUrlValue(ctrl.currentPage);
                contentRepoService.setSelectorUrlValue(formatSelectorForUrl(ctrl.selector));
            }
            return contentRepoService.search(ctrl.currentPage, ctrl.pageSize, 'pr', contentType, category, subCat).then(function (response) {
                var responseData = response['data'];
                ctrl.resourcesTotalCount = responseData['count'];
                return $q.all(responseData['docs'].map(function (doc) {
                    return getLinkMediaByPath(doc['Url']);
                }));
            }).then(function (resources) {
                ctrl.resources = _.without(resources, undefined);
                return ctrl.resources;
            }).catch(handleRejection);
        }

        function checkDefaultSelector(selection) {
            if (ctrl.filterDefaultSelections.indexOf(selection) !== -1) selection = '';
            return selection;
        }

        function pageChangeHandler(pageNumber) {
            getResourceList(pageNumber, ctrl.selector);
        }

        function getLinkMediaByPath(link) {
            return contentRepoService.getLinkMediaByPath(link).then(function (response) {
                return contentRepoService.populateLinkFields(response.data, link);
            }).catch(handleRejection);
        }

        function getUserFriendlyUrl(item) {
            return contentRepoService.getUserFriendlyUrl(item.url);
        }

        function getFilterSelections() {
            return contentRepoService.getCategories().then(function (response) {
                var pr = response['data']['pr'];
                ctrl.filterSelections = contentRepoService.getCategoriesFromObject(pr, ctrl.filterSelections, 'pr').categoriesList;
                ctrl.selector = ctrl.selector || ctrl.filterDefaultSelections[1] || ctrl.filterDefaultSelections[0];
            }).catch(handleRejection);
        }

        function formatSelectorForUrl(value) {
            if (!value) return '';
            value = value.replace(/-/g, '-_');
            return stringHelper.replaceSpamText(value.replace(/\s+/g, '-'));
        }

        function getSubCat(value) {
            return contentRepoService.buildSubCategoryName(value);
        }
    }
})();